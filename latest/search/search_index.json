{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-22  99.5971   99.9693   100.8121  99.5549\n2017-11-23  100.6843  99.3072   99.4247   101.7218\n2017-11-24  100.0866  99.7655   97.9018   102.65\n2017-11-25  100.8631  99.5304   97.9679   101.1897\n2017-11-26  99.2211   99.7201   97.0582   102.0647\n2017-11-27  99.2644   98.8808   96.5442   102.489\n2017-11-28  99.803    98.8324   96.997    103.7491\n2017-11-29  99.2986   99.1607   96.0229   103.3958\n2017-11-30  98.6968   100.2605  94.2617   104.2196\n\u22ee\n2018-07-22  100.3988  106.6651  79.5869   112.0212\n2018-07-23  98.9437   107.6947  80.322    112.3391\n2018-07-24  98.2111   108.7481  80.177    112.7651\n2018-07-25  96.6554   109.5798  80.0189   112.6119\n2018-07-26  95.0972   110.5146  80.9976   112.4499\n2018-07-27  94.7418   109.5506  79.4174   111.7126\n2018-07-28  96.5978   108.5391  79.4488   112.3716\n2018-07-29  95.5416   107.6893  78.5244   112.7357\n2018-07-30  94.6521   107.3742  78.0866   113.8292\n2018-07-31  94.1387   108.1415  77.9907   113.7606\n\njulia\n X[1]\nIndex       A        B        C         D\n2017-11-22  99.5971  99.9693  100.8121  99.5549\n\njulia\n X[1, :]\nIndex       A        B        C         D\n2017-11-22  99.5971  99.9693  100.8121  99.5549\n\njulia\n X[:, 1]\nIndex       A\n2017-11-22  99.5971\n2017-11-23  100.6843\n2017-11-24  100.0866\n2017-11-25  100.8631\n2017-11-26  99.2211\n2017-11-27  99.2644\n2017-11-28  99.803\n2017-11-29  99.2986\n2017-11-30  98.6968\n\u22ee\n2018-07-22  100.3988\n2018-07-23  98.9437\n2018-07-24  98.2111\n2018-07-25  96.6554\n2018-07-26  95.0972\n2018-07-27  94.7418\n2018-07-28  96.5978\n2018-07-29  95.5416\n2018-07-30  94.6521\n2018-07-31  94.1387\n\njulia\n X[1, 1]\nIndex       A\n2017-11-22  99.5971\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A        B         C         D\n2017-11-22  99.3813  100.7684  100.6515  99.0376\n2017-11-23  97.3425  99.1954   100.5761  97.8134\n2017-11-24  96.1865  100.4788  102.4673  95.8772\n2017-11-25  98.0016  99.8762   101.6315  95.9333\n2017-11-26  98.0112  101.4268  101.7533  95.9346\n2017-11-27  97.7907  101.0165  99.8282   95.3151\n2017-11-28  98.0515  99.6472   99.7559   93.5043\n2017-11-29  97.9143  99.0647   99.8865   93.7297\n2017-11-30  98.8259  99.8205   99.741    93.4281\n\u22ee\n2018-07-22  79.9778  98.2355   82.5711   87.9787\n2018-07-23  79.832   98.9987   82.2321   86.8128\n2018-07-24  79.0878  99.4273   83.9644   88.2107\n2018-07-25  79.8228  96.2567   84.3703   88.5508\n2018-07-26  79.6784  96.9062   85.1877   87.7215\n2018-07-27  78.3014  96.6557   85.8122   87.0933\n2018-07-28  78.8307  98.3271   84.1135   87.1301\n2018-07-29  78.0104  97.5814   84.696    87.9898\n2018-07-30  77.7429  97.5043   85.7792   87.0778\n2018-07-31  77.4986  96.5206   84.4581   85.9837\n\njulia\n X[trues(size(X,1)), :]\nIndex       A        B         C         D\n2017-11-22  99.3813  100.7684  100.6515  99.0376\n2017-11-23  97.3425  99.1954   100.5761  97.8134\n2017-11-24  96.1865  100.4788  102.4673  95.8772\n2017-11-25  98.0016  99.8762   101.6315  95.9333\n2017-11-26  98.0112  101.4268  101.7533  95.9346\n2017-11-27  97.7907  101.0165  99.8282   95.3151\n2017-11-28  98.0515  99.6472   99.7559   93.5043\n2017-11-29  97.9143  99.0647   99.8865   93.7297\n2017-11-30  98.8259  99.8205   99.741    93.4281\n\u22ee\n2018-07-22  79.9778  98.2355   82.5711   87.9787\n2018-07-23  79.832   98.9987   82.2321   86.8128\n2018-07-24  79.0878  99.4273   83.9644   88.2107\n2018-07-25  79.8228  96.2567   84.3703   88.5508\n2018-07-26  79.6784  96.9062   85.1877   87.7215\n2018-07-27  78.3014  96.6557   85.8122   87.0933\n2018-07-28  78.8307  98.3271   84.1135   87.1301\n2018-07-29  78.0104  97.5814   84.696    87.9898\n2018-07-30  77.7429  97.5043   85.7792   87.0778\n2018-07-31  77.4986  96.5206   84.4581   85.9837\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-22  99.3813\n2017-11-24  96.1865\n2017-11-25  98.0016\n2017-11-26  98.0112\n2017-11-29  97.9143\n2017-11-30  98.8259\n2017-12-02  98.4971\n2017-12-03  97.4853\n2017-12-05  98.5625\n\u22ee\n2018-07-12  82.1267\n2018-07-14  82.3183\n2018-07-15  81.9185\n2018-07-17  80.9222\n2018-07-21  81.4833\n2018-07-25  79.8228\n2018-07-27  78.3014\n2018-07-28  78.8307\n2018-07-29  78.0104\n2018-07-31  77.4986\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-22  99.3813\n2017-11-24  96.1865\n2017-11-26  98.0112\n2017-11-27  97.7907\n2017-11-28  98.0515\n2017-11-29  97.9143\n2017-11-30  98.8259\n2017-12-03  97.4853\n2017-12-04  97.3777\n\u22ee\n2018-06-27  83.5286\n2018-06-28  83.4887\n2018-06-29  84.9175\n2018-07-08  81.8266\n2018-07-11  81.9363\n2018-07-17  80.9222\n2018-07-18  81.0561\n2018-07-23  79.832\n2018-07-26  79.6784\n2018-07-31  77.4986\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C        D\n2017-11-22  99.9047   99.8434   99.3768  99.3395\n2017-11-23  99.3838   100.9411  98.1048  100.6035\n2017-11-24  99.2858   101.161   98.0233  99.4285\n2017-11-25  98.6708   100.7145  98.8114  99.8686\n2017-11-26  98.9679   100.709   97.8849  98.7373\n2017-11-27  100.5901  100.4639  97.5128  98.9674\n2017-11-28  100.9483  100.2877  98.4468  100.202\n2017-11-29  101.0913  99.0      97.9995  99.9188\n2017-11-30  100.0227  100.4519  98.3335  98.1933\n\u22ee\n2018-07-22  90.1299   107.8662  87.7354  98.6833\n2018-07-23  92.6923   106.6147  88.3422  97.958\n2018-07-24  91.86     105.0314  87.5363  98.5185\n2018-07-25  90.0447   103.7278  87.0286  97.3052\n2018-07-26  89.6176   104.6012  87.2294  97.9935\n2018-07-27  89.4042   104.3263  87.8548  96.2411\n2018-07-28  91.4372   106.8403  89.026   94.8588\n2018-07-29  90.2943   106.6565  87.814   94.3342\n2018-07-30  89.358    105.0268  87.3743  93.0228\n2018-07-31  89.0959   104.9551  87.5386  92.4791\n\njulia\n X[1:10, :]\nIndex       A         B         C        D\n2017-11-22  99.9047   99.8434   99.3768  99.3395\n2017-11-23  99.3838   100.9411  98.1048  100.6035\n2017-11-24  99.2858   101.161   98.0233  99.4285\n2017-11-25  98.6708   100.7145  98.8114  99.8686\n2017-11-26  98.9679   100.709   97.8849  98.7373\n2017-11-27  100.5901  100.4639  97.5128  98.9674\n2017-11-28  100.9483  100.2877  98.4468  100.202\n2017-11-29  101.0913  99.0      97.9995  99.9188\n2017-11-30  100.0227  100.4519  98.3335  98.1933\n2017-12-01  100.1623  100.422   97.628   97.474\n\njulia\n X[end-100:end, 2:3]\nIndex       B         C\n2018-04-22  99.3199   91.5305\n2018-04-23  100.1498  90.469\n2018-04-24  98.6607   90.4807\n2018-04-25  96.7875   90.2915\n2018-04-26  97.4468   90.7268\n2018-04-27  98.0281   90.6316\n2018-04-28  97.7173   90.8443\n2018-04-29  95.4353   90.6884\n2018-04-30  95.8417   91.4996\n\u22ee\n2018-07-22  107.8662  87.7354\n2018-07-23  106.6147  88.3422\n2018-07-24  105.0314  87.5363\n2018-07-25  103.7278  87.0286\n2018-07-26  104.6012  87.2294\n2018-07-27  104.3263  87.8548\n2018-07-28  106.8403  89.026\n2018-07-29  106.6565  87.814\n2018-07-30  105.0268  87.3743\n2018-07-31  104.9551  87.5386\n\njulia\n X[end, 2:end]\nIndex       B         C        D\n2018-07-31  104.9551  87.5386  92.4791\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B        C         D\n2017-11-22  100.4534  98.6752  100.2783  100.1686\n2017-11-23  100.6365  99.798   100.6295  99.0332\n2017-11-24  99.9127   98.8157  101.5477  96.925\n2017-11-25  98.9808   97.5218  102.3877  96.7515\n2017-11-26  100.7592  97.3161  104.0298  95.8682\n2017-11-27  101.7232  98.5856  104.2487  94.5896\n2017-11-28  101.6923  98.4659  102.6579  94.9066\n2017-11-29  103.3186  99.2802  104.1948  94.7714\n2017-11-30  103.4804  98.5472  103.1831  96.5379\n\u22ee\n2018-07-22  103.2459  92.7524  89.0981   86.6084\n2018-07-23  103.1278  91.502   88.3703   86.9882\n2018-07-24  101.8654  91.288   86.5445   88.7574\n2018-07-25  101.3961  92.6539  88.2944   89.0467\n2018-07-26  102.8319  90.1403  88.2881   88.7226\n2018-07-27  102.8032  89.1192  88.5717   89.1966\n2018-07-28  104.2427  90.3436  88.8457   90.499\n2018-07-29  106.3219  90.1283  88.8895   89.9161\n2018-07-30  107.2336  90.3714  88.0222   89.3035\n2018-07-31  107.2629  90.3504  88.6013   90.372\n\njulia\n X[:, :A]\nIndex       A\n2017-11-22  100.4534\n2017-11-23  100.6365\n2017-11-24  99.9127\n2017-11-25  98.9808\n2017-11-26  100.7592\n2017-11-27  101.7232\n2017-11-28  101.6923\n2017-11-29  103.3186\n2017-11-30  103.4804\n\u22ee\n2018-07-22  103.2459\n2018-07-23  103.1278\n2018-07-24  101.8654\n2018-07-25  101.3961\n2018-07-26  102.8319\n2018-07-27  102.8032\n2018-07-28  104.2427\n2018-07-29  106.3219\n2018-07-30  107.2336\n2018-07-31  107.2629\n\njulia\n X[:, [:B, :D]]\nIndex       B        D\n2017-11-22  98.6752  100.1686\n2017-11-23  99.798   99.0332\n2017-11-24  98.8157  96.925\n2017-11-25  97.5218  96.7515\n2017-11-26  97.3161  95.8682\n2017-11-27  98.5856  94.5896\n2017-11-28  98.4659  94.9066\n2017-11-29  99.2802  94.7714\n2017-11-30  98.5472  96.5379\n\u22ee\n2018-07-22  92.7524  86.6084\n2018-07-23  91.502   86.9882\n2018-07-24  91.288   88.7574\n2018-07-25  92.6539  89.0467\n2018-07-26  90.1403  88.7226\n2018-07-27  89.1192  89.1966\n2018-07-28  90.3436  90.499\n2018-07-29  90.1283  89.9161\n2018-07-30  90.3714  89.3035\n2018-07-31  90.3504  90.372\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A        B         C         D\n2016-01-01  99.8434  98.8253   98.7735   98.8307\n2016-01-02  98.8699  98.7886   98.1971   99.2109\n2016-01-03  98.8785  98.9377   98.9625   98.2794\n2016-01-04  97.6244  98.7981   99.4388   96.8336\n2016-01-05  97.3515  99.2231   100.5988  95.9395\n2016-01-06  96.7999  99.2187   100.2083  95.3444\n2016-01-07  97.5911  99.0493   99.7107   95.2598\n2016-01-08  97.8109  98.8041   100.0221  95.3764\n2016-01-09  96.5988  100.5064  99.2314   92.9171\n\u22ee\n2017-12-22  80.1171  100.5424  106.9563  107.7047\n2017-12-23  79.9169  100.3312  107.5738  106.3028\n2017-12-24  80.2937  100.7548  106.9135  104.8594\n2017-12-25  81.5464  101.1247  107.6966  104.1559\n2017-12-26  81.4577  99.3114   106.757   103.1976\n2017-12-27  80.3034  98.6912   108.442   104.9567\n2017-12-28  80.1352  100.5117  108.7224  104.7166\n2017-12-29  78.8612  101.5078  109.0288  107.1243\n2017-12-30  79.9201  102.7302  109.2863  108.2243\n2017-12-31  79.7375  102.3704  110.3122  109.1807\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A        B         C         D\n2017-07-01  92.1501  106.0602  113.3853  98.8908\n\njulia\n X[\n2016\n]  # whole year\nIndex       A         B         C         D\n2016-01-01  99.8434   98.8253   98.7735   98.8307\n2016-01-02  98.8699   98.7886   98.1971   99.2109\n2016-01-03  98.8785   98.9377   98.9625   98.2794\n2016-01-04  97.6244   98.7981   99.4388   96.8336\n2016-01-05  97.3515   99.2231   100.5988  95.9395\n2016-01-06  96.7999   99.2187   100.2083  95.3444\n2016-01-07  97.5911   99.0493   99.7107   95.2598\n2016-01-08  97.8109   98.8041   100.0221  95.3764\n2016-01-09  96.5988   100.5064  99.2314   92.9171\n\u22ee\n2016-12-22  104.7985  93.7365   116.4855  72.53\n2016-12-23  106.0511  92.6654   114.6775  74.865\n2016-12-24  106.7556  90.7173   114.7581  75.3087\n2016-12-25  106.8875  91.5019   115.826   74.3085\n2016-12-26  108.2831  91.5234   115.4417  75.2904\n2016-12-27  110.2308  92.2666   115.8892  76.92\n2016-12-28  110.4004  91.2921   115.1875  77.3723\n2016-12-29  110.0818  91.0064   115.771   77.3844\n2016-12-30  109.772   90.2459   116.2139  76.2357\n2016-12-31  109.7662  90.025    115.8762  76.3917\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-22  99.5971   99.9693   100.8121  99.5549\n2017-11-23  100.6843  99.3072   99.4247   101.7218\n2017-11-24  100.0866  99.7655   97.9018   102.65\n2017-11-25  100.8631  99.5304   97.9679   101.1897\n2017-11-26  99.2211   99.7201   97.0582   102.0647\n2017-11-27  99.2644   98.8808   96.5442   102.489\n2017-11-28  99.803    98.8324   96.997    103.7491\n2017-11-29  99.2986   99.1607   96.0229   103.3958\n2017-11-30  98.6968   100.2605  94.2617   104.2196\n\u22ee\n2018-07-22  100.3988  106.6651  79.5869   112.0212\n2018-07-23  98.9437   107.6947  80.322    112.3391\n2018-07-24  98.2111   108.7481  80.177    112.7651\n2018-07-25  96.6554   109.5798  80.0189   112.6119\n2018-07-26  95.0972   110.5146  80.9976   112.4499\n2018-07-27  94.7418   109.5506  79.4174   111.7126\n2018-07-28  96.5978   108.5391  79.4488   112.3716\n2018-07-29  95.5416   107.6893  78.5244   112.7357\n2018-07-30  94.6521   107.3742  78.0866   113.8292\n2018-07-31  94.1387   108.1415  77.9907   113.7606\n\njulia  X[1]\nIndex       A        B        C         D\n2017-11-22  99.5971  99.9693  100.8121  99.5549\n\njulia  X[1, :]\nIndex       A        B        C         D\n2017-11-22  99.5971  99.9693  100.8121  99.5549\n\njulia  X[:, 1]\nIndex       A\n2017-11-22  99.5971\n2017-11-23  100.6843\n2017-11-24  100.0866\n2017-11-25  100.8631\n2017-11-26  99.2211\n2017-11-27  99.2644\n2017-11-28  99.803\n2017-11-29  99.2986\n2017-11-30  98.6968\n\u22ee\n2018-07-22  100.3988\n2018-07-23  98.9437\n2018-07-24  98.2111\n2018-07-25  96.6554\n2018-07-26  95.0972\n2018-07-27  94.7418\n2018-07-28  96.5978\n2018-07-29  95.5416\n2018-07-30  94.6521\n2018-07-31  94.1387\n\njulia  X[1, 1]\nIndex       A\n2017-11-22  99.5971", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A        B         C         D\n2017-11-22  99.3813  100.7684  100.6515  99.0376\n2017-11-23  97.3425  99.1954   100.5761  97.8134\n2017-11-24  96.1865  100.4788  102.4673  95.8772\n2017-11-25  98.0016  99.8762   101.6315  95.9333\n2017-11-26  98.0112  101.4268  101.7533  95.9346\n2017-11-27  97.7907  101.0165  99.8282   95.3151\n2017-11-28  98.0515  99.6472   99.7559   93.5043\n2017-11-29  97.9143  99.0647   99.8865   93.7297\n2017-11-30  98.8259  99.8205   99.741    93.4281\n\u22ee\n2018-07-22  79.9778  98.2355   82.5711   87.9787\n2018-07-23  79.832   98.9987   82.2321   86.8128\n2018-07-24  79.0878  99.4273   83.9644   88.2107\n2018-07-25  79.8228  96.2567   84.3703   88.5508\n2018-07-26  79.6784  96.9062   85.1877   87.7215\n2018-07-27  78.3014  96.6557   85.8122   87.0933\n2018-07-28  78.8307  98.3271   84.1135   87.1301\n2018-07-29  78.0104  97.5814   84.696    87.9898\n2018-07-30  77.7429  97.5043   85.7792   87.0778\n2018-07-31  77.4986  96.5206   84.4581   85.9837\n\njulia  X[trues(size(X,1)), :]\nIndex       A        B         C         D\n2017-11-22  99.3813  100.7684  100.6515  99.0376\n2017-11-23  97.3425  99.1954   100.5761  97.8134\n2017-11-24  96.1865  100.4788  102.4673  95.8772\n2017-11-25  98.0016  99.8762   101.6315  95.9333\n2017-11-26  98.0112  101.4268  101.7533  95.9346\n2017-11-27  97.7907  101.0165  99.8282   95.3151\n2017-11-28  98.0515  99.6472   99.7559   93.5043\n2017-11-29  97.9143  99.0647   99.8865   93.7297\n2017-11-30  98.8259  99.8205   99.741    93.4281\n\u22ee\n2018-07-22  79.9778  98.2355   82.5711   87.9787\n2018-07-23  79.832   98.9987   82.2321   86.8128\n2018-07-24  79.0878  99.4273   83.9644   88.2107\n2018-07-25  79.8228  96.2567   84.3703   88.5508\n2018-07-26  79.6784  96.9062   85.1877   87.7215\n2018-07-27  78.3014  96.6557   85.8122   87.0933\n2018-07-28  78.8307  98.3271   84.1135   87.1301\n2018-07-29  78.0104  97.5814   84.696    87.9898\n2018-07-30  77.7429  97.5043   85.7792   87.0778\n2018-07-31  77.4986  96.5206   84.4581   85.9837\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-22  99.3813\n2017-11-24  96.1865\n2017-11-25  98.0016\n2017-11-26  98.0112\n2017-11-29  97.9143\n2017-11-30  98.8259\n2017-12-02  98.4971\n2017-12-03  97.4853\n2017-12-05  98.5625\n\u22ee\n2018-07-12  82.1267\n2018-07-14  82.3183\n2018-07-15  81.9185\n2018-07-17  80.9222\n2018-07-21  81.4833\n2018-07-25  79.8228\n2018-07-27  78.3014\n2018-07-28  78.8307\n2018-07-29  78.0104\n2018-07-31  77.4986\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-22  99.3813\n2017-11-24  96.1865\n2017-11-26  98.0112\n2017-11-27  97.7907\n2017-11-28  98.0515\n2017-11-29  97.9143\n2017-11-30  98.8259\n2017-12-03  97.4853\n2017-12-04  97.3777\n\u22ee\n2018-06-27  83.5286\n2018-06-28  83.4887\n2018-06-29  84.9175\n2018-07-08  81.8266\n2018-07-11  81.9363\n2018-07-17  80.9222\n2018-07-18  81.0561\n2018-07-23  79.832\n2018-07-26  79.6784\n2018-07-31  77.4986", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C        D\n2017-11-22  99.9047   99.8434   99.3768  99.3395\n2017-11-23  99.3838   100.9411  98.1048  100.6035\n2017-11-24  99.2858   101.161   98.0233  99.4285\n2017-11-25  98.6708   100.7145  98.8114  99.8686\n2017-11-26  98.9679   100.709   97.8849  98.7373\n2017-11-27  100.5901  100.4639  97.5128  98.9674\n2017-11-28  100.9483  100.2877  98.4468  100.202\n2017-11-29  101.0913  99.0      97.9995  99.9188\n2017-11-30  100.0227  100.4519  98.3335  98.1933\n\u22ee\n2018-07-22  90.1299   107.8662  87.7354  98.6833\n2018-07-23  92.6923   106.6147  88.3422  97.958\n2018-07-24  91.86     105.0314  87.5363  98.5185\n2018-07-25  90.0447   103.7278  87.0286  97.3052\n2018-07-26  89.6176   104.6012  87.2294  97.9935\n2018-07-27  89.4042   104.3263  87.8548  96.2411\n2018-07-28  91.4372   106.8403  89.026   94.8588\n2018-07-29  90.2943   106.6565  87.814   94.3342\n2018-07-30  89.358    105.0268  87.3743  93.0228\n2018-07-31  89.0959   104.9551  87.5386  92.4791\n\njulia  X[1:10, :]\nIndex       A         B         C        D\n2017-11-22  99.9047   99.8434   99.3768  99.3395\n2017-11-23  99.3838   100.9411  98.1048  100.6035\n2017-11-24  99.2858   101.161   98.0233  99.4285\n2017-11-25  98.6708   100.7145  98.8114  99.8686\n2017-11-26  98.9679   100.709   97.8849  98.7373\n2017-11-27  100.5901  100.4639  97.5128  98.9674\n2017-11-28  100.9483  100.2877  98.4468  100.202\n2017-11-29  101.0913  99.0      97.9995  99.9188\n2017-11-30  100.0227  100.4519  98.3335  98.1933\n2017-12-01  100.1623  100.422   97.628   97.474\n\njulia  X[end-100:end, 2:3]\nIndex       B         C\n2018-04-22  99.3199   91.5305\n2018-04-23  100.1498  90.469\n2018-04-24  98.6607   90.4807\n2018-04-25  96.7875   90.2915\n2018-04-26  97.4468   90.7268\n2018-04-27  98.0281   90.6316\n2018-04-28  97.7173   90.8443\n2018-04-29  95.4353   90.6884\n2018-04-30  95.8417   91.4996\n\u22ee\n2018-07-22  107.8662  87.7354\n2018-07-23  106.6147  88.3422\n2018-07-24  105.0314  87.5363\n2018-07-25  103.7278  87.0286\n2018-07-26  104.6012  87.2294\n2018-07-27  104.3263  87.8548\n2018-07-28  106.8403  89.026\n2018-07-29  106.6565  87.814\n2018-07-30  105.0268  87.3743\n2018-07-31  104.9551  87.5386\n\njulia  X[end, 2:end]\nIndex       B         C        D\n2018-07-31  104.9551  87.5386  92.4791", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B        C         D\n2017-11-22  100.4534  98.6752  100.2783  100.1686\n2017-11-23  100.6365  99.798   100.6295  99.0332\n2017-11-24  99.9127   98.8157  101.5477  96.925\n2017-11-25  98.9808   97.5218  102.3877  96.7515\n2017-11-26  100.7592  97.3161  104.0298  95.8682\n2017-11-27  101.7232  98.5856  104.2487  94.5896\n2017-11-28  101.6923  98.4659  102.6579  94.9066\n2017-11-29  103.3186  99.2802  104.1948  94.7714\n2017-11-30  103.4804  98.5472  103.1831  96.5379\n\u22ee\n2018-07-22  103.2459  92.7524  89.0981   86.6084\n2018-07-23  103.1278  91.502   88.3703   86.9882\n2018-07-24  101.8654  91.288   86.5445   88.7574\n2018-07-25  101.3961  92.6539  88.2944   89.0467\n2018-07-26  102.8319  90.1403  88.2881   88.7226\n2018-07-27  102.8032  89.1192  88.5717   89.1966\n2018-07-28  104.2427  90.3436  88.8457   90.499\n2018-07-29  106.3219  90.1283  88.8895   89.9161\n2018-07-30  107.2336  90.3714  88.0222   89.3035\n2018-07-31  107.2629  90.3504  88.6013   90.372\n\njulia  X[:, :A]\nIndex       A\n2017-11-22  100.4534\n2017-11-23  100.6365\n2017-11-24  99.9127\n2017-11-25  98.9808\n2017-11-26  100.7592\n2017-11-27  101.7232\n2017-11-28  101.6923\n2017-11-29  103.3186\n2017-11-30  103.4804\n\u22ee\n2018-07-22  103.2459\n2018-07-23  103.1278\n2018-07-24  101.8654\n2018-07-25  101.3961\n2018-07-26  102.8319\n2018-07-27  102.8032\n2018-07-28  104.2427\n2018-07-29  106.3219\n2018-07-30  107.2336\n2018-07-31  107.2629\n\njulia  X[:, [:B, :D]]\nIndex       B        D\n2017-11-22  98.6752  100.1686\n2017-11-23  99.798   99.0332\n2017-11-24  98.8157  96.925\n2017-11-25  97.5218  96.7515\n2017-11-26  97.3161  95.8682\n2017-11-27  98.5856  94.5896\n2017-11-28  98.4659  94.9066\n2017-11-29  99.2802  94.7714\n2017-11-30  98.5472  96.5379\n\u22ee\n2018-07-22  92.7524  86.6084\n2018-07-23  91.502   86.9882\n2018-07-24  91.288   88.7574\n2018-07-25  92.6539  89.0467\n2018-07-26  90.1403  88.7226\n2018-07-27  89.1192  89.1966\n2018-07-28  90.3436  90.499\n2018-07-29  90.1283  89.9161\n2018-07-30  90.3714  89.3035\n2018-07-31  90.3504  90.372", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A        B         C         D\n2016-01-01  99.8434  98.8253   98.7735   98.8307\n2016-01-02  98.8699  98.7886   98.1971   99.2109\n2016-01-03  98.8785  98.9377   98.9625   98.2794\n2016-01-04  97.6244  98.7981   99.4388   96.8336\n2016-01-05  97.3515  99.2231   100.5988  95.9395\n2016-01-06  96.7999  99.2187   100.2083  95.3444\n2016-01-07  97.5911  99.0493   99.7107   95.2598\n2016-01-08  97.8109  98.8041   100.0221  95.3764\n2016-01-09  96.5988  100.5064  99.2314   92.9171\n\u22ee\n2017-12-22  80.1171  100.5424  106.9563  107.7047\n2017-12-23  79.9169  100.3312  107.5738  106.3028\n2017-12-24  80.2937  100.7548  106.9135  104.8594\n2017-12-25  81.5464  101.1247  107.6966  104.1559\n2017-12-26  81.4577  99.3114   106.757   103.1976\n2017-12-27  80.3034  98.6912   108.442   104.9567\n2017-12-28  80.1352  100.5117  108.7224  104.7166\n2017-12-29  78.8612  101.5078  109.0288  107.1243\n2017-12-30  79.9201  102.7302  109.2863  108.2243\n2017-12-31  79.7375  102.3704  110.3122  109.1807\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A        B         C         D\n2017-07-01  92.1501  106.0602  113.3853  98.8908\n\njulia  X[ 2016 ]  # whole year\nIndex       A         B         C         D\n2016-01-01  99.8434   98.8253   98.7735   98.8307\n2016-01-02  98.8699   98.7886   98.1971   99.2109\n2016-01-03  98.8785   98.9377   98.9625   98.2794\n2016-01-04  97.6244   98.7981   99.4388   96.8336\n2016-01-05  97.3515   99.2231   100.5988  95.9395\n2016-01-06  96.7999   99.2187   100.2083  95.3444\n2016-01-07  97.5911   99.0493   99.7107   95.2598\n2016-01-08  97.8109   98.8041   100.0221  95.3764\n2016-01-09  96.5988   100.5064  99.2314   92.9171\n\u22ee\n2016-12-22  104.7985  93.7365   116.4855  72.53\n2016-12-23  106.0511  92.6654   114.6775  74.865\n2016-12-24  106.7556  90.7173   114.7581  75.3087\n2016-12-25  106.8875  91.5019   115.826   74.3085\n2016-12-26  108.2831  91.5234   115.4417  75.2904\n2016-12-27  110.2308  92.2666   115.8892  76.92\n2016-12-28  110.4004  91.2921   115.1875  77.3723\n2016-12-29  110.0818  91.0064   115.771   77.3844\n2016-12-30  109.772   90.2459   116.2139  76.2357\n2016-12-31  109.7662  90.025    115.8762  76.3917\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-22  0.7136\n2017-11-23  0.7396\n2017-11-24  0.9571\n2017-11-25  0.5424\n2017-11-26  0.8331\n2017-11-27  0.8059\n2017-11-28  0.9409\n2017-11-29  0.1564\n2017-11-30  0.4879\n\u22ee\n2018-07-22  0.9524\n2018-07-23  0.4411\n2018-07-24  0.6859\n2018-07-25  0.8577\n2018-07-26  0.9348\n2018-07-27  0.0491\n2018-07-28  0.472\n2018-07-29  0.3037\n2018-07-30  0.1893\n2018-07-31  0.8237\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.8151\n2017-05-23  0.5998\n2017-05-24  0.9291\n2017-05-25  0.3525\n2017-05-26  0.9874\n2017-05-27  0.584\n2017-05-28  0.8573\n2017-05-29  0.0754\n2017-05-30  0.6862\n\u22ee\n2018-01-22  0.8915\n2018-01-23  0.4998\n2018-01-24  0.15\n2018-01-25  0.9275\n2018-01-26  0.1904\n2018-01-27  0.7403\n2018-01-28  0.1966\n2018-01-29  0.749\n2018-01-30  0.6611\n2018-01-31  0.2184\n\njulia\n [x y]\nIndex       A       A\n2017-05-22  NaN     0.8151\n2017-05-23  NaN     0.5998\n2017-05-24  NaN     0.9291\n2017-05-25  NaN     0.3525\n2017-05-26  NaN     0.9874\n2017-05-27  NaN     0.584\n2017-05-28  NaN     0.8573\n2017-05-29  NaN     0.0754\n2017-05-30  NaN     0.6862\n\u22ee\n2018-07-22  0.9524  NaN\n2018-07-23  0.4411  NaN\n2018-07-24  0.6859  NaN\n2018-07-25  0.8577  NaN\n2018-07-26  0.9348  NaN\n2018-07-27  0.0491  NaN\n2018-07-28  0.472   NaN\n2018-07-29  0.3037  NaN\n2018-07-30  0.1893  NaN\n2018-07-31  0.8237  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-22  0.8742\n2017-11-23  0.0364\n2017-11-24  0.3371\n2017-11-25  0.1782\n2017-11-26  0.1302\n2017-11-27  0.6751\n2017-11-28  0.6544\n2017-11-29  0.6213\n2017-11-30  0.9\n\u22ee\n2018-07-22  0.3761\n2018-07-23  0.8433\n2018-07-24  0.7867\n2018-07-25  0.9301\n2018-07-26  0.0773\n2018-07-27  0.0888\n2018-07-28  0.3164\n2018-07-29  0.4679\n2018-07-30  0.3869\n2018-07-31  0.9524\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.2606\n2017-05-23  0.6579\n2017-05-24  0.1849\n2017-05-25  0.1072\n2017-05-26  0.8859\n2017-05-27  0.1026\n2017-05-28  0.05\n2017-05-29  0.5701\n2017-05-30  0.8854\n\u22ee\n2018-01-22  0.6754\n2018-01-23  0.4396\n2018-01-24  0.2135\n2018-01-25  0.698\n2018-01-26  0.1085\n2018-01-27  0.944\n2018-01-28  0.7097\n2018-01-29  0.848\n2018-01-30  0.8981\n2018-01-31  0.8667\n\njulia\n ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-22  0.9353\n2017-11-23  0.915\n2017-11-24  0.4439\n2017-11-25  0.7057\n2017-11-26  0.9851\n2017-11-27  0.4422\n2017-11-28  0.8319\n2017-11-29  0.8382\n2017-11-30  0.1208\n\u22ee\n2018-07-22  0.3826\n2018-07-23  0.9154\n2018-07-24  0.8554\n2018-07-25  0.0478\n2018-07-26  0.7201\n2018-07-27  0.3504\n2018-07-28  0.0368\n2018-07-29  0.75\n2018-07-30  0.319\n2018-07-31  0.4078\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.2185\n2017-05-23  0.4086\n2017-05-24  0.9669\n2017-05-25  0.9567\n2017-05-26  0.8169\n2017-05-27  0.4241\n2017-05-28  0.6602\n2017-05-29  0.8278\n2017-05-30  0.1591\n\u22ee\n2018-01-22  0.604\n2018-01-23  0.4801\n2018-01-24  0.6845\n2018-01-25  0.405\n2018-01-26  0.6573\n2018-01-27  0.6548\n2018-01-28  0.9382\n2018-01-29  0.0166\n2018-01-30  0.1887\n2018-01-31  0.0672\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-11-22  0.9353  0.6812\n2017-11-23  0.915   0.2202\n2017-11-24  0.4439  0.597\n2017-11-25  0.7057  0.6012\n2017-11-26  0.9851  0.8388\n2017-11-27  0.4422  0.4416\n2017-11-28  0.8319  0.5964\n2017-11-29  0.8382  0.4471\n2017-11-30  0.1208  0.8629\n\u22ee\n2018-07-22  0.3826  NaN\n2018-07-23  0.9154  NaN\n2018-07-24  0.8554  NaN\n2018-07-25  0.0478  NaN\n2018-07-26  0.7201  NaN\n2018-07-27  0.3504  NaN\n2018-07-28  0.0368  NaN\n2018-07-29  0.75    NaN\n2018-07-30  0.319   NaN\n2018-07-31  0.4078  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-05-22  NaN     0.2185\n2017-05-23  NaN     0.4086\n2017-05-24  NaN     0.9669\n2017-05-25  NaN     0.9567\n2017-05-26  NaN     0.8169\n2017-05-27  NaN     0.4241\n2017-05-28  NaN     0.6602\n2017-05-29  NaN     0.8278\n2017-05-30  NaN     0.1591\n\u22ee\n2018-01-22  0.7768  0.5546\n2018-01-23  0.0094  0.6499\n2018-01-24  0.8824  0.7502\n2018-01-25  0.2884  0.604\n2018-01-26  0.3991  0.4801\n2018-01-27  0.0339  0.6845\n2018-01-28  0.4682  0.405\n2018-01-29  0.9856  0.6573\n2018-01-30  0.4395  0.6548\n2018-01-31  0.4859  0.9382", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-22  0.7136\n2017-11-23  0.7396\n2017-11-24  0.9571\n2017-11-25  0.5424\n2017-11-26  0.8331\n2017-11-27  0.8059\n2017-11-28  0.9409\n2017-11-29  0.1564\n2017-11-30  0.4879\n\u22ee\n2018-07-22  0.9524\n2018-07-23  0.4411\n2018-07-24  0.6859\n2018-07-25  0.8577\n2018-07-26  0.9348\n2018-07-27  0.0491\n2018-07-28  0.472\n2018-07-29  0.3037\n2018-07-30  0.1893\n2018-07-31  0.8237\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.8151\n2017-05-23  0.5998\n2017-05-24  0.9291\n2017-05-25  0.3525\n2017-05-26  0.9874\n2017-05-27  0.584\n2017-05-28  0.8573\n2017-05-29  0.0754\n2017-05-30  0.6862\n\u22ee\n2018-01-22  0.8915\n2018-01-23  0.4998\n2018-01-24  0.15\n2018-01-25  0.9275\n2018-01-26  0.1904\n2018-01-27  0.7403\n2018-01-28  0.1966\n2018-01-29  0.749\n2018-01-30  0.6611\n2018-01-31  0.2184\n\njulia  [x y]\nIndex       A       A\n2017-05-22  NaN     0.8151\n2017-05-23  NaN     0.5998\n2017-05-24  NaN     0.9291\n2017-05-25  NaN     0.3525\n2017-05-26  NaN     0.9874\n2017-05-27  NaN     0.584\n2017-05-28  NaN     0.8573\n2017-05-29  NaN     0.0754\n2017-05-30  NaN     0.6862\n\u22ee\n2018-07-22  0.9524  NaN\n2018-07-23  0.4411  NaN\n2018-07-24  0.6859  NaN\n2018-07-25  0.8577  NaN\n2018-07-26  0.9348  NaN\n2018-07-27  0.0491  NaN\n2018-07-28  0.472   NaN\n2018-07-29  0.3037  NaN\n2018-07-30  0.1893  NaN\n2018-07-31  0.8237  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-22  0.8742\n2017-11-23  0.0364\n2017-11-24  0.3371\n2017-11-25  0.1782\n2017-11-26  0.1302\n2017-11-27  0.6751\n2017-11-28  0.6544\n2017-11-29  0.6213\n2017-11-30  0.9\n\u22ee\n2018-07-22  0.3761\n2018-07-23  0.8433\n2018-07-24  0.7867\n2018-07-25  0.9301\n2018-07-26  0.0773\n2018-07-27  0.0888\n2018-07-28  0.3164\n2018-07-29  0.4679\n2018-07-30  0.3869\n2018-07-31  0.9524\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.2606\n2017-05-23  0.6579\n2017-05-24  0.1849\n2017-05-25  0.1072\n2017-05-26  0.8859\n2017-05-27  0.1026\n2017-05-28  0.05\n2017-05-29  0.5701\n2017-05-30  0.8854\n\u22ee\n2018-01-22  0.6754\n2018-01-23  0.4396\n2018-01-24  0.2135\n2018-01-25  0.698\n2018-01-26  0.1085\n2018-01-27  0.944\n2018-01-28  0.7097\n2018-01-29  0.848\n2018-01-30  0.8981\n2018-01-31  0.8667\n\njulia  ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-11-22  0.9353\n2017-11-23  0.915\n2017-11-24  0.4439\n2017-11-25  0.7057\n2017-11-26  0.9851\n2017-11-27  0.4422\n2017-11-28  0.8319\n2017-11-29  0.8382\n2017-11-30  0.1208\n\u22ee\n2018-07-22  0.3826\n2018-07-23  0.9154\n2018-07-24  0.8554\n2018-07-25  0.0478\n2018-07-26  0.7201\n2018-07-27  0.3504\n2018-07-28  0.0368\n2018-07-29  0.75\n2018-07-30  0.319\n2018-07-31  0.4078\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.2185\n2017-05-23  0.4086\n2017-05-24  0.9669\n2017-05-25  0.9567\n2017-05-26  0.8169\n2017-05-27  0.4241\n2017-05-28  0.6602\n2017-05-29  0.8278\n2017-05-30  0.1591\n\u22ee\n2018-01-22  0.604\n2018-01-23  0.4801\n2018-01-24  0.6845\n2018-01-25  0.405\n2018-01-26  0.6573\n2018-01-27  0.6548\n2018-01-28  0.9382\n2018-01-29  0.0166\n2018-01-30  0.1887\n2018-01-31  0.0672\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-11-22  0.9353  0.6812\n2017-11-23  0.915   0.2202\n2017-11-24  0.4439  0.597\n2017-11-25  0.7057  0.6012\n2017-11-26  0.9851  0.8388\n2017-11-27  0.4422  0.4416\n2017-11-28  0.8319  0.5964\n2017-11-29  0.8382  0.4471\n2017-11-30  0.1208  0.8629\n\u22ee\n2018-07-22  0.3826  NaN\n2018-07-23  0.9154  NaN\n2018-07-24  0.8554  NaN\n2018-07-25  0.0478  NaN\n2018-07-26  0.7201  NaN\n2018-07-27  0.3504  NaN\n2018-07-28  0.0368  NaN\n2018-07-29  0.75    NaN\n2018-07-30  0.319   NaN\n2018-07-31  0.4078  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-05-22  NaN     0.2185\n2017-05-23  NaN     0.4086\n2017-05-24  NaN     0.9669\n2017-05-25  NaN     0.9567\n2017-05-26  NaN     0.8169\n2017-05-27  NaN     0.4241\n2017-05-28  NaN     0.6602\n2017-05-29  NaN     0.8278\n2017-05-30  NaN     0.1591\n\u22ee\n2018-01-22  0.7768  0.5546\n2018-01-23  0.0094  0.6499\n2018-01-24  0.8824  0.7502\n2018-01-25  0.2884  0.604\n2018-01-26  0.3991  0.4801\n2018-01-27  0.0339  0.6845\n2018-01-28  0.4682  0.405\n2018-01-29  0.9856  0.6573\n2018-01-30  0.4395  0.6548\n2018-01-31  0.4859  0.9382", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}