{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-22  99.7522   100.3688  100.0759  98.638\n2017-11-23  101.3732  99.7607   100.9749  98.6527\n2017-11-24  101.5432  99.4081   100.3592  99.2495\n2017-11-25  100.1194  99.6871   99.9791   100.3987\n2017-11-26  99.3271   101.5653  102.4529  100.3493\n2017-11-27  101.4656  101.3816  101.3647  102.2423\n2017-11-28  100.941   101.9556  101.0077  100.7818\n2017-11-29  101.3586  102.3315  101.2848  103.1978\n2017-11-30  99.7281   101.9334  99.1472   104.3666\n\u22ee\n2018-07-22  91.501    113.6761  95.0359   92.4991\n2018-07-23  93.395    114.1763  93.5963   93.1952\n2018-07-24  93.3037   113.8208  93.0014   92.2148\n2018-07-25  93.6825   114.7185  92.6964   91.1141\n2018-07-26  92.8047   117.1969  92.3592   91.3675\n2018-07-27  93.7239   117.9619  92.516    92.9724\n2018-07-28  92.8171   118.1824  93.3468   93.0004\n2018-07-29  91.5829   116.883   93.3567   92.4199\n2018-07-30  90.9792   114.8011  93.4572   92.4181\n2018-07-31  90.8341   115.1624  92.6326   93.7552\n\njulia\n X[1]\nIndex       A        B         C         D\n2017-11-22  99.7522  100.3688  100.0759  98.638\n\njulia\n X[1, :]\nIndex       A        B         C         D\n2017-11-22  99.7522  100.3688  100.0759  98.638\n\njulia\n X[:, 1]\nIndex       A\n2017-11-22  99.7522\n2017-11-23  101.3732\n2017-11-24  101.5432\n2017-11-25  100.1194\n2017-11-26  99.3271\n2017-11-27  101.4656\n2017-11-28  100.941\n2017-11-29  101.3586\n2017-11-30  99.7281\n\u22ee\n2018-07-22  91.501\n2018-07-23  93.395\n2018-07-24  93.3037\n2018-07-25  93.6825\n2018-07-26  92.8047\n2018-07-27  93.7239\n2018-07-28  92.8171\n2018-07-29  91.5829\n2018-07-30  90.9792\n2018-07-31  90.8341\n\njulia\n X[1, 1]\nIndex       A\n2017-11-22  99.7522\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-22  99.8167   99.9909   101.595   100.0652\n2017-11-23  99.4725   101.2272  100.5701  99.932\n2017-11-24  99.6006   100.3355  101.282   100.9797\n2017-11-25  99.9593   101.7382  100.757   101.7678\n2017-11-26  100.8863  101.4868  101.9587  99.6804\n2017-11-27  100.9106  99.2394   101.4474  101.0889\n2017-11-28  102.3856  100.1505  101.4797  101.2464\n2017-11-29  102.8614  99.7654   102.069   102.0407\n2017-11-30  101.9727  100.7738  101.3789  100.7233\n\u22ee\n2018-07-22  88.4351   105.1187  99.8316   112.5258\n2018-07-23  86.7484   105.5484  98.0709   112.4259\n2018-07-24  87.8401   104.2252  98.5769   111.7336\n2018-07-25  88.4069   104.5762  99.0948   112.4363\n2018-07-26  88.5498   102.5208  99.6209   114.0532\n2018-07-27  89.784    103.3782  101.0484  114.2338\n2018-07-28  90.3241   104.1832  102.1258  114.8626\n2018-07-29  90.1197   103.7789  101.7036  116.6018\n2018-07-30  90.6069   104.8135  101.765   117.3865\n2018-07-31  91.5707   103.9873  101.1296  117.6122\n\njulia\n X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-11-22  99.8167   99.9909   101.595   100.0652\n2017-11-23  99.4725   101.2272  100.5701  99.932\n2017-11-24  99.6006   100.3355  101.282   100.9797\n2017-11-25  99.9593   101.7382  100.757   101.7678\n2017-11-26  100.8863  101.4868  101.9587  99.6804\n2017-11-27  100.9106  99.2394   101.4474  101.0889\n2017-11-28  102.3856  100.1505  101.4797  101.2464\n2017-11-29  102.8614  99.7654   102.069   102.0407\n2017-11-30  101.9727  100.7738  101.3789  100.7233\n\u22ee\n2018-07-22  88.4351   105.1187  99.8316   112.5258\n2018-07-23  86.7484   105.5484  98.0709   112.4259\n2018-07-24  87.8401   104.2252  98.5769   111.7336\n2018-07-25  88.4069   104.5762  99.0948   112.4363\n2018-07-26  88.5498   102.5208  99.6209   114.0532\n2018-07-27  89.784    103.3782  101.0484  114.2338\n2018-07-28  90.3241   104.1832  102.1258  114.8626\n2018-07-29  90.1197   103.7789  101.7036  116.6018\n2018-07-30  90.6069   104.8135  101.765   117.3865\n2018-07-31  91.5707   103.9873  101.1296  117.6122\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-23  99.4725\n2017-11-24  99.6006\n2017-11-25  99.9593\n2017-11-26  100.8863\n2017-11-27  100.9106\n2017-11-29  102.8614\n2017-11-30  101.9727\n2017-12-03  102.3505\n2017-12-07  102.7484\n\u22ee\n2018-07-13  88.3865\n2018-07-14  88.5463\n2018-07-18  88.8067\n2018-07-20  90.2323\n2018-07-21  89.7869\n2018-07-22  88.4351\n2018-07-24  87.8401\n2018-07-26  88.5498\n2018-07-29  90.1197\n2018-07-30  90.6069\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-24  99.6006\n2017-11-25  99.9593\n2017-11-29  102.8614\n2017-11-30  101.9727\n2017-12-01  101.763\n2017-12-02  102.282\n2017-12-05  100.719\n2017-12-07  102.7484\n2017-12-11  100.7153\n\u22ee\n2018-07-15  88.6905\n2018-07-17  89.0477\n2018-07-18  88.8067\n2018-07-20  90.2323\n2018-07-23  86.7484\n2018-07-24  87.8401\n2018-07-27  89.784\n2018-07-28  90.3241\n2018-07-30  90.6069\n2018-07-31  91.5707\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-22  102.3393  97.8089   99.8363   100.1909\n2017-11-23  101.5238  96.6705   99.9376   101.575\n2017-11-24  100.8728  97.5158   100.3645  100.9127\n2017-11-25  101.371   98.8716   99.5549   100.9381\n2017-11-26  103.857   97.6999   98.6706   101.9066\n2017-11-27  102.9775  97.9046   99.1638   101.8895\n2017-11-28  100.6078  96.7853   97.2145   101.3502\n2017-11-29  100.0874  96.2408   96.955    101.3124\n2017-11-30  98.9876   96.3594   97.2612   100.5959\n\u22ee\n2018-07-22  106.5303  110.6611  116.365   88.1022\n2018-07-23  107.0846  110.6506  116.0212  87.9515\n2018-07-24  105.2499  111.5951  116.0568  87.0169\n2018-07-25  104.506   111.8882  116.1972  87.1063\n2018-07-26  105.4567  110.7669  115.9824  88.2335\n2018-07-27  104.7811  108.8986  114.8227  88.0413\n2018-07-28  105.8023  108.1342  116.3859  86.1043\n2018-07-29  106.8561  109.1676  116.0347  85.2082\n2018-07-30  106.0575  110.0906  116.3954  84.6306\n2018-07-31  105.2662  109.3519  116.4769  84.6556\n\njulia\n X[1:10, :]\nIndex       A         B        C         D\n2017-11-22  102.3393  97.8089  99.8363   100.1909\n2017-11-23  101.5238  96.6705  99.9376   101.575\n2017-11-24  100.8728  97.5158  100.3645  100.9127\n2017-11-25  101.371   98.8716  99.5549   100.9381\n2017-11-26  103.857   97.6999  98.6706   101.9066\n2017-11-27  102.9775  97.9046  99.1638   101.8895\n2017-11-28  100.6078  96.7853  97.2145   101.3502\n2017-11-29  100.0874  96.2408  96.955    101.3124\n2017-11-30  98.9876   96.3594  97.2612   100.5959\n2017-12-01  98.243    96.4454  97.5049   100.1531\n\njulia\n X[end-100:end, 2:3]\nIndex       B         C\n2018-04-22  94.1219   105.2189\n2018-04-23  96.2949   106.1486\n2018-04-24  97.1775   106.9022\n2018-04-25  97.0013   107.4487\n2018-04-26  95.9606   107.1776\n2018-04-27  95.4149   107.424\n2018-04-28  96.2187   105.1659\n2018-04-29  98.8263   104.5565\n2018-04-30  97.8505   103.7012\n\u22ee\n2018-07-22  110.6611  116.365\n2018-07-23  110.6506  116.0212\n2018-07-24  111.5951  116.0568\n2018-07-25  111.8882  116.1972\n2018-07-26  110.7669  115.9824\n2018-07-27  108.8986  114.8227\n2018-07-28  108.1342  116.3859\n2018-07-29  109.1676  116.0347\n2018-07-30  110.0906  116.3954\n2018-07-31  109.3519  116.4769\n\njulia\n X[end, 2:end]\nIndex       B         C         D\n2018-07-31  109.3519  116.4769  84.6556\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-22  100.2792  99.6536   99.646    98.6239\n2017-11-23  99.116    99.983    101.0074  99.5815\n2017-11-24  98.5582   99.5456   101.3312  100.4134\n2017-11-25  96.2778   101.6216  99.9809   101.1835\n2017-11-26  97.5285   101.819   99.7577   101.2541\n2017-11-27  98.8732   99.9225   100.2662  100.8531\n2017-11-28  97.7379   100.64    100.1876  100.4895\n2017-11-29  98.4731   101.2665  100.5233  101.2031\n2017-11-30  99.485    99.9712   102.3993  102.6459\n\u22ee\n2018-07-22  89.9321   87.3942   108.0833  87.9627\n2018-07-23  88.7914   85.9177   107.9544  88.4869\n2018-07-24  86.6832   86.1707   106.5015  88.7455\n2018-07-25  87.1663   86.1821   105.9088  90.328\n2018-07-26  87.5523   86.3142   105.5033  90.8805\n2018-07-27  88.3132   86.0657   106.0675  93.1805\n2018-07-28  88.7725   86.3068   103.228   91.7117\n2018-07-29  89.6366   84.8855   103.4882  91.2716\n2018-07-30  89.6304   85.4048   103.3398  91.5719\n2018-07-31  90.1887   84.9856   103.6798  92.2065\n\njulia\n X[:, :A]\nIndex       A\n2017-11-22  100.2792\n2017-11-23  99.116\n2017-11-24  98.5582\n2017-11-25  96.2778\n2017-11-26  97.5285\n2017-11-27  98.8732\n2017-11-28  97.7379\n2017-11-29  98.4731\n2017-11-30  99.485\n\u22ee\n2018-07-22  89.9321\n2018-07-23  88.7914\n2018-07-24  86.6832\n2018-07-25  87.1663\n2018-07-26  87.5523\n2018-07-27  88.3132\n2018-07-28  88.7725\n2018-07-29  89.6366\n2018-07-30  89.6304\n2018-07-31  90.1887\n\njulia\n X[:, [:B, :D]]\nIndex       B         D\n2017-11-22  99.6536   98.6239\n2017-11-23  99.983    99.5815\n2017-11-24  99.5456   100.4134\n2017-11-25  101.6216  101.1835\n2017-11-26  101.819   101.2541\n2017-11-27  99.9225   100.8531\n2017-11-28  100.64    100.4895\n2017-11-29  101.2665  101.2031\n2017-11-30  99.9712   102.6459\n\u22ee\n2018-07-22  87.3942   87.9627\n2018-07-23  85.9177   88.4869\n2018-07-24  86.1707   88.7455\n2018-07-25  86.1821   90.328\n2018-07-26  86.3142   90.8805\n2018-07-27  86.0657   93.1805\n2018-07-28  86.3068   91.7117\n2018-07-29  84.8855   91.2716\n2018-07-30  85.4048   91.5719\n2018-07-31  84.9856   92.2065\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C         D\n2016-01-01  99.4286   99.54     101.3086  100.0753\n2016-01-02  100.8103  99.9136   103.5411  100.0703\n2016-01-03  98.8495   98.3373   103.7651  99.315\n2016-01-04  99.5256   97.1437   104.2395  99.8155\n2016-01-05  99.5072   99.7476   105.8184  99.4401\n2016-01-06  100.497   100.0642  106.5561  99.5188\n2016-01-07  99.8438   97.8973   107.6203  99.2174\n2016-01-08  100.815   98.92     107.1165  98.8547\n2016-01-09  102.0479  99.0373   106.4418  99.402\n\u22ee\n2017-12-22  91.7338   91.1319   72.2432   122.2316\n2017-12-23  92.4175   90.9847   70.733    121.1565\n2017-12-24  91.1447   90.4304   69.0839   121.7235\n2017-12-25  91.2235   89.7573   69.9875   122.1686\n2017-12-26  92.6919   88.6222   70.3032   120.947\n2017-12-27  92.9542   91.702    70.3122   120.7309\n2017-12-28  93.0123   91.8108   70.6829   121.5077\n2017-12-29  93.998    92.1375   70.1404   122.4503\n2017-12-30  94.4236   91.6214   69.258    123.2481\n2017-12-31  94.5146   91.2667   70.5488   122.7391\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A         B       C        D\n2017-07-01  105.8966  96.409  92.9173  102.0032\n\njulia\n X[\n2016\n]  # whole year\nIndex       A         B         C         D\n2016-01-01  99.4286   99.54     101.3086  100.0753\n2016-01-02  100.8103  99.9136   103.5411  100.0703\n2016-01-03  98.8495   98.3373   103.7651  99.315\n2016-01-04  99.5256   97.1437   104.2395  99.8155\n2016-01-05  99.5072   99.7476   105.8184  99.4401\n2016-01-06  100.497   100.0642  106.5561  99.5188\n2016-01-07  99.8438   97.8973   107.6203  99.2174\n2016-01-08  100.815   98.92     107.1165  98.8547\n2016-01-09  102.0479  99.0373   106.4418  99.402\n\u22ee\n2016-12-22  84.1434   92.0186   112.0423  100.9578\n2016-12-23  84.5432   91.5172   112.906   100.1875\n2016-12-24  83.5132   90.9527   112.885   101.6618\n2016-12-25  83.6358   91.7116   111.3284  101.6226\n2016-12-26  83.6607   90.7752   112.1173  101.2474\n2016-12-27  83.4531   90.0352   112.1075  99.4874\n2016-12-28  82.8157   89.6178   111.8069  100.827\n2016-12-29  81.7778   90.5928   113.1616  102.0543\n2016-12-30  81.3176   90.2822   110.2302  99.9533\n2016-12-31  80.5888   92.7632   110.6949  100.5965\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-22  99.7522   100.3688  100.0759  98.638\n2017-11-23  101.3732  99.7607   100.9749  98.6527\n2017-11-24  101.5432  99.4081   100.3592  99.2495\n2017-11-25  100.1194  99.6871   99.9791   100.3987\n2017-11-26  99.3271   101.5653  102.4529  100.3493\n2017-11-27  101.4656  101.3816  101.3647  102.2423\n2017-11-28  100.941   101.9556  101.0077  100.7818\n2017-11-29  101.3586  102.3315  101.2848  103.1978\n2017-11-30  99.7281   101.9334  99.1472   104.3666\n\u22ee\n2018-07-22  91.501    113.6761  95.0359   92.4991\n2018-07-23  93.395    114.1763  93.5963   93.1952\n2018-07-24  93.3037   113.8208  93.0014   92.2148\n2018-07-25  93.6825   114.7185  92.6964   91.1141\n2018-07-26  92.8047   117.1969  92.3592   91.3675\n2018-07-27  93.7239   117.9619  92.516    92.9724\n2018-07-28  92.8171   118.1824  93.3468   93.0004\n2018-07-29  91.5829   116.883   93.3567   92.4199\n2018-07-30  90.9792   114.8011  93.4572   92.4181\n2018-07-31  90.8341   115.1624  92.6326   93.7552\n\njulia  X[1]\nIndex       A        B         C         D\n2017-11-22  99.7522  100.3688  100.0759  98.638\n\njulia  X[1, :]\nIndex       A        B         C         D\n2017-11-22  99.7522  100.3688  100.0759  98.638\n\njulia  X[:, 1]\nIndex       A\n2017-11-22  99.7522\n2017-11-23  101.3732\n2017-11-24  101.5432\n2017-11-25  100.1194\n2017-11-26  99.3271\n2017-11-27  101.4656\n2017-11-28  100.941\n2017-11-29  101.3586\n2017-11-30  99.7281\n\u22ee\n2018-07-22  91.501\n2018-07-23  93.395\n2018-07-24  93.3037\n2018-07-25  93.6825\n2018-07-26  92.8047\n2018-07-27  93.7239\n2018-07-28  92.8171\n2018-07-29  91.5829\n2018-07-30  90.9792\n2018-07-31  90.8341\n\njulia  X[1, 1]\nIndex       A\n2017-11-22  99.7522", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-22  99.8167   99.9909   101.595   100.0652\n2017-11-23  99.4725   101.2272  100.5701  99.932\n2017-11-24  99.6006   100.3355  101.282   100.9797\n2017-11-25  99.9593   101.7382  100.757   101.7678\n2017-11-26  100.8863  101.4868  101.9587  99.6804\n2017-11-27  100.9106  99.2394   101.4474  101.0889\n2017-11-28  102.3856  100.1505  101.4797  101.2464\n2017-11-29  102.8614  99.7654   102.069   102.0407\n2017-11-30  101.9727  100.7738  101.3789  100.7233\n\u22ee\n2018-07-22  88.4351   105.1187  99.8316   112.5258\n2018-07-23  86.7484   105.5484  98.0709   112.4259\n2018-07-24  87.8401   104.2252  98.5769   111.7336\n2018-07-25  88.4069   104.5762  99.0948   112.4363\n2018-07-26  88.5498   102.5208  99.6209   114.0532\n2018-07-27  89.784    103.3782  101.0484  114.2338\n2018-07-28  90.3241   104.1832  102.1258  114.8626\n2018-07-29  90.1197   103.7789  101.7036  116.6018\n2018-07-30  90.6069   104.8135  101.765   117.3865\n2018-07-31  91.5707   103.9873  101.1296  117.6122\n\njulia  X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-11-22  99.8167   99.9909   101.595   100.0652\n2017-11-23  99.4725   101.2272  100.5701  99.932\n2017-11-24  99.6006   100.3355  101.282   100.9797\n2017-11-25  99.9593   101.7382  100.757   101.7678\n2017-11-26  100.8863  101.4868  101.9587  99.6804\n2017-11-27  100.9106  99.2394   101.4474  101.0889\n2017-11-28  102.3856  100.1505  101.4797  101.2464\n2017-11-29  102.8614  99.7654   102.069   102.0407\n2017-11-30  101.9727  100.7738  101.3789  100.7233\n\u22ee\n2018-07-22  88.4351   105.1187  99.8316   112.5258\n2018-07-23  86.7484   105.5484  98.0709   112.4259\n2018-07-24  87.8401   104.2252  98.5769   111.7336\n2018-07-25  88.4069   104.5762  99.0948   112.4363\n2018-07-26  88.5498   102.5208  99.6209   114.0532\n2018-07-27  89.784    103.3782  101.0484  114.2338\n2018-07-28  90.3241   104.1832  102.1258  114.8626\n2018-07-29  90.1197   103.7789  101.7036  116.6018\n2018-07-30  90.6069   104.8135  101.765   117.3865\n2018-07-31  91.5707   103.9873  101.1296  117.6122\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-23  99.4725\n2017-11-24  99.6006\n2017-11-25  99.9593\n2017-11-26  100.8863\n2017-11-27  100.9106\n2017-11-29  102.8614\n2017-11-30  101.9727\n2017-12-03  102.3505\n2017-12-07  102.7484\n\u22ee\n2018-07-13  88.3865\n2018-07-14  88.5463\n2018-07-18  88.8067\n2018-07-20  90.2323\n2018-07-21  89.7869\n2018-07-22  88.4351\n2018-07-24  87.8401\n2018-07-26  88.5498\n2018-07-29  90.1197\n2018-07-30  90.6069\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-24  99.6006\n2017-11-25  99.9593\n2017-11-29  102.8614\n2017-11-30  101.9727\n2017-12-01  101.763\n2017-12-02  102.282\n2017-12-05  100.719\n2017-12-07  102.7484\n2017-12-11  100.7153\n\u22ee\n2018-07-15  88.6905\n2018-07-17  89.0477\n2018-07-18  88.8067\n2018-07-20  90.2323\n2018-07-23  86.7484\n2018-07-24  87.8401\n2018-07-27  89.784\n2018-07-28  90.3241\n2018-07-30  90.6069\n2018-07-31  91.5707", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-22  102.3393  97.8089   99.8363   100.1909\n2017-11-23  101.5238  96.6705   99.9376   101.575\n2017-11-24  100.8728  97.5158   100.3645  100.9127\n2017-11-25  101.371   98.8716   99.5549   100.9381\n2017-11-26  103.857   97.6999   98.6706   101.9066\n2017-11-27  102.9775  97.9046   99.1638   101.8895\n2017-11-28  100.6078  96.7853   97.2145   101.3502\n2017-11-29  100.0874  96.2408   96.955    101.3124\n2017-11-30  98.9876   96.3594   97.2612   100.5959\n\u22ee\n2018-07-22  106.5303  110.6611  116.365   88.1022\n2018-07-23  107.0846  110.6506  116.0212  87.9515\n2018-07-24  105.2499  111.5951  116.0568  87.0169\n2018-07-25  104.506   111.8882  116.1972  87.1063\n2018-07-26  105.4567  110.7669  115.9824  88.2335\n2018-07-27  104.7811  108.8986  114.8227  88.0413\n2018-07-28  105.8023  108.1342  116.3859  86.1043\n2018-07-29  106.8561  109.1676  116.0347  85.2082\n2018-07-30  106.0575  110.0906  116.3954  84.6306\n2018-07-31  105.2662  109.3519  116.4769  84.6556\n\njulia  X[1:10, :]\nIndex       A         B        C         D\n2017-11-22  102.3393  97.8089  99.8363   100.1909\n2017-11-23  101.5238  96.6705  99.9376   101.575\n2017-11-24  100.8728  97.5158  100.3645  100.9127\n2017-11-25  101.371   98.8716  99.5549   100.9381\n2017-11-26  103.857   97.6999  98.6706   101.9066\n2017-11-27  102.9775  97.9046  99.1638   101.8895\n2017-11-28  100.6078  96.7853  97.2145   101.3502\n2017-11-29  100.0874  96.2408  96.955    101.3124\n2017-11-30  98.9876   96.3594  97.2612   100.5959\n2017-12-01  98.243    96.4454  97.5049   100.1531\n\njulia  X[end-100:end, 2:3]\nIndex       B         C\n2018-04-22  94.1219   105.2189\n2018-04-23  96.2949   106.1486\n2018-04-24  97.1775   106.9022\n2018-04-25  97.0013   107.4487\n2018-04-26  95.9606   107.1776\n2018-04-27  95.4149   107.424\n2018-04-28  96.2187   105.1659\n2018-04-29  98.8263   104.5565\n2018-04-30  97.8505   103.7012\n\u22ee\n2018-07-22  110.6611  116.365\n2018-07-23  110.6506  116.0212\n2018-07-24  111.5951  116.0568\n2018-07-25  111.8882  116.1972\n2018-07-26  110.7669  115.9824\n2018-07-27  108.8986  114.8227\n2018-07-28  108.1342  116.3859\n2018-07-29  109.1676  116.0347\n2018-07-30  110.0906  116.3954\n2018-07-31  109.3519  116.4769\n\njulia  X[end, 2:end]\nIndex       B         C         D\n2018-07-31  109.3519  116.4769  84.6556", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-22  100.2792  99.6536   99.646    98.6239\n2017-11-23  99.116    99.983    101.0074  99.5815\n2017-11-24  98.5582   99.5456   101.3312  100.4134\n2017-11-25  96.2778   101.6216  99.9809   101.1835\n2017-11-26  97.5285   101.819   99.7577   101.2541\n2017-11-27  98.8732   99.9225   100.2662  100.8531\n2017-11-28  97.7379   100.64    100.1876  100.4895\n2017-11-29  98.4731   101.2665  100.5233  101.2031\n2017-11-30  99.485    99.9712   102.3993  102.6459\n\u22ee\n2018-07-22  89.9321   87.3942   108.0833  87.9627\n2018-07-23  88.7914   85.9177   107.9544  88.4869\n2018-07-24  86.6832   86.1707   106.5015  88.7455\n2018-07-25  87.1663   86.1821   105.9088  90.328\n2018-07-26  87.5523   86.3142   105.5033  90.8805\n2018-07-27  88.3132   86.0657   106.0675  93.1805\n2018-07-28  88.7725   86.3068   103.228   91.7117\n2018-07-29  89.6366   84.8855   103.4882  91.2716\n2018-07-30  89.6304   85.4048   103.3398  91.5719\n2018-07-31  90.1887   84.9856   103.6798  92.2065\n\njulia  X[:, :A]\nIndex       A\n2017-11-22  100.2792\n2017-11-23  99.116\n2017-11-24  98.5582\n2017-11-25  96.2778\n2017-11-26  97.5285\n2017-11-27  98.8732\n2017-11-28  97.7379\n2017-11-29  98.4731\n2017-11-30  99.485\n\u22ee\n2018-07-22  89.9321\n2018-07-23  88.7914\n2018-07-24  86.6832\n2018-07-25  87.1663\n2018-07-26  87.5523\n2018-07-27  88.3132\n2018-07-28  88.7725\n2018-07-29  89.6366\n2018-07-30  89.6304\n2018-07-31  90.1887\n\njulia  X[:, [:B, :D]]\nIndex       B         D\n2017-11-22  99.6536   98.6239\n2017-11-23  99.983    99.5815\n2017-11-24  99.5456   100.4134\n2017-11-25  101.6216  101.1835\n2017-11-26  101.819   101.2541\n2017-11-27  99.9225   100.8531\n2017-11-28  100.64    100.4895\n2017-11-29  101.2665  101.2031\n2017-11-30  99.9712   102.6459\n\u22ee\n2018-07-22  87.3942   87.9627\n2018-07-23  85.9177   88.4869\n2018-07-24  86.1707   88.7455\n2018-07-25  86.1821   90.328\n2018-07-26  86.3142   90.8805\n2018-07-27  86.0657   93.1805\n2018-07-28  86.3068   91.7117\n2018-07-29  84.8855   91.2716\n2018-07-30  85.4048   91.5719\n2018-07-31  84.9856   92.2065", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C         D\n2016-01-01  99.4286   99.54     101.3086  100.0753\n2016-01-02  100.8103  99.9136   103.5411  100.0703\n2016-01-03  98.8495   98.3373   103.7651  99.315\n2016-01-04  99.5256   97.1437   104.2395  99.8155\n2016-01-05  99.5072   99.7476   105.8184  99.4401\n2016-01-06  100.497   100.0642  106.5561  99.5188\n2016-01-07  99.8438   97.8973   107.6203  99.2174\n2016-01-08  100.815   98.92     107.1165  98.8547\n2016-01-09  102.0479  99.0373   106.4418  99.402\n\u22ee\n2017-12-22  91.7338   91.1319   72.2432   122.2316\n2017-12-23  92.4175   90.9847   70.733    121.1565\n2017-12-24  91.1447   90.4304   69.0839   121.7235\n2017-12-25  91.2235   89.7573   69.9875   122.1686\n2017-12-26  92.6919   88.6222   70.3032   120.947\n2017-12-27  92.9542   91.702    70.3122   120.7309\n2017-12-28  93.0123   91.8108   70.6829   121.5077\n2017-12-29  93.998    92.1375   70.1404   122.4503\n2017-12-30  94.4236   91.6214   69.258    123.2481\n2017-12-31  94.5146   91.2667   70.5488   122.7391\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A         B       C        D\n2017-07-01  105.8966  96.409  92.9173  102.0032\n\njulia  X[ 2016 ]  # whole year\nIndex       A         B         C         D\n2016-01-01  99.4286   99.54     101.3086  100.0753\n2016-01-02  100.8103  99.9136   103.5411  100.0703\n2016-01-03  98.8495   98.3373   103.7651  99.315\n2016-01-04  99.5256   97.1437   104.2395  99.8155\n2016-01-05  99.5072   99.7476   105.8184  99.4401\n2016-01-06  100.497   100.0642  106.5561  99.5188\n2016-01-07  99.8438   97.8973   107.6203  99.2174\n2016-01-08  100.815   98.92     107.1165  98.8547\n2016-01-09  102.0479  99.0373   106.4418  99.402\n\u22ee\n2016-12-22  84.1434   92.0186   112.0423  100.9578\n2016-12-23  84.5432   91.5172   112.906   100.1875\n2016-12-24  83.5132   90.9527   112.885   101.6618\n2016-12-25  83.6358   91.7116   111.3284  101.6226\n2016-12-26  83.6607   90.7752   112.1173  101.2474\n2016-12-27  83.4531   90.0352   112.1075  99.4874\n2016-12-28  82.8157   89.6178   111.8069  100.827\n2016-12-29  81.7778   90.5928   113.1616  102.0543\n2016-12-30  81.3176   90.2822   110.2302  99.9533\n2016-12-31  80.5888   92.7632   110.6949  100.5965\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-22  0.6025\n2017-11-23  0.8619\n2017-11-24  0.4077\n2017-11-25  0.8056\n2017-11-26  0.019\n2017-11-27  0.0268\n2017-11-28  0.8702\n2017-11-29  0.2999\n2017-11-30  0.0328\n\u22ee\n2018-07-22  0.7595\n2018-07-23  0.4433\n2018-07-24  0.0748\n2018-07-25  0.296\n2018-07-26  0.359\n2018-07-27  0.7967\n2018-07-28  0.3624\n2018-07-29  0.8229\n2018-07-30  0.4858\n2018-07-31  0.6726\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.6735\n2017-05-23  0.1091\n2017-05-24  0.1196\n2017-05-25  0.6655\n2017-05-26  0.0034\n2017-05-27  0.2802\n2017-05-28  0.51\n2017-05-29  0.048\n2017-05-30  0.3454\n\u22ee\n2018-01-22  0.0005\n2018-01-23  0.6477\n2018-01-24  0.6385\n2018-01-25  0.2609\n2018-01-26  0.899\n2018-01-27  0.8159\n2018-01-28  0.9032\n2018-01-29  0.0086\n2018-01-30  0.4938\n2018-01-31  0.1021\n\njulia\n [x y]\nIndex       A       A\n2017-05-22  NaN     0.6735\n2017-05-23  NaN     0.1091\n2017-05-24  NaN     0.1196\n2017-05-25  NaN     0.6655\n2017-05-26  NaN     0.0034\n2017-05-27  NaN     0.2802\n2017-05-28  NaN     0.51\n2017-05-29  NaN     0.048\n2017-05-30  NaN     0.3454\n\u22ee\n2018-07-22  0.7595  NaN\n2018-07-23  0.4433  NaN\n2018-07-24  0.0748  NaN\n2018-07-25  0.296   NaN\n2018-07-26  0.359   NaN\n2018-07-27  0.7967  NaN\n2018-07-28  0.3624  NaN\n2018-07-29  0.8229  NaN\n2018-07-30  0.4858  NaN\n2018-07-31  0.6726  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-22  0.2863\n2017-11-23  0.0944\n2017-11-24  0.8686\n2017-11-25  0.2028\n2017-11-26  0.5798\n2017-11-27  0.1534\n2017-11-28  0.5062\n2017-11-29  0.2393\n2017-11-30  0.1206\n\u22ee\n2018-07-22  0.8767\n2018-07-23  0.3147\n2018-07-24  0.7856\n2018-07-25  0.5887\n2018-07-26  0.0068\n2018-07-27  0.4853\n2018-07-28  0.9253\n2018-07-29  0.7357\n2018-07-30  0.9655\n2018-07-31  0.0248\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.5577\n2017-05-23  0.886\n2017-05-24  0.925\n2017-05-25  0.0403\n2017-05-26  0.5872\n2017-05-27  0.035\n2017-05-28  0.913\n2017-05-29  0.897\n2017-05-30  0.0978\n\u22ee\n2018-01-22  0.401\n2018-01-23  0.0443\n2018-01-24  0.2804\n2018-01-25  0.478\n2018-01-26  0.2683\n2018-01-27  0.0927\n2018-01-28  0.1968\n2018-01-29  0.1828\n2018-01-30  0.6579\n2018-01-31  0.7326\n\njulia\n ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-22  0.8556\n2017-11-23  0.692\n2017-11-24  0.0774\n2017-11-25  0.9564\n2017-11-26  0.9264\n2017-11-27  0.4896\n2017-11-28  0.6486\n2017-11-29  0.8701\n2017-11-30  0.6039\n\u22ee\n2018-07-22  0.0822\n2018-07-23  0.5079\n2018-07-24  0.1425\n2018-07-25  0.2616\n2018-07-26  0.6317\n2018-07-27  0.4652\n2018-07-28  0.2727\n2018-07-29  0.8636\n2018-07-30  0.3776\n2018-07-31  0.9946\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.6647\n2017-05-23  0.9259\n2017-05-24  0.8209\n2017-05-25  0.6709\n2017-05-26  0.648\n2017-05-27  0.1089\n2017-05-28  0.3569\n2017-05-29  0.541\n2017-05-30  0.0106\n\u22ee\n2018-01-22  0.2586\n2018-01-23  0.5025\n2018-01-24  0.9724\n2018-01-25  0.931\n2018-01-26  0.9616\n2018-01-27  0.56\n2018-01-28  0.574\n2018-01-29  0.7745\n2018-01-30  0.8998\n2018-01-31  0.6372\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-11-22  0.8556  0.0634\n2017-11-23  0.692   0.5409\n2017-11-24  0.0774  0.5799\n2017-11-25  0.9564  0.2623\n2017-11-26  0.9264  0.7185\n2017-11-27  0.4896  0.1852\n2017-11-28  0.6486  0.9461\n2017-11-29  0.8701  0.0692\n2017-11-30  0.6039  0.1935\n\u22ee\n2018-07-22  0.0822  NaN\n2018-07-23  0.5079  NaN\n2018-07-24  0.1425  NaN\n2018-07-25  0.2616  NaN\n2018-07-26  0.6317  NaN\n2018-07-27  0.4652  NaN\n2018-07-28  0.2727  NaN\n2018-07-29  0.8636  NaN\n2018-07-30  0.3776  NaN\n2018-07-31  0.9946  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-05-22  NaN     0.6647\n2017-05-23  NaN     0.9259\n2017-05-24  NaN     0.8209\n2017-05-25  NaN     0.6709\n2017-05-26  NaN     0.648\n2017-05-27  NaN     0.1089\n2017-05-28  NaN     0.3569\n2017-05-29  NaN     0.541\n2017-05-30  NaN     0.0106\n\u22ee\n2018-01-22  0.548   0.1805\n2018-01-23  0.647   0.2302\n2018-01-24  0.9895  0.7049\n2018-01-25  0.8892  0.2586\n2018-01-26  0.9187  0.5025\n2018-01-27  0.6409  0.9724\n2018-01-28  0.7304  0.931\n2018-01-29  0.9951  0.9616\n2018-01-30  0.7142  0.56\n2018-01-31  0.5545  0.574", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-22  0.6025\n2017-11-23  0.8619\n2017-11-24  0.4077\n2017-11-25  0.8056\n2017-11-26  0.019\n2017-11-27  0.0268\n2017-11-28  0.8702\n2017-11-29  0.2999\n2017-11-30  0.0328\n\u22ee\n2018-07-22  0.7595\n2018-07-23  0.4433\n2018-07-24  0.0748\n2018-07-25  0.296\n2018-07-26  0.359\n2018-07-27  0.7967\n2018-07-28  0.3624\n2018-07-29  0.8229\n2018-07-30  0.4858\n2018-07-31  0.6726\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.6735\n2017-05-23  0.1091\n2017-05-24  0.1196\n2017-05-25  0.6655\n2017-05-26  0.0034\n2017-05-27  0.2802\n2017-05-28  0.51\n2017-05-29  0.048\n2017-05-30  0.3454\n\u22ee\n2018-01-22  0.0005\n2018-01-23  0.6477\n2018-01-24  0.6385\n2018-01-25  0.2609\n2018-01-26  0.899\n2018-01-27  0.8159\n2018-01-28  0.9032\n2018-01-29  0.0086\n2018-01-30  0.4938\n2018-01-31  0.1021\n\njulia  [x y]\nIndex       A       A\n2017-05-22  NaN     0.6735\n2017-05-23  NaN     0.1091\n2017-05-24  NaN     0.1196\n2017-05-25  NaN     0.6655\n2017-05-26  NaN     0.0034\n2017-05-27  NaN     0.2802\n2017-05-28  NaN     0.51\n2017-05-29  NaN     0.048\n2017-05-30  NaN     0.3454\n\u22ee\n2018-07-22  0.7595  NaN\n2018-07-23  0.4433  NaN\n2018-07-24  0.0748  NaN\n2018-07-25  0.296   NaN\n2018-07-26  0.359   NaN\n2018-07-27  0.7967  NaN\n2018-07-28  0.3624  NaN\n2018-07-29  0.8229  NaN\n2018-07-30  0.4858  NaN\n2018-07-31  0.6726  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-22  0.2863\n2017-11-23  0.0944\n2017-11-24  0.8686\n2017-11-25  0.2028\n2017-11-26  0.5798\n2017-11-27  0.1534\n2017-11-28  0.5062\n2017-11-29  0.2393\n2017-11-30  0.1206\n\u22ee\n2018-07-22  0.8767\n2018-07-23  0.3147\n2018-07-24  0.7856\n2018-07-25  0.5887\n2018-07-26  0.0068\n2018-07-27  0.4853\n2018-07-28  0.9253\n2018-07-29  0.7357\n2018-07-30  0.9655\n2018-07-31  0.0248\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.5577\n2017-05-23  0.886\n2017-05-24  0.925\n2017-05-25  0.0403\n2017-05-26  0.5872\n2017-05-27  0.035\n2017-05-28  0.913\n2017-05-29  0.897\n2017-05-30  0.0978\n\u22ee\n2018-01-22  0.401\n2018-01-23  0.0443\n2018-01-24  0.2804\n2018-01-25  0.478\n2018-01-26  0.2683\n2018-01-27  0.0927\n2018-01-28  0.1968\n2018-01-29  0.1828\n2018-01-30  0.6579\n2018-01-31  0.7326\n\njulia  ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-11-22  0.8556\n2017-11-23  0.692\n2017-11-24  0.0774\n2017-11-25  0.9564\n2017-11-26  0.9264\n2017-11-27  0.4896\n2017-11-28  0.6486\n2017-11-29  0.8701\n2017-11-30  0.6039\n\u22ee\n2018-07-22  0.0822\n2018-07-23  0.5079\n2018-07-24  0.1425\n2018-07-25  0.2616\n2018-07-26  0.6317\n2018-07-27  0.4652\n2018-07-28  0.2727\n2018-07-29  0.8636\n2018-07-30  0.3776\n2018-07-31  0.9946\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-22  0.6647\n2017-05-23  0.9259\n2017-05-24  0.8209\n2017-05-25  0.6709\n2017-05-26  0.648\n2017-05-27  0.1089\n2017-05-28  0.3569\n2017-05-29  0.541\n2017-05-30  0.0106\n\u22ee\n2018-01-22  0.2586\n2018-01-23  0.5025\n2018-01-24  0.9724\n2018-01-25  0.931\n2018-01-26  0.9616\n2018-01-27  0.56\n2018-01-28  0.574\n2018-01-29  0.7745\n2018-01-30  0.8998\n2018-01-31  0.6372\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-11-22  0.8556  0.0634\n2017-11-23  0.692   0.5409\n2017-11-24  0.0774  0.5799\n2017-11-25  0.9564  0.2623\n2017-11-26  0.9264  0.7185\n2017-11-27  0.4896  0.1852\n2017-11-28  0.6486  0.9461\n2017-11-29  0.8701  0.0692\n2017-11-30  0.6039  0.1935\n\u22ee\n2018-07-22  0.0822  NaN\n2018-07-23  0.5079  NaN\n2018-07-24  0.1425  NaN\n2018-07-25  0.2616  NaN\n2018-07-26  0.6317  NaN\n2018-07-27  0.4652  NaN\n2018-07-28  0.2727  NaN\n2018-07-29  0.8636  NaN\n2018-07-30  0.3776  NaN\n2018-07-31  0.9946  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-05-22  NaN     0.6647\n2017-05-23  NaN     0.9259\n2017-05-24  NaN     0.8209\n2017-05-25  NaN     0.6709\n2017-05-26  NaN     0.648\n2017-05-27  NaN     0.1089\n2017-05-28  NaN     0.3569\n2017-05-29  NaN     0.541\n2017-05-30  NaN     0.0106\n\u22ee\n2018-01-22  0.548   0.1805\n2018-01-23  0.647   0.2302\n2018-01-24  0.9895  0.7049\n2018-01-25  0.8892  0.2586\n2018-01-26  0.9187  0.5025\n2018-01-27  0.6409  0.9724\n2018-01-28  0.7304  0.931\n2018-01-29  0.9951  0.9616\n2018-01-30  0.7142  0.56\n2018-01-31  0.5545  0.574", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}