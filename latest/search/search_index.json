{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Numerical Indexing\n\n\n\n\nInteger\n\n\n\n\nBoolean\n\n\n\n\nArrays \n Ranges\n\n\n\n\nSymbol Indexing\n\n\n\n\nString Indexing", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.2105\n2017-07-13  0.4858\n2017-07-14  0.1247\n2017-07-15  0.6333\n2017-07-16  0.9352\n2017-07-17  0.0092\n2017-07-18  0.403\n2017-07-19  0.5851\n2017-07-20  0.9555\n\u22ee\n2018-03-11  0.3461\n2018-03-12  0.9158\n2018-03-13  0.9987\n2018-03-14  0.8297\n2018-03-15  0.0987\n2018-03-16  0.2872\n2018-03-17  0.7369\n2018-03-18  0.7306\n2018-03-19  0.0435\n2018-03-20  0.9174\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.6045\n2017-01-13  0.7326\n2017-01-14  0.9694\n2017-01-15  0.5227\n2017-01-16  0.0558\n2017-01-17  0.1407\n2017-01-18  0.1261\n2017-01-19  0.6354\n2017-01-20  0.3888\n\u22ee\n2017-09-11  0.4046\n2017-09-12  0.425\n2017-09-13  0.7674\n2017-09-14  0.5549\n2017-09-15  0.6311\n2017-09-16  0.7566\n2017-09-17  0.2328\n2017-09-18  0.4984\n2017-09-19  0.2374\n2017-09-20  0.9386\n\njulia\n [x y]\nIndex       A       A\n2017-01-12  NaN     0.6045\n2017-01-13  NaN     0.7326\n2017-01-14  NaN     0.9694\n2017-01-15  NaN     0.5227\n2017-01-16  NaN     0.0558\n2017-01-17  NaN     0.1407\n2017-01-18  NaN     0.1261\n2017-01-19  NaN     0.6354\n2017-01-20  NaN     0.3888\n\u22ee\n2018-03-11  0.3461  NaN\n2018-03-12  0.9158  NaN\n2018-03-13  0.9987  NaN\n2018-03-14  0.8297  NaN\n2018-03-15  0.0987  NaN\n2018-03-16  0.2872  NaN\n2018-03-17  0.7369  NaN\n2018-03-18  0.7306  NaN\n2018-03-19  0.0435  NaN\n2018-03-20  0.9174  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.7002\n2017-07-13  0.3482\n2017-07-14  0.1532\n2017-07-15  0.8468\n2017-07-16  0.1198\n2017-07-17  0.4594\n2017-07-18  0.4677\n2017-07-19  0.7225\n2017-07-20  0.5085\n\u22ee\n2018-03-11  0.0907\n2018-03-12  0.4593\n2018-03-13  0.3162\n2018-03-14  0.3452\n2018-03-15  0.3025\n2018-03-16  0.7212\n2018-03-17  0.7924\n2018-03-18  0.8464\n2018-03-19  0.8607\n2018-03-20  0.4486\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.4072\n2017-01-13  0.2169\n2017-01-14  0.7445\n2017-01-15  0.8955\n2017-01-16  0.529\n2017-01-17  0.3106\n2017-01-18  0.9182\n2017-01-19  0.084\n2017-01-20  0.1928\n\u22ee\n2017-09-11  0.5504\n2017-09-12  0.4851\n2017-09-13  0.0241\n2017-09-14  0.9147\n2017-09-15  0.0254\n2017-09-16  0.6972\n2017-09-17  0.219\n2017-09-18  0.9206\n2017-09-19  0.3357\n2017-09-20  0.4855\n\njulia\n ijoin(x, y)\nIndex       A       A\n2017-07-12  0.7002  0.0433\n2017-07-13  0.3482  0.8536\n2017-07-14  0.1532  0.7765\n2017-07-15  0.8468  0.3989\n2017-07-16  0.1198  0.0427\n2017-07-17  0.4594  0.7534\n2017-07-18  0.4677  0.3851\n2017-07-19  0.7225  0.8865\n2017-07-20  0.5085  0.6727\n\u22ee\n2017-09-11  0.5791  0.5504\n2017-09-12  0.798   0.4851\n2017-09-13  0.2755  0.0241\n2017-09-14  0.7549  0.9147\n2017-09-15  0.6797  0.0254\n2017-09-16  0.282   0.6972\n2017-09-17  0.3216  0.219\n2017-09-18  0.1082  0.9206\n2017-09-19  0.1582  0.3357\n2017-09-20  0.2471  0.4855\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.6473\n2017-07-13  0.9016\n2017-07-14  0.237\n2017-07-15  0.6695\n2017-07-16  0.0949\n2017-07-17  0.3065\n2017-07-18  0.2468\n2017-07-19  0.3337\n2017-07-20  0.0667\n\u22ee\n2018-03-11  0.5905\n2018-03-12  0.354\n2018-03-13  0.6681\n2018-03-14  0.8537\n2018-03-15  0.914\n2018-03-16  0.3426\n2018-03-17  0.6938\n2018-03-18  0.7575\n2018-03-19  0.1154\n2018-03-20  0.0632\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.0136\n2017-01-13  0.8387\n2017-01-14  0.7737\n2017-01-15  0.2043\n2017-01-16  0.744\n2017-01-17  0.329\n2017-01-18  0.955\n2017-01-19  0.3141\n2017-01-20  0.1532\n\u22ee\n2017-09-11  0.3638\n2017-09-12  0.8926\n2017-09-13  0.1119\n2017-09-14  0.0142\n2017-09-15  0.0863\n2017-09-16  0.3758\n2017-09-17  0.0574\n2017-09-18  0.2658\n2017-09-19  0.5668\n2017-09-20  0.8448\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-07-12  0.6473  0.5004\n2017-07-13  0.9016  0.4468\n2017-07-14  0.237   0.7632\n2017-07-15  0.6695  0.6822\n2017-07-16  0.0949  0.4768\n2017-07-17  0.3065  0.328\n2017-07-18  0.2468  0.1813\n2017-07-19  0.3337  0.2375\n2017-07-20  0.0667  0.1439\n\u22ee\n2018-03-11  0.5905  NaN\n2018-03-12  0.354   NaN\n2018-03-13  0.6681  NaN\n2018-03-14  0.8537  NaN\n2018-03-15  0.914   NaN\n2018-03-16  0.3426  NaN\n2018-03-17  0.6938  NaN\n2018-03-18  0.7575  NaN\n2018-03-19  0.1154  NaN\n2018-03-20  0.0632  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-01-12  NaN     0.0136\n2017-01-13  NaN     0.8387\n2017-01-14  NaN     0.7737\n2017-01-15  NaN     0.2043\n2017-01-16  NaN     0.744\n2017-01-17  NaN     0.329\n2017-01-18  NaN     0.955\n2017-01-19  NaN     0.3141\n2017-01-20  NaN     0.1532\n\u22ee\n2017-09-11  0.5057  0.4569\n2017-09-12  0.8862  0.9809\n2017-09-13  0.6044  0.7867\n2017-09-14  0.461   0.3368\n2017-09-15  0.3445  0.6934\n2017-09-16  0.6198  0.3638\n2017-09-17  0.1754  0.8926\n2017-09-18  0.712   0.1119\n2017-09-19  0.1309  0.0142\n2017-09-20  0.8362  0.0863", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.2105\n2017-07-13  0.4858\n2017-07-14  0.1247\n2017-07-15  0.6333\n2017-07-16  0.9352\n2017-07-17  0.0092\n2017-07-18  0.403\n2017-07-19  0.5851\n2017-07-20  0.9555\n\u22ee\n2018-03-11  0.3461\n2018-03-12  0.9158\n2018-03-13  0.9987\n2018-03-14  0.8297\n2018-03-15  0.0987\n2018-03-16  0.2872\n2018-03-17  0.7369\n2018-03-18  0.7306\n2018-03-19  0.0435\n2018-03-20  0.9174\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.6045\n2017-01-13  0.7326\n2017-01-14  0.9694\n2017-01-15  0.5227\n2017-01-16  0.0558\n2017-01-17  0.1407\n2017-01-18  0.1261\n2017-01-19  0.6354\n2017-01-20  0.3888\n\u22ee\n2017-09-11  0.4046\n2017-09-12  0.425\n2017-09-13  0.7674\n2017-09-14  0.5549\n2017-09-15  0.6311\n2017-09-16  0.7566\n2017-09-17  0.2328\n2017-09-18  0.4984\n2017-09-19  0.2374\n2017-09-20  0.9386\n\njulia  [x y]\nIndex       A       A\n2017-01-12  NaN     0.6045\n2017-01-13  NaN     0.7326\n2017-01-14  NaN     0.9694\n2017-01-15  NaN     0.5227\n2017-01-16  NaN     0.0558\n2017-01-17  NaN     0.1407\n2017-01-18  NaN     0.1261\n2017-01-19  NaN     0.6354\n2017-01-20  NaN     0.3888\n\u22ee\n2018-03-11  0.3461  NaN\n2018-03-12  0.9158  NaN\n2018-03-13  0.9987  NaN\n2018-03-14  0.8297  NaN\n2018-03-15  0.0987  NaN\n2018-03-16  0.2872  NaN\n2018-03-17  0.7369  NaN\n2018-03-18  0.7306  NaN\n2018-03-19  0.0435  NaN\n2018-03-20  0.9174  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.7002\n2017-07-13  0.3482\n2017-07-14  0.1532\n2017-07-15  0.8468\n2017-07-16  0.1198\n2017-07-17  0.4594\n2017-07-18  0.4677\n2017-07-19  0.7225\n2017-07-20  0.5085\n\u22ee\n2018-03-11  0.0907\n2018-03-12  0.4593\n2018-03-13  0.3162\n2018-03-14  0.3452\n2018-03-15  0.3025\n2018-03-16  0.7212\n2018-03-17  0.7924\n2018-03-18  0.8464\n2018-03-19  0.8607\n2018-03-20  0.4486\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.4072\n2017-01-13  0.2169\n2017-01-14  0.7445\n2017-01-15  0.8955\n2017-01-16  0.529\n2017-01-17  0.3106\n2017-01-18  0.9182\n2017-01-19  0.084\n2017-01-20  0.1928\n\u22ee\n2017-09-11  0.5504\n2017-09-12  0.4851\n2017-09-13  0.0241\n2017-09-14  0.9147\n2017-09-15  0.0254\n2017-09-16  0.6972\n2017-09-17  0.219\n2017-09-18  0.9206\n2017-09-19  0.3357\n2017-09-20  0.4855\n\njulia  ijoin(x, y)\nIndex       A       A\n2017-07-12  0.7002  0.0433\n2017-07-13  0.3482  0.8536\n2017-07-14  0.1532  0.7765\n2017-07-15  0.8468  0.3989\n2017-07-16  0.1198  0.0427\n2017-07-17  0.4594  0.7534\n2017-07-18  0.4677  0.3851\n2017-07-19  0.7225  0.8865\n2017-07-20  0.5085  0.6727\n\u22ee\n2017-09-11  0.5791  0.5504\n2017-09-12  0.798   0.4851\n2017-09-13  0.2755  0.0241\n2017-09-14  0.7549  0.9147\n2017-09-15  0.6797  0.0254\n2017-09-16  0.282   0.6972\n2017-09-17  0.3216  0.219\n2017-09-18  0.1082  0.9206\n2017-09-19  0.1582  0.3357\n2017-09-20  0.2471  0.4855", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.6473\n2017-07-13  0.9016\n2017-07-14  0.237\n2017-07-15  0.6695\n2017-07-16  0.0949\n2017-07-17  0.3065\n2017-07-18  0.2468\n2017-07-19  0.3337\n2017-07-20  0.0667\n\u22ee\n2018-03-11  0.5905\n2018-03-12  0.354\n2018-03-13  0.6681\n2018-03-14  0.8537\n2018-03-15  0.914\n2018-03-16  0.3426\n2018-03-17  0.6938\n2018-03-18  0.7575\n2018-03-19  0.1154\n2018-03-20  0.0632\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.0136\n2017-01-13  0.8387\n2017-01-14  0.7737\n2017-01-15  0.2043\n2017-01-16  0.744\n2017-01-17  0.329\n2017-01-18  0.955\n2017-01-19  0.3141\n2017-01-20  0.1532\n\u22ee\n2017-09-11  0.3638\n2017-09-12  0.8926\n2017-09-13  0.1119\n2017-09-14  0.0142\n2017-09-15  0.0863\n2017-09-16  0.3758\n2017-09-17  0.0574\n2017-09-18  0.2658\n2017-09-19  0.5668\n2017-09-20  0.8448\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-07-12  0.6473  0.5004\n2017-07-13  0.9016  0.4468\n2017-07-14  0.237   0.7632\n2017-07-15  0.6695  0.6822\n2017-07-16  0.0949  0.4768\n2017-07-17  0.3065  0.328\n2017-07-18  0.2468  0.1813\n2017-07-19  0.3337  0.2375\n2017-07-20  0.0667  0.1439\n\u22ee\n2018-03-11  0.5905  NaN\n2018-03-12  0.354   NaN\n2018-03-13  0.6681  NaN\n2018-03-14  0.8537  NaN\n2018-03-15  0.914   NaN\n2018-03-16  0.3426  NaN\n2018-03-17  0.6938  NaN\n2018-03-18  0.7575  NaN\n2018-03-19  0.1154  NaN\n2018-03-20  0.0632  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-01-12  NaN     0.0136\n2017-01-13  NaN     0.8387\n2017-01-14  NaN     0.7737\n2017-01-15  NaN     0.2043\n2017-01-16  NaN     0.744\n2017-01-17  NaN     0.329\n2017-01-18  NaN     0.955\n2017-01-19  NaN     0.3141\n2017-01-20  NaN     0.1532\n\u22ee\n2017-09-11  0.5057  0.4569\n2017-09-12  0.8862  0.9809\n2017-09-13  0.6044  0.7867\n2017-09-14  0.461   0.3368\n2017-09-15  0.3445  0.6934\n2017-09-16  0.6198  0.3638\n2017-09-17  0.1754  0.8926\n2017-09-18  0.712   0.1119\n2017-09-19  0.1309  0.0142\n2017-09-20  0.8362  0.0863", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}