{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-10-27  100.5124  98.7877   99.9838   100.1103\n2017-10-28  100.9551  99.5541   100.8824  99.5385\n2017-10-29  101.4558  101.0901  100.0646  100.1552\n2017-10-30  102.2291  101.4927  99.6969   100.7299\n2017-10-31  103.0816  102.2554  100.0857  100.8225\n2017-11-01  102.2917  101.941   99.4575   100.4312\n2017-11-02  100.9313  102.0877  100.7192  100.3487\n2017-11-03  99.8117   102.1115  102.1708  99.155\n2017-11-04  100.1969  101.3026  101.9505  99.2625\n\u22ee\n2018-06-26  73.7736   114.5892  103.7465  83.054\n2018-06-27  73.6944   116.1978  103.6779  82.8941\n2018-06-28  75.0948   116.297   102.2492  83.2693\n2018-06-29  76.7547   116.7043  101.387   82.803\n2018-06-30  74.5157   116.8124  98.9428   81.8611\n2018-07-01  75.6677   117.8303  98.9384   81.8026\n2018-07-02  77.6638   116.111   98.5672   82.0371\n2018-07-03  78.702    116.9097  99.0013   82.1822\n2018-07-04  79.8296   116.0764  98.2477   81.2799\n2018-07-05  77.9583   115.9348  98.9959   81.7269\n\njulia\n X[1]\nIndex       A         B        C        D\n2017-10-27  100.5124  98.7877  99.9838  100.1103\n\njulia\n X[1, :]\nIndex       A         B        C        D\n2017-10-27  100.5124  98.7877  99.9838  100.1103\n\njulia\n X[:, 1]\nIndex       A\n2017-10-27  100.5124\n2017-10-28  100.9551\n2017-10-29  101.4558\n2017-10-30  102.2291\n2017-10-31  103.0816\n2017-11-01  102.2917\n2017-11-02  100.9313\n2017-11-03  99.8117\n2017-11-04  100.1969\n\u22ee\n2018-06-26  73.7736\n2018-06-27  73.6944\n2018-06-28  75.0948\n2018-06-29  76.7547\n2018-06-30  74.5157\n2018-07-01  75.6677\n2018-07-02  77.6638\n2018-07-03  78.702\n2018-07-04  79.8296\n2018-07-05  77.9583\n\njulia\n X[1, 1]\nIndex       A\n2017-10-27  100.5124\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-10-27  100.7271  100.1547  100.3305  99.8073\n2017-10-28  100.7774  99.818    100.0749  101.7133\n2017-10-29  100.0278  100.9644  101.6917  101.2979\n2017-10-30  102.0467  102.6935  99.9903   101.2106\n2017-10-31  104.1101  103.7989  99.7684   101.7517\n2017-11-01  104.0448  102.2426  101.0447  101.6297\n2017-11-02  104.8906  101.7607  102.495   101.3497\n2017-11-03  105.3787  102.0203  102.5082  100.4127\n2017-11-04  104.7175  102.3767  101.1828  100.2497\n\u22ee\n2018-06-26  77.5594   65.6504   103.1046  101.8513\n2018-06-27  77.3251   67.1018   103.9124  102.6941\n2018-06-28  77.2808   66.997    103.9272  102.3287\n2018-06-29  76.6683   68.4617   105.0491  101.0824\n2018-06-30  76.5854   67.9367   103.2967  100.581\n2018-07-01  76.5081   65.4194   103.4564  100.4419\n2018-07-02  76.8498   65.9005   102.3086  100.7811\n2018-07-03  78.0611   64.7708   103.3932  101.1851\n2018-07-04  78.2615   63.0758   102.9887  99.522\n2018-07-05  77.1773   63.8096   101.4222  98.8891\n\njulia\n X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-10-27  100.7271  100.1547  100.3305  99.8073\n2017-10-28  100.7774  99.818    100.0749  101.7133\n2017-10-29  100.0278  100.9644  101.6917  101.2979\n2017-10-30  102.0467  102.6935  99.9903   101.2106\n2017-10-31  104.1101  103.7989  99.7684   101.7517\n2017-11-01  104.0448  102.2426  101.0447  101.6297\n2017-11-02  104.8906  101.7607  102.495   101.3497\n2017-11-03  105.3787  102.0203  102.5082  100.4127\n2017-11-04  104.7175  102.3767  101.1828  100.2497\n\u22ee\n2018-06-26  77.5594   65.6504   103.1046  101.8513\n2018-06-27  77.3251   67.1018   103.9124  102.6941\n2018-06-28  77.2808   66.997    103.9272  102.3287\n2018-06-29  76.6683   68.4617   105.0491  101.0824\n2018-06-30  76.5854   67.9367   103.2967  100.581\n2018-07-01  76.5081   65.4194   103.4564  100.4419\n2018-07-02  76.8498   65.9005   102.3086  100.7811\n2018-07-03  78.0611   64.7708   103.3932  101.1851\n2018-07-04  78.2615   63.0758   102.9887  99.522\n2018-07-05  77.1773   63.8096   101.4222  98.8891\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-10-27  100.7271\n2017-10-28  100.7774\n2017-10-29  100.0278\n2017-10-30  102.0467\n2017-10-31  104.1101\n2017-11-02  104.8906\n2017-11-03  105.3787\n2017-11-05  104.1487\n2017-11-06  105.5838\n\u22ee\n2018-06-19  75.2854\n2018-06-21  75.7909\n2018-06-23  77.0734\n2018-06-24  75.6646\n2018-06-26  77.5594\n2018-06-28  77.2808\n2018-07-01  76.5081\n2018-07-02  76.8498\n2018-07-03  78.0611\n2018-07-05  77.1773\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-10-30  102.0467\n2017-10-31  104.1101\n2017-11-01  104.0448\n2017-11-02  104.8906\n2017-11-06  105.5838\n2017-11-07  104.5626\n2017-11-09  105.2129\n2017-11-11  105.0467\n2017-11-12  103.5615\n\u22ee\n2018-06-12  78.9965\n2018-06-19  75.2854\n2018-06-21  75.7909\n2018-06-22  75.2108\n2018-06-26  77.5594\n2018-06-27  77.3251\n2018-06-28  77.2808\n2018-06-30  76.5854\n2018-07-01  76.5081\n2018-07-02  76.8498\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A        B         C         D\n2017-10-27  98.266   100.7355  100.9619  99.9662\n2017-10-28  98.8282  101.5145  102.0894  98.5245\n2017-10-29  98.4679  100.5188  100.9978  99.4547\n2017-10-30  98.4249  101.0996  100.6118  100.9462\n2017-10-31  98.969   99.9874   99.6333   102.3324\n2017-11-01  98.8649  98.9333   100.8333  102.3884\n2017-11-02  99.3114  99.3124   101.8445  101.9971\n2017-11-03  99.1584  99.3814   104.482   101.9696\n2017-11-04  99.9094  100.9522  104.2641  101.1787\n\u22ee\n2018-06-26  86.3621  102.2896  71.5618   138.6803\n2018-06-27  85.0069  102.7134  69.9283   139.32\n2018-06-28  84.7379  100.8113  69.6801   141.2385\n2018-06-29  83.694   99.7704   70.4966   140.8142\n2018-06-30  81.7143  100.0251  70.2357   140.6864\n2018-07-01  80.781   98.4347   70.3954   142.7838\n2018-07-02  79.9308  97.4743   70.3567   142.3359\n2018-07-03  79.4216  98.6511   70.0186   144.769\n2018-07-04  78.8041  96.4941   69.637    146.0885\n2018-07-05  78.5271  96.2898   69.183    145.8067\n\njulia\n X[1:10, :]\nIndex       A        B         C         D\n2017-10-27  98.266   100.7355  100.9619  99.9662\n2017-10-28  98.8282  101.5145  102.0894  98.5245\n2017-10-29  98.4679  100.5188  100.9978  99.4547\n2017-10-30  98.4249  101.0996  100.6118  100.9462\n2017-10-31  98.969   99.9874   99.6333   102.3324\n2017-11-01  98.8649  98.9333   100.8333  102.3884\n2017-11-02  99.3114  99.3124   101.8445  101.9971\n2017-11-03  99.1584  99.3814   104.482   101.9696\n2017-11-04  99.9094  100.9522  104.2641  101.1787\n2017-11-05  98.1138  100.1082  103.0088  100.2428\n\njulia\n X[end-100:end, 2:3]\nIndex       B         C\n2018-03-27  90.7624   82.7207\n2018-03-28  90.7852   82.074\n2018-03-29  90.8486   81.9159\n2018-03-30  89.9329   82.0996\n2018-03-31  90.0328   81.9861\n2018-04-01  90.2153   83.2726\n2018-04-02  91.0218   82.492\n2018-04-03  92.3275   83.4487\n2018-04-04  90.61     83.5825\n\u22ee\n2018-06-26  102.2896  71.5618\n2018-06-27  102.7134  69.9283\n2018-06-28  100.8113  69.6801\n2018-06-29  99.7704   70.4966\n2018-06-30  100.0251  70.2357\n2018-07-01  98.4347   70.3954\n2018-07-02  97.4743   70.3567\n2018-07-03  98.6511   70.0186\n2018-07-04  96.4941   69.637\n2018-07-05  96.2898   69.183\n\njulia\n X[end, 2:end]\nIndex       B        C       D\n2018-07-05  96.2898  69.183  145.8067\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-10-27  100.5571  98.8894   99.856    100.9851\n2017-10-28  99.2922   99.0121   99.4385   101.2706\n2017-10-29  98.5579   98.1211   99.9176   99.2884\n2017-10-30  97.7113   99.8812   98.5444   101.2185\n2017-10-31  98.1755   100.1314  100.5332  101.7055\n2017-11-01  97.3235   102.5866  100.5388  101.0165\n2017-11-02  99.235    101.7576  100.2122  101.4308\n2017-11-03  98.4315   101.4528  100.2432  101.4033\n2017-11-04  98.8775   99.207    101.5941  100.2311\n\u22ee\n2018-06-26  103.539   71.1706   98.9948   95.5689\n2018-06-27  102.8463  72.2402   98.7235   96.8232\n2018-06-28  102.8109  72.5658   98.7215   99.1331\n2018-06-29  102.4959  72.9195   98.1566   98.3888\n2018-06-30  101.8475  71.4505   98.5702   97.8802\n2018-07-01  100.1803  70.4309   97.5472   95.4267\n2018-07-02  100.5639  71.1802   98.1345   94.0874\n2018-07-03  101.3896  68.5053   100.2293  94.9088\n2018-07-04  101.3382  69.2007   102.0558  96.4653\n2018-07-05  102.254   69.3783   103.4267  94.3321\n\njulia\n X[:, :A]\nIndex       A\n2017-10-27  100.5571\n2017-10-28  99.2922\n2017-10-29  98.5579\n2017-10-30  97.7113\n2017-10-31  98.1755\n2017-11-01  97.3235\n2017-11-02  99.235\n2017-11-03  98.4315\n2017-11-04  98.8775\n\u22ee\n2018-06-26  103.539\n2018-06-27  102.8463\n2018-06-28  102.8109\n2018-06-29  102.4959\n2018-06-30  101.8475\n2018-07-01  100.1803\n2018-07-02  100.5639\n2018-07-03  101.3896\n2018-07-04  101.3382\n2018-07-05  102.254\n\njulia\n X[:, [:B, :D]]\nIndex       B         D\n2017-10-27  98.8894   100.9851\n2017-10-28  99.0121   101.2706\n2017-10-29  98.1211   99.2884\n2017-10-30  99.8812   101.2185\n2017-10-31  100.1314  101.7055\n2017-11-01  102.5866  101.0165\n2017-11-02  101.7576  101.4308\n2017-11-03  101.4528  101.4033\n2017-11-04  99.207    100.2311\n\u22ee\n2018-06-26  71.1706   95.5689\n2018-06-27  72.2402   96.8232\n2018-06-28  72.5658   99.1331\n2018-06-29  72.9195   98.3888\n2018-06-30  71.4505   97.8802\n2018-07-01  70.4309   95.4267\n2018-07-02  71.1802   94.0874\n2018-07-03  68.5053   94.9088\n2018-07-04  69.2007   96.4653\n2018-07-05  69.3783   94.3321\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C        D\n2016-01-01  100.4251  100.0569  98.4731  100.1542\n2016-01-02  101.6844  99.717    99.1902  101.1325\n2016-01-03  101.5268  99.0933   97.3451  102.0317\n2016-01-04  102.4331  98.6774   96.3964  102.007\n2016-01-05  101.4945  97.5991   97.036   100.7309\n2016-01-06  100.9888  96.1881   98.086   99.5214\n2016-01-07  100.5925  95.6669   98.8814  99.0206\n2016-01-08  100.2509  95.1511   96.9572  98.7705\n2016-01-09  100.5467  93.5968   98.9118  98.427\n\u22ee\n2017-12-22  81.411    77.5838   85.8422  59.3189\n2017-12-23  80.8272   76.1676   86.4596  60.4535\n2017-12-24  80.7596   74.9037   87.1937  58.9017\n2017-12-25  78.5796   75.5778   87.6857  59.1929\n2017-12-26  79.6338   75.6797   88.9347  59.7434\n2017-12-27  79.9145   74.3171   89.6236  57.4851\n2017-12-28  80.1537   75.7312   89.204   58.7467\n2017-12-29  80.0908   74.9189   92.3226  61.0696\n2017-12-30  80.6868   76.9768   92.9266  59.66\n2017-12-31  81.6242   74.9387   94.3958  59.3929\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A         B        C        D\n2017-07-01  103.2533  89.5077  85.9572  72.1224\n\njulia\n X[\n2016\n]  # whole year\nIndex       A         B         C        D\n2016-01-01  100.4251  100.0569  98.4731  100.1542\n2016-01-02  101.6844  99.717    99.1902  101.1325\n2016-01-03  101.5268  99.0933   97.3451  102.0317\n2016-01-04  102.4331  98.6774   96.3964  102.007\n2016-01-05  101.4945  97.5991   97.036   100.7309\n2016-01-06  100.9888  96.1881   98.086   99.5214\n2016-01-07  100.5925  95.6669   98.8814  99.0206\n2016-01-08  100.2509  95.1511   96.9572  98.7705\n2016-01-09  100.5467  93.5968   98.9118  98.427\n\u22ee\n2016-12-22  101.7792  96.3559   91.0176  70.4339\n2016-12-23  101.353   96.3635   89.5435  69.9247\n2016-12-24  103.0534  95.7456   89.4024  70.0777\n2016-12-25  103.8342  94.9589   89.8232  69.7494\n2016-12-26  104.523   93.3273   90.0466  70.0339\n2016-12-27  104.8103  92.9913   92.1371  68.2946\n2016-12-28  105.7144  94.566    92.2292  69.834\n2016-12-29  106.8926  93.2348   93.2272  67.161\n2016-12-30  107.3723  93.3324   92.8809  66.0723\n2016-12-31  106.8979  92.6086   92.7379  65.4422\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-10-27  100.5124  98.7877   99.9838   100.1103\n2017-10-28  100.9551  99.5541   100.8824  99.5385\n2017-10-29  101.4558  101.0901  100.0646  100.1552\n2017-10-30  102.2291  101.4927  99.6969   100.7299\n2017-10-31  103.0816  102.2554  100.0857  100.8225\n2017-11-01  102.2917  101.941   99.4575   100.4312\n2017-11-02  100.9313  102.0877  100.7192  100.3487\n2017-11-03  99.8117   102.1115  102.1708  99.155\n2017-11-04  100.1969  101.3026  101.9505  99.2625\n\u22ee\n2018-06-26  73.7736   114.5892  103.7465  83.054\n2018-06-27  73.6944   116.1978  103.6779  82.8941\n2018-06-28  75.0948   116.297   102.2492  83.2693\n2018-06-29  76.7547   116.7043  101.387   82.803\n2018-06-30  74.5157   116.8124  98.9428   81.8611\n2018-07-01  75.6677   117.8303  98.9384   81.8026\n2018-07-02  77.6638   116.111   98.5672   82.0371\n2018-07-03  78.702    116.9097  99.0013   82.1822\n2018-07-04  79.8296   116.0764  98.2477   81.2799\n2018-07-05  77.9583   115.9348  98.9959   81.7269\n\njulia  X[1]\nIndex       A         B        C        D\n2017-10-27  100.5124  98.7877  99.9838  100.1103\n\njulia  X[1, :]\nIndex       A         B        C        D\n2017-10-27  100.5124  98.7877  99.9838  100.1103\n\njulia  X[:, 1]\nIndex       A\n2017-10-27  100.5124\n2017-10-28  100.9551\n2017-10-29  101.4558\n2017-10-30  102.2291\n2017-10-31  103.0816\n2017-11-01  102.2917\n2017-11-02  100.9313\n2017-11-03  99.8117\n2017-11-04  100.1969\n\u22ee\n2018-06-26  73.7736\n2018-06-27  73.6944\n2018-06-28  75.0948\n2018-06-29  76.7547\n2018-06-30  74.5157\n2018-07-01  75.6677\n2018-07-02  77.6638\n2018-07-03  78.702\n2018-07-04  79.8296\n2018-07-05  77.9583\n\njulia  X[1, 1]\nIndex       A\n2017-10-27  100.5124", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-10-27  100.7271  100.1547  100.3305  99.8073\n2017-10-28  100.7774  99.818    100.0749  101.7133\n2017-10-29  100.0278  100.9644  101.6917  101.2979\n2017-10-30  102.0467  102.6935  99.9903   101.2106\n2017-10-31  104.1101  103.7989  99.7684   101.7517\n2017-11-01  104.0448  102.2426  101.0447  101.6297\n2017-11-02  104.8906  101.7607  102.495   101.3497\n2017-11-03  105.3787  102.0203  102.5082  100.4127\n2017-11-04  104.7175  102.3767  101.1828  100.2497\n\u22ee\n2018-06-26  77.5594   65.6504   103.1046  101.8513\n2018-06-27  77.3251   67.1018   103.9124  102.6941\n2018-06-28  77.2808   66.997    103.9272  102.3287\n2018-06-29  76.6683   68.4617   105.0491  101.0824\n2018-06-30  76.5854   67.9367   103.2967  100.581\n2018-07-01  76.5081   65.4194   103.4564  100.4419\n2018-07-02  76.8498   65.9005   102.3086  100.7811\n2018-07-03  78.0611   64.7708   103.3932  101.1851\n2018-07-04  78.2615   63.0758   102.9887  99.522\n2018-07-05  77.1773   63.8096   101.4222  98.8891\n\njulia  X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-10-27  100.7271  100.1547  100.3305  99.8073\n2017-10-28  100.7774  99.818    100.0749  101.7133\n2017-10-29  100.0278  100.9644  101.6917  101.2979\n2017-10-30  102.0467  102.6935  99.9903   101.2106\n2017-10-31  104.1101  103.7989  99.7684   101.7517\n2017-11-01  104.0448  102.2426  101.0447  101.6297\n2017-11-02  104.8906  101.7607  102.495   101.3497\n2017-11-03  105.3787  102.0203  102.5082  100.4127\n2017-11-04  104.7175  102.3767  101.1828  100.2497\n\u22ee\n2018-06-26  77.5594   65.6504   103.1046  101.8513\n2018-06-27  77.3251   67.1018   103.9124  102.6941\n2018-06-28  77.2808   66.997    103.9272  102.3287\n2018-06-29  76.6683   68.4617   105.0491  101.0824\n2018-06-30  76.5854   67.9367   103.2967  100.581\n2018-07-01  76.5081   65.4194   103.4564  100.4419\n2018-07-02  76.8498   65.9005   102.3086  100.7811\n2018-07-03  78.0611   64.7708   103.3932  101.1851\n2018-07-04  78.2615   63.0758   102.9887  99.522\n2018-07-05  77.1773   63.8096   101.4222  98.8891\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-10-27  100.7271\n2017-10-28  100.7774\n2017-10-29  100.0278\n2017-10-30  102.0467\n2017-10-31  104.1101\n2017-11-02  104.8906\n2017-11-03  105.3787\n2017-11-05  104.1487\n2017-11-06  105.5838\n\u22ee\n2018-06-19  75.2854\n2018-06-21  75.7909\n2018-06-23  77.0734\n2018-06-24  75.6646\n2018-06-26  77.5594\n2018-06-28  77.2808\n2018-07-01  76.5081\n2018-07-02  76.8498\n2018-07-03  78.0611\n2018-07-05  77.1773\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-10-30  102.0467\n2017-10-31  104.1101\n2017-11-01  104.0448\n2017-11-02  104.8906\n2017-11-06  105.5838\n2017-11-07  104.5626\n2017-11-09  105.2129\n2017-11-11  105.0467\n2017-11-12  103.5615\n\u22ee\n2018-06-12  78.9965\n2018-06-19  75.2854\n2018-06-21  75.7909\n2018-06-22  75.2108\n2018-06-26  77.5594\n2018-06-27  77.3251\n2018-06-28  77.2808\n2018-06-30  76.5854\n2018-07-01  76.5081\n2018-07-02  76.8498", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A        B         C         D\n2017-10-27  98.266   100.7355  100.9619  99.9662\n2017-10-28  98.8282  101.5145  102.0894  98.5245\n2017-10-29  98.4679  100.5188  100.9978  99.4547\n2017-10-30  98.4249  101.0996  100.6118  100.9462\n2017-10-31  98.969   99.9874   99.6333   102.3324\n2017-11-01  98.8649  98.9333   100.8333  102.3884\n2017-11-02  99.3114  99.3124   101.8445  101.9971\n2017-11-03  99.1584  99.3814   104.482   101.9696\n2017-11-04  99.9094  100.9522  104.2641  101.1787\n\u22ee\n2018-06-26  86.3621  102.2896  71.5618   138.6803\n2018-06-27  85.0069  102.7134  69.9283   139.32\n2018-06-28  84.7379  100.8113  69.6801   141.2385\n2018-06-29  83.694   99.7704   70.4966   140.8142\n2018-06-30  81.7143  100.0251  70.2357   140.6864\n2018-07-01  80.781   98.4347   70.3954   142.7838\n2018-07-02  79.9308  97.4743   70.3567   142.3359\n2018-07-03  79.4216  98.6511   70.0186   144.769\n2018-07-04  78.8041  96.4941   69.637    146.0885\n2018-07-05  78.5271  96.2898   69.183    145.8067\n\njulia  X[1:10, :]\nIndex       A        B         C         D\n2017-10-27  98.266   100.7355  100.9619  99.9662\n2017-10-28  98.8282  101.5145  102.0894  98.5245\n2017-10-29  98.4679  100.5188  100.9978  99.4547\n2017-10-30  98.4249  101.0996  100.6118  100.9462\n2017-10-31  98.969   99.9874   99.6333   102.3324\n2017-11-01  98.8649  98.9333   100.8333  102.3884\n2017-11-02  99.3114  99.3124   101.8445  101.9971\n2017-11-03  99.1584  99.3814   104.482   101.9696\n2017-11-04  99.9094  100.9522  104.2641  101.1787\n2017-11-05  98.1138  100.1082  103.0088  100.2428\n\njulia  X[end-100:end, 2:3]\nIndex       B         C\n2018-03-27  90.7624   82.7207\n2018-03-28  90.7852   82.074\n2018-03-29  90.8486   81.9159\n2018-03-30  89.9329   82.0996\n2018-03-31  90.0328   81.9861\n2018-04-01  90.2153   83.2726\n2018-04-02  91.0218   82.492\n2018-04-03  92.3275   83.4487\n2018-04-04  90.61     83.5825\n\u22ee\n2018-06-26  102.2896  71.5618\n2018-06-27  102.7134  69.9283\n2018-06-28  100.8113  69.6801\n2018-06-29  99.7704   70.4966\n2018-06-30  100.0251  70.2357\n2018-07-01  98.4347   70.3954\n2018-07-02  97.4743   70.3567\n2018-07-03  98.6511   70.0186\n2018-07-04  96.4941   69.637\n2018-07-05  96.2898   69.183\n\njulia  X[end, 2:end]\nIndex       B        C       D\n2018-07-05  96.2898  69.183  145.8067", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-10-27  100.5571  98.8894   99.856    100.9851\n2017-10-28  99.2922   99.0121   99.4385   101.2706\n2017-10-29  98.5579   98.1211   99.9176   99.2884\n2017-10-30  97.7113   99.8812   98.5444   101.2185\n2017-10-31  98.1755   100.1314  100.5332  101.7055\n2017-11-01  97.3235   102.5866  100.5388  101.0165\n2017-11-02  99.235    101.7576  100.2122  101.4308\n2017-11-03  98.4315   101.4528  100.2432  101.4033\n2017-11-04  98.8775   99.207    101.5941  100.2311\n\u22ee\n2018-06-26  103.539   71.1706   98.9948   95.5689\n2018-06-27  102.8463  72.2402   98.7235   96.8232\n2018-06-28  102.8109  72.5658   98.7215   99.1331\n2018-06-29  102.4959  72.9195   98.1566   98.3888\n2018-06-30  101.8475  71.4505   98.5702   97.8802\n2018-07-01  100.1803  70.4309   97.5472   95.4267\n2018-07-02  100.5639  71.1802   98.1345   94.0874\n2018-07-03  101.3896  68.5053   100.2293  94.9088\n2018-07-04  101.3382  69.2007   102.0558  96.4653\n2018-07-05  102.254   69.3783   103.4267  94.3321\n\njulia  X[:, :A]\nIndex       A\n2017-10-27  100.5571\n2017-10-28  99.2922\n2017-10-29  98.5579\n2017-10-30  97.7113\n2017-10-31  98.1755\n2017-11-01  97.3235\n2017-11-02  99.235\n2017-11-03  98.4315\n2017-11-04  98.8775\n\u22ee\n2018-06-26  103.539\n2018-06-27  102.8463\n2018-06-28  102.8109\n2018-06-29  102.4959\n2018-06-30  101.8475\n2018-07-01  100.1803\n2018-07-02  100.5639\n2018-07-03  101.3896\n2018-07-04  101.3382\n2018-07-05  102.254\n\njulia  X[:, [:B, :D]]\nIndex       B         D\n2017-10-27  98.8894   100.9851\n2017-10-28  99.0121   101.2706\n2017-10-29  98.1211   99.2884\n2017-10-30  99.8812   101.2185\n2017-10-31  100.1314  101.7055\n2017-11-01  102.5866  101.0165\n2017-11-02  101.7576  101.4308\n2017-11-03  101.4528  101.4033\n2017-11-04  99.207    100.2311\n\u22ee\n2018-06-26  71.1706   95.5689\n2018-06-27  72.2402   96.8232\n2018-06-28  72.5658   99.1331\n2018-06-29  72.9195   98.3888\n2018-06-30  71.4505   97.8802\n2018-07-01  70.4309   95.4267\n2018-07-02  71.1802   94.0874\n2018-07-03  68.5053   94.9088\n2018-07-04  69.2007   96.4653\n2018-07-05  69.3783   94.3321", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C        D\n2016-01-01  100.4251  100.0569  98.4731  100.1542\n2016-01-02  101.6844  99.717    99.1902  101.1325\n2016-01-03  101.5268  99.0933   97.3451  102.0317\n2016-01-04  102.4331  98.6774   96.3964  102.007\n2016-01-05  101.4945  97.5991   97.036   100.7309\n2016-01-06  100.9888  96.1881   98.086   99.5214\n2016-01-07  100.5925  95.6669   98.8814  99.0206\n2016-01-08  100.2509  95.1511   96.9572  98.7705\n2016-01-09  100.5467  93.5968   98.9118  98.427\n\u22ee\n2017-12-22  81.411    77.5838   85.8422  59.3189\n2017-12-23  80.8272   76.1676   86.4596  60.4535\n2017-12-24  80.7596   74.9037   87.1937  58.9017\n2017-12-25  78.5796   75.5778   87.6857  59.1929\n2017-12-26  79.6338   75.6797   88.9347  59.7434\n2017-12-27  79.9145   74.3171   89.6236  57.4851\n2017-12-28  80.1537   75.7312   89.204   58.7467\n2017-12-29  80.0908   74.9189   92.3226  61.0696\n2017-12-30  80.6868   76.9768   92.9266  59.66\n2017-12-31  81.6242   74.9387   94.3958  59.3929\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A         B        C        D\n2017-07-01  103.2533  89.5077  85.9572  72.1224\n\njulia  X[ 2016 ]  # whole year\nIndex       A         B         C        D\n2016-01-01  100.4251  100.0569  98.4731  100.1542\n2016-01-02  101.6844  99.717    99.1902  101.1325\n2016-01-03  101.5268  99.0933   97.3451  102.0317\n2016-01-04  102.4331  98.6774   96.3964  102.007\n2016-01-05  101.4945  97.5991   97.036   100.7309\n2016-01-06  100.9888  96.1881   98.086   99.5214\n2016-01-07  100.5925  95.6669   98.8814  99.0206\n2016-01-08  100.2509  95.1511   96.9572  98.7705\n2016-01-09  100.5467  93.5968   98.9118  98.427\n\u22ee\n2016-12-22  101.7792  96.3559   91.0176  70.4339\n2016-12-23  101.353   96.3635   89.5435  69.9247\n2016-12-24  103.0534  95.7456   89.4024  70.0777\n2016-12-25  103.8342  94.9589   89.8232  69.7494\n2016-12-26  104.523   93.3273   90.0466  70.0339\n2016-12-27  104.8103  92.9913   92.1371  68.2946\n2016-12-28  105.7144  94.566    92.2292  69.834\n2016-12-29  106.8926  93.2348   93.2272  67.161\n2016-12-30  107.3723  93.3324   92.8809  66.0723\n2016-12-31  106.8979  92.6086   92.7379  65.4422\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-10-27  0.3112\n2017-10-28  0.0017\n2017-10-29  0.5782\n2017-10-30  0.9621\n2017-10-31  0.6898\n2017-11-01  0.4851\n2017-11-02  0.487\n2017-11-03  0.781\n2017-11-04  0.8542\n\u22ee\n2018-06-26  0.7403\n2018-06-27  0.6131\n2018-06-28  0.0418\n2018-06-29  0.2392\n2018-06-30  0.8277\n2018-07-01  0.4415\n2018-07-02  0.9306\n2018-07-03  0.2706\n2018-07-04  0.8293\n2018-07-05  0.2577\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-04-27  0.0654\n2017-04-28  0.9934\n2017-04-29  0.8873\n2017-04-30  0.3088\n2017-04-30  0.4435\n2017-05-01  0.8018\n2017-05-02  0.6283\n2017-05-03  0.533\n2017-05-04  0.468\n\u22ee\n2017-12-26  0.5536\n2017-12-27  0.6736\n2017-12-28  0.0044\n2017-12-29  0.6017\n2017-12-30  0.1612\n2018-01-01  0.2377\n2018-01-02  0.1474\n2018-01-03  0.9007\n2018-01-04  0.2146\n2018-01-05  0.327\n\njulia\n [x y]\nIndex       A       A\n2017-04-27  NaN     0.0654\n2017-04-28  NaN     0.9934\n2017-04-29  NaN     0.8873\n2017-04-30  NaN     0.3088\n2017-05-01  NaN     0.4435\n2017-05-02  NaN     0.8018\n2017-05-03  NaN     0.6283\n2017-05-04  NaN     0.533\n2017-05-05  NaN     0.468\n\u22ee\n2018-06-26  0.7403  NaN\n2018-06-27  0.6131  NaN\n2018-06-28  0.0418  NaN\n2018-06-29  0.2392  NaN\n2018-06-30  0.8277  NaN\n2018-07-01  0.4415  NaN\n2018-07-02  0.9306  NaN\n2018-07-03  0.2706  NaN\n2018-07-04  0.8293  NaN\n2018-07-05  0.2577  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-10-27  0.0061\n2017-10-28  0.7561\n2017-10-29  0.0642\n2017-10-30  0.0971\n2017-10-31  0.2814\n2017-11-01  0.2716\n2017-11-02  0.5972\n2017-11-03  0.3171\n2017-11-04  0.2273\n\u22ee\n2018-06-26  0.7916\n2018-06-27  0.4071\n2018-06-28  0.4231\n2018-06-29  0.5698\n2018-06-30  0.0807\n2018-07-01  0.8722\n2018-07-02  0.0058\n2018-07-03  0.8228\n2018-07-04  0.9794\n2018-07-05  0.3623\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-04-27  0.7881\n2017-04-28  0.2343\n2017-04-29  0.2184\n2017-04-30  0.6898\n2017-04-30  0.2044\n2017-05-01  0.3386\n2017-05-02  0.6943\n2017-05-03  0.688\n2017-05-04  0.6518\n\u22ee\n2017-12-26  0.1723\n2017-12-27  0.4859\n2017-12-28  0.515\n2017-12-29  0.8245\n2017-12-30  0.1327\n2018-01-01  0.997\n2018-01-02  0.2801\n2018-01-03  0.0708\n2018-01-04  0.3935\n2018-01-05  0.2529\n\njulia\n ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (69, 70))\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-10-27  0.4929\n2017-10-28  0.0047\n2017-10-29  0.6231\n2017-10-30  0.8013\n2017-10-31  0.3086\n2017-11-01  0.4343\n2017-11-02  0.9372\n2017-11-03  0.5374\n2017-11-04  0.6861\n\u22ee\n2018-06-26  0.5103\n2018-06-27  0.2265\n2018-06-28  0.3218\n2018-06-29  0.6566\n2018-06-30  0.4706\n2018-07-01  0.9439\n2018-07-02  0.6615\n2018-07-03  0.2036\n2018-07-04  0.9586\n2018-07-05  0.8541\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-04-27  0.7648\n2017-04-28  0.4277\n2017-04-29  0.8003\n2017-04-30  0.0902\n2017-04-30  0.6343\n2017-05-01  0.381\n2017-05-02  0.6432\n2017-05-03  0.2351\n2017-05-04  0.4762\n\u22ee\n2017-12-26  0.6081\n2017-12-27  0.5125\n2017-12-28  0.646\n2017-12-29  0.8281\n2017-12-30  0.403\n2018-01-01  0.3929\n2018-01-02  0.8878\n2018-01-03  0.8792\n2018-01-04  0.6858\n2018-01-05  0.5579\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-10-27  0.4929  0.7086\n2017-10-28  0.0047  0.8153\n2017-10-29  0.6231  0.9716\n2017-10-30  0.8013  0.9066\n2017-10-31  0.3086  0.5579\n2017-11-01  0.4343  0.2292\n2017-11-02  0.9372  0.9512\n2017-11-03  0.5374  0.9654\n2017-11-04  0.6861  0.0314\n\u22ee\n2018-06-26  0.5103  NaN\n2018-06-27  0.2265  NaN\n2018-06-28  0.3218  NaN\n2018-06-29  0.6566  NaN\n2018-06-30  0.4706  NaN\n2018-07-01  0.9439  NaN\n2018-07-02  0.6615  NaN\n2018-07-03  0.2036  NaN\n2018-07-04  0.9586  NaN\n2018-07-05  0.8541  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-04-27  NaN     0.7648\n2017-04-28  NaN     0.4277\n2017-04-29  NaN     0.8003\n2017-04-30  NaN     0.0902\n2017-05-01  NaN     0.6343\n2017-05-02  NaN     0.381\n2017-05-03  NaN     0.6432\n2017-05-04  NaN     0.2351\n2017-05-05  NaN     0.4762\n\u22ee\n2017-12-26  0.6334  0.8412\n2017-12-27  0.1854  0.457\n2017-12-28  0.7403  0.5522\n2017-12-29  0.7546  0.7033\n2017-12-30  0.8436  0.6081\n2018-01-01  0.4746  0.5125\n2018-01-02  0.5177  0.646\n2018-01-03  0.2528  0.8281\n2018-01-04  0.8292  0.403\n2018-01-05  0.9993  0.3929", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-10-27  0.3112\n2017-10-28  0.0017\n2017-10-29  0.5782\n2017-10-30  0.9621\n2017-10-31  0.6898\n2017-11-01  0.4851\n2017-11-02  0.487\n2017-11-03  0.781\n2017-11-04  0.8542\n\u22ee\n2018-06-26  0.7403\n2018-06-27  0.6131\n2018-06-28  0.0418\n2018-06-29  0.2392\n2018-06-30  0.8277\n2018-07-01  0.4415\n2018-07-02  0.9306\n2018-07-03  0.2706\n2018-07-04  0.8293\n2018-07-05  0.2577\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-04-27  0.0654\n2017-04-28  0.9934\n2017-04-29  0.8873\n2017-04-30  0.3088\n2017-04-30  0.4435\n2017-05-01  0.8018\n2017-05-02  0.6283\n2017-05-03  0.533\n2017-05-04  0.468\n\u22ee\n2017-12-26  0.5536\n2017-12-27  0.6736\n2017-12-28  0.0044\n2017-12-29  0.6017\n2017-12-30  0.1612\n2018-01-01  0.2377\n2018-01-02  0.1474\n2018-01-03  0.9007\n2018-01-04  0.2146\n2018-01-05  0.327\n\njulia  [x y]\nIndex       A       A\n2017-04-27  NaN     0.0654\n2017-04-28  NaN     0.9934\n2017-04-29  NaN     0.8873\n2017-04-30  NaN     0.3088\n2017-05-01  NaN     0.4435\n2017-05-02  NaN     0.8018\n2017-05-03  NaN     0.6283\n2017-05-04  NaN     0.533\n2017-05-05  NaN     0.468\n\u22ee\n2018-06-26  0.7403  NaN\n2018-06-27  0.6131  NaN\n2018-06-28  0.0418  NaN\n2018-06-29  0.2392  NaN\n2018-06-30  0.8277  NaN\n2018-07-01  0.4415  NaN\n2018-07-02  0.9306  NaN\n2018-07-03  0.2706  NaN\n2018-07-04  0.8293  NaN\n2018-07-05  0.2577  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-10-27  0.0061\n2017-10-28  0.7561\n2017-10-29  0.0642\n2017-10-30  0.0971\n2017-10-31  0.2814\n2017-11-01  0.2716\n2017-11-02  0.5972\n2017-11-03  0.3171\n2017-11-04  0.2273\n\u22ee\n2018-06-26  0.7916\n2018-06-27  0.4071\n2018-06-28  0.4231\n2018-06-29  0.5698\n2018-06-30  0.0807\n2018-07-01  0.8722\n2018-07-02  0.0058\n2018-07-03  0.8228\n2018-07-04  0.9794\n2018-07-05  0.3623\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-04-27  0.7881\n2017-04-28  0.2343\n2017-04-29  0.2184\n2017-04-30  0.6898\n2017-04-30  0.2044\n2017-05-01  0.3386\n2017-05-02  0.6943\n2017-05-03  0.688\n2017-05-04  0.6518\n\u22ee\n2017-12-26  0.1723\n2017-12-27  0.4859\n2017-12-28  0.515\n2017-12-29  0.8245\n2017-12-30  0.1327\n2018-01-01  0.997\n2018-01-02  0.2801\n2018-01-03  0.0708\n2018-01-04  0.3935\n2018-01-05  0.2529\n\njulia  ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (69, 70))", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-10-27  0.4929\n2017-10-28  0.0047\n2017-10-29  0.6231\n2017-10-30  0.8013\n2017-10-31  0.3086\n2017-11-01  0.4343\n2017-11-02  0.9372\n2017-11-03  0.5374\n2017-11-04  0.6861\n\u22ee\n2018-06-26  0.5103\n2018-06-27  0.2265\n2018-06-28  0.3218\n2018-06-29  0.6566\n2018-06-30  0.4706\n2018-07-01  0.9439\n2018-07-02  0.6615\n2018-07-03  0.2036\n2018-07-04  0.9586\n2018-07-05  0.8541\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-04-27  0.7648\n2017-04-28  0.4277\n2017-04-29  0.8003\n2017-04-30  0.0902\n2017-04-30  0.6343\n2017-05-01  0.381\n2017-05-02  0.6432\n2017-05-03  0.2351\n2017-05-04  0.4762\n\u22ee\n2017-12-26  0.6081\n2017-12-27  0.5125\n2017-12-28  0.646\n2017-12-29  0.8281\n2017-12-30  0.403\n2018-01-01  0.3929\n2018-01-02  0.8878\n2018-01-03  0.8792\n2018-01-04  0.6858\n2018-01-05  0.5579\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-10-27  0.4929  0.7086\n2017-10-28  0.0047  0.8153\n2017-10-29  0.6231  0.9716\n2017-10-30  0.8013  0.9066\n2017-10-31  0.3086  0.5579\n2017-11-01  0.4343  0.2292\n2017-11-02  0.9372  0.9512\n2017-11-03  0.5374  0.9654\n2017-11-04  0.6861  0.0314\n\u22ee\n2018-06-26  0.5103  NaN\n2018-06-27  0.2265  NaN\n2018-06-28  0.3218  NaN\n2018-06-29  0.6566  NaN\n2018-06-30  0.4706  NaN\n2018-07-01  0.9439  NaN\n2018-07-02  0.6615  NaN\n2018-07-03  0.2036  NaN\n2018-07-04  0.9586  NaN\n2018-07-05  0.8541  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-04-27  NaN     0.7648\n2017-04-28  NaN     0.4277\n2017-04-29  NaN     0.8003\n2017-04-30  NaN     0.0902\n2017-05-01  NaN     0.6343\n2017-05-02  NaN     0.381\n2017-05-03  NaN     0.6432\n2017-05-04  NaN     0.2351\n2017-05-05  NaN     0.4762\n\u22ee\n2017-12-26  0.6334  0.8412\n2017-12-27  0.1854  0.457\n2017-12-28  0.7403  0.5522\n2017-12-29  0.7546  0.7033\n2017-12-30  0.8436  0.6081\n2018-01-01  0.4746  0.5125\n2018-01-02  0.5177  0.646\n2018-01-03  0.2528  0.8281\n2018-01-04  0.8292  0.403\n2018-01-05  0.9993  0.3929", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}