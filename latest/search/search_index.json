{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C        D\n2017-07-12  100.3636  100.1648  98.2338  101.3241\n2017-07-13  100.243   98.5948   97.1929  102.2526\n2017-07-14  100.6716  96.9082   97.4083  102.2339\n2017-07-15  101.5672  95.8729   97.8078  103.5297\n2017-07-16  102.0489  96.0167   96.444   102.7946\n2017-07-17  101.392   94.6429   97.339   102.3832\n2017-07-18  102.8788  94.7369   98.5514  100.9488\n2017-07-19  102.7803  94.4993   98.8266  101.3678\n2017-07-20  102.4428  93.7351   97.5152  101.1775\n\u22ee\n2018-03-11  83.4576   113.0902  71.2205  111.0925\n2018-03-12  84.3419   112.9838  71.6185  112.5399\n2018-03-13  85.4552   112.122   70.9664  112.4726\n2018-03-14  84.49     110.798   71.717   113.8213\n2018-03-15  83.6113   111.8859  74.1656  112.0828\n2018-03-16  82.5415   111.0348  73.5778  110.5667\n2018-03-17  82.9797   111.1524  74.0446  111.452\n2018-03-18  82.563    111.8021  74.0457  110.6039\n2018-03-19  83.5868   110.8084  75.5746  110.5928\n2018-03-20  83.5908   110.3613  75.5898  112.6387\n\njulia\n X[1]\nIndex       A         B         C        D\n2017-07-12  100.3636  100.1648  98.2338  101.3241\n\njulia\n X[1, :]\nIndex       A         B         C        D\n2017-07-12  100.3636  100.1648  98.2338  101.3241\n\njulia\n X[:, 1]\nIndex       A\n2017-07-12  100.3636\n2017-07-13  100.243\n2017-07-14  100.6716\n2017-07-15  101.5672\n2017-07-16  102.0489\n2017-07-17  101.392\n2017-07-18  102.8788\n2017-07-19  102.7803\n2017-07-20  102.4428\n\u22ee\n2018-03-11  83.4576\n2018-03-12  84.3419\n2018-03-13  85.4552\n2018-03-14  84.49\n2018-03-15  83.6113\n2018-03-16  82.5415\n2018-03-17  82.9797\n2018-03-18  82.563\n2018-03-19  83.5868\n2018-03-20  83.5908\n\njulia\n X[1, 1]\nIndex       A\n2017-07-12  100.3636\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A        B         C         D\n2017-07-12  98.6212  98.9292   102.1572  100.2332\n2017-07-13  97.6503  98.2679   102.4446  101.2512\n2017-07-14  96.5785  99.4954   101.5669  101.2002\n2017-07-15  96.5926  99.5785   102.1012  101.2615\n2017-07-16  96.4157  100.6828  100.4304  99.1977\n2017-07-17  95.8935  99.6343   99.4275   97.7482\n2017-07-18  95.4285  101.3566  99.6399   100.1473\n2017-07-19  95.0151  100.0085  100.0705  101.4808\n2017-07-20  95.5041  99.5333   101.202   101.4034\n\u22ee\n2018-03-11  92.6997  95.2451   107.3298  78.9368\n2018-03-12  92.6345  95.6048   109.2535  79.287\n2018-03-13  92.7715  94.3455   108.2504  78.9299\n2018-03-14  94.4689  94.737    107.6857  76.9856\n2018-03-15  93.7799  94.306    107.9559  77.5246\n2018-03-16  93.792   95.3931   105.1672  78.2266\n2018-03-17  92.8502  94.1439   103.8899  76.4632\n2018-03-18  93.6786  95.041    105.4167  76.5951\n2018-03-19  93.7656  96.3846   105.7839  76.7108\n2018-03-20  96.4712  97.2784   106.8643  76.8287\n\njulia\n X[trues(size(X,1)), :]\nIndex       A        B         C         D\n2017-07-12  98.6212  98.9292   102.1572  100.2332\n2017-07-13  97.6503  98.2679   102.4446  101.2512\n2017-07-14  96.5785  99.4954   101.5669  101.2002\n2017-07-15  96.5926  99.5785   102.1012  101.2615\n2017-07-16  96.4157  100.6828  100.4304  99.1977\n2017-07-17  95.8935  99.6343   99.4275   97.7482\n2017-07-18  95.4285  101.3566  99.6399   100.1473\n2017-07-19  95.0151  100.0085  100.0705  101.4808\n2017-07-20  95.5041  99.5333   101.202   101.4034\n\u22ee\n2018-03-11  92.6997  95.2451   107.3298  78.9368\n2018-03-12  92.6345  95.6048   109.2535  79.287\n2018-03-13  92.7715  94.3455   108.2504  78.9299\n2018-03-14  94.4689  94.737    107.6857  76.9856\n2018-03-15  93.7799  94.306    107.9559  77.5246\n2018-03-16  93.792   95.3931   105.1672  78.2266\n2018-03-17  92.8502  94.1439   103.8899  76.4632\n2018-03-18  93.6786  95.041    105.4167  76.5951\n2018-03-19  93.7656  96.3846   105.7839  76.7108\n2018-03-20  96.4712  97.2784   106.8643  76.8287\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-07-15  96.5926\n2017-07-20  95.5041\n2017-07-21  96.8023\n2017-07-31  100.6817\n2017-08-01  100.0394\n2017-08-02  99.6499\n2017-08-06  97.5099\n2017-08-07  95.6297\n2017-08-10  96.1008\n\u22ee\n2018-02-17  92.4251\n2018-02-20  91.9816\n2018-02-21  92.4027\n2018-02-23  92.8766\n2018-03-01  93.0699\n2018-03-02  92.3646\n2018-03-08  92.4236\n2018-03-10  92.7853\n2018-03-12  92.6345\n2018-03-16  93.792\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-07-12  98.6212\n2017-07-13  97.6503\n2017-07-14  96.5785\n2017-07-15  96.5926\n2017-07-16  96.4157\n2017-07-19  95.0151\n2017-07-20  95.5041\n2017-07-21  96.8023\n2017-07-22  96.2776\n\u22ee\n2018-02-23  92.8766\n2018-02-28  92.17\n2018-03-01  93.0699\n2018-03-04  90.848\n2018-03-07  91.1767\n2018-03-10  92.7853\n2018-03-14  94.4689\n2018-03-15  93.7799\n2018-03-17  92.8502\n2018-03-18  93.6786\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  99.5933   98.951    99.9214   99.0931\n2017-07-13  101.0971  98.3843   99.8834   98.5309\n2017-07-14  101.0245  98.0651   99.5157   98.1121\n2017-07-15  100.8491  99.3447   99.3279   97.1894\n2017-07-16  101.6872  98.2223   100.7209  98.2745\n2017-07-17  101.7541  98.3294   100.5286  98.9536\n2017-07-18  102.5788  98.8444   101.55    100.3513\n2017-07-19  102.7627  99.5383   100.6503  100.5384\n2017-07-20  100.973   98.1226   99.987    100.0601\n\u22ee\n2018-03-11  93.4009   123.2644  77.0039   90.3083\n2018-03-12  94.7473   123.016   77.756    90.7651\n2018-03-13  94.5947   122.5674  76.8453   91.1004\n2018-03-14  96.2284   123.6397  76.4615   90.6903\n2018-03-15  94.9929   122.993   76.2156   91.5963\n2018-03-16  93.5398   124.4046  75.5307   92.2541\n2018-03-17  93.9543   124.3855  73.9306   91.774\n2018-03-18  93.3796   125.335   73.1968   93.4356\n2018-03-19  92.7662   125.1199  73.1718   93.2506\n2018-03-20  93.8887   126.4285  72.1786   94.3489\n\njulia\n X[1:10, :]\nIndex       A         B        C         D\n2017-07-12  99.5933   98.951   99.9214   99.0931\n2017-07-13  101.0971  98.3843  99.8834   98.5309\n2017-07-14  101.0245  98.0651  99.5157   98.1121\n2017-07-15  100.8491  99.3447  99.3279   97.1894\n2017-07-16  101.6872  98.2223  100.7209  98.2745\n2017-07-17  101.7541  98.3294  100.5286  98.9536\n2017-07-18  102.5788  98.8444  101.55    100.3513\n2017-07-19  102.7627  99.5383  100.6503  100.5384\n2017-07-20  100.973   98.1226  99.987    100.0601\n2017-07-21  99.8616   97.9726  99.7178   99.803\n\njulia\n X[end-100:end, 2:3]\nIndex       B         C\n2017-12-10  117.2374  88.188\n2017-12-11  117.2505  88.0852\n2017-12-12  118.0058  88.3414\n2017-12-13  117.5444  88.4167\n2017-12-14  117.4204  86.7043\n2017-12-15  118.6302  85.9991\n2017-12-16  116.8873  86.4443\n2017-12-17  116.8154  84.0378\n2017-12-18  115.0102  83.6429\n\u22ee\n2018-03-11  123.2644  77.0039\n2018-03-12  123.016   77.756\n2018-03-13  122.5674  76.8453\n2018-03-14  123.6397  76.4615\n2018-03-15  122.993   76.2156\n2018-03-16  124.4046  75.5307\n2018-03-17  124.3855  73.9306\n2018-03-18  125.335   73.1968\n2018-03-19  125.1199  73.1718\n2018-03-20  126.4285  72.1786\n\njulia\n X[end, 2:end]\nIndex       B         C        D\n2018-03-20  126.4285  72.1786  94.3489\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C        D\n2017-07-12  98.5611   99.144    98.2568  99.9961\n2017-07-13  99.2122   100.9451  98.1186  99.528\n2017-07-14  100.513   102.1169  98.5462  100.1639\n2017-07-15  99.8399   100.8921  98.6624  98.6093\n2017-07-16  99.6123   99.944    99.4413  100.2809\n2017-07-17  99.2834   100.3431  98.2072  99.556\n2017-07-18  99.9022   101.1835  98.5634  99.4196\n2017-07-19  99.5486   101.3754  98.4611  99.6646\n2017-07-20  101.0185  102.1056  97.6745  97.6263\n\u22ee\n2018-03-11  88.4814   105.5041  87.1707  99.9108\n2018-03-12  88.7859   106.4773  85.7824  99.0846\n2018-03-13  87.0961   104.7926  83.8266  98.4893\n2018-03-14  88.0856   105.7782  83.6606  100.3233\n2018-03-15  87.8742   107.9819  83.0961  101.7367\n2018-03-16  86.7755   108.8687  83.505   101.1715\n2018-03-17  85.6303   107.5014  84.2173  100.25\n2018-03-18  87.2911   107.5287  83.0658  99.755\n2018-03-19  86.0403   108.5258  83.8421  99.4078\n2018-03-20  85.4855   109.7656  84.9675  98.301\n\njulia\n X[:, :A]\nIndex       A\n2017-07-12  98.5611\n2017-07-13  99.2122\n2017-07-14  100.513\n2017-07-15  99.8399\n2017-07-16  99.6123\n2017-07-17  99.2834\n2017-07-18  99.9022\n2017-07-19  99.5486\n2017-07-20  101.0185\n\u22ee\n2018-03-11  88.4814\n2018-03-12  88.7859\n2018-03-13  87.0961\n2018-03-14  88.0856\n2018-03-15  87.8742\n2018-03-16  86.7755\n2018-03-17  85.6303\n2018-03-18  87.2911\n2018-03-19  86.0403\n2018-03-20  85.4855\n\njulia\n X[:, [:B, :D]]\nIndex       B         D\n2017-07-12  99.144    99.9961\n2017-07-13  100.9451  99.528\n2017-07-14  102.1169  100.1639\n2017-07-15  100.8921  98.6093\n2017-07-16  99.944    100.2809\n2017-07-17  100.3431  99.556\n2017-07-18  101.1835  99.4196\n2017-07-19  101.3754  99.6646\n2017-07-20  102.1056  97.6263\n\u22ee\n2018-03-11  105.5041  99.9108\n2018-03-12  106.4773  99.0846\n2018-03-13  104.7926  98.4893\n2018-03-14  105.7782  100.3233\n2018-03-15  107.9819  101.7367\n2018-03-16  108.8687  101.1715\n2018-03-17  107.5014  100.25\n2018-03-18  107.5287  99.755\n2018-03-19  108.5258  99.4078\n2018-03-20  109.7656  98.301\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C         D\n2016-01-01  100.2641  100.7771  101.154   100.3461\n2016-01-02  98.627    102.804   101.1935  100.3161\n2016-01-03  98.7008   102.1026  102.2856  99.6111\n2016-01-04  98.6937   102.8657  102.5442  100.5954\n2016-01-05  98.4004   103.6749  103.6086  100.0815\n2016-01-06  98.9588   104.5892  104.9362  101.0069\n2016-01-07  97.8384   103.7255  104.1685  101.1364\n2016-01-08  98.4716   105.1196  105.4461  101.5513\n2016-01-09  97.3477   105.162   104.0336  100.1508\n\u22ee\n2017-12-22  88.3967   84.01     133.7998  108.2526\n2017-12-23  89.0637   84.8438   132.0998  107.2905\n2017-12-24  89.1637   85.0679   133.2903  107.7136\n2017-12-25  90.3636   86.0392   133.6633  107.7301\n2017-12-26  90.244    85.9196   134.8193  105.3148\n2017-12-27  91.1653   85.672    135.2627  103.9506\n2017-12-28  90.5091   83.6033   133.655   103.2895\n2017-12-29  91.0846   85.3898   134.4963  103.6933\n2017-12-30  89.766    85.4533   134.448   101.9001\n2017-12-31  88.7685   85.86     132.6604  101.8577\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A        B        C         D\n2017-07-01  93.4551  97.0018  109.8969  114.0117\n\njulia\n X[\n2016\n]  # whole year\nIndex       A         B         C         D\n2016-01-01  100.2641  100.7771  101.154   100.3461\n2016-01-02  98.627    102.804   101.1935  100.3161\n2016-01-03  98.7008   102.1026  102.2856  99.6111\n2016-01-04  98.6937   102.8657  102.5442  100.5954\n2016-01-05  98.4004   103.6749  103.6086  100.0815\n2016-01-06  98.9588   104.5892  104.9362  101.0069\n2016-01-07  97.8384   103.7255  104.1685  101.1364\n2016-01-08  98.4716   105.1196  105.4461  101.5513\n2016-01-09  97.3477   105.162   104.0336  100.1508\n\u22ee\n2016-12-22  89.905    77.807    102.7148  124.4251\n2016-12-23  90.4722   77.1583   104.1698  124.0593\n2016-12-24  89.7335   77.6455   105.1206  124.22\n2016-12-25  90.7435   79.0343   105.2291  124.1315\n2016-12-26  90.8116   80.6736   105.0538  126.1786\n2016-12-27  91.1783   80.7395   104.1103  126.96\n2016-12-28  90.6052   80.5246   103.372   127.2661\n2016-12-29  90.4942   80.7227   102.2175  127.7155\n2016-12-30  90.1775   81.3364   104.23    128.6117\n2016-12-31  91.6507   79.372    103.1286  127.3411\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C        D\n2017-07-12  100.3636  100.1648  98.2338  101.3241\n2017-07-13  100.243   98.5948   97.1929  102.2526\n2017-07-14  100.6716  96.9082   97.4083  102.2339\n2017-07-15  101.5672  95.8729   97.8078  103.5297\n2017-07-16  102.0489  96.0167   96.444   102.7946\n2017-07-17  101.392   94.6429   97.339   102.3832\n2017-07-18  102.8788  94.7369   98.5514  100.9488\n2017-07-19  102.7803  94.4993   98.8266  101.3678\n2017-07-20  102.4428  93.7351   97.5152  101.1775\n\u22ee\n2018-03-11  83.4576   113.0902  71.2205  111.0925\n2018-03-12  84.3419   112.9838  71.6185  112.5399\n2018-03-13  85.4552   112.122   70.9664  112.4726\n2018-03-14  84.49     110.798   71.717   113.8213\n2018-03-15  83.6113   111.8859  74.1656  112.0828\n2018-03-16  82.5415   111.0348  73.5778  110.5667\n2018-03-17  82.9797   111.1524  74.0446  111.452\n2018-03-18  82.563    111.8021  74.0457  110.6039\n2018-03-19  83.5868   110.8084  75.5746  110.5928\n2018-03-20  83.5908   110.3613  75.5898  112.6387\n\njulia  X[1]\nIndex       A         B         C        D\n2017-07-12  100.3636  100.1648  98.2338  101.3241\n\njulia  X[1, :]\nIndex       A         B         C        D\n2017-07-12  100.3636  100.1648  98.2338  101.3241\n\njulia  X[:, 1]\nIndex       A\n2017-07-12  100.3636\n2017-07-13  100.243\n2017-07-14  100.6716\n2017-07-15  101.5672\n2017-07-16  102.0489\n2017-07-17  101.392\n2017-07-18  102.8788\n2017-07-19  102.7803\n2017-07-20  102.4428\n\u22ee\n2018-03-11  83.4576\n2018-03-12  84.3419\n2018-03-13  85.4552\n2018-03-14  84.49\n2018-03-15  83.6113\n2018-03-16  82.5415\n2018-03-17  82.9797\n2018-03-18  82.563\n2018-03-19  83.5868\n2018-03-20  83.5908\n\njulia  X[1, 1]\nIndex       A\n2017-07-12  100.3636", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A        B         C         D\n2017-07-12  98.6212  98.9292   102.1572  100.2332\n2017-07-13  97.6503  98.2679   102.4446  101.2512\n2017-07-14  96.5785  99.4954   101.5669  101.2002\n2017-07-15  96.5926  99.5785   102.1012  101.2615\n2017-07-16  96.4157  100.6828  100.4304  99.1977\n2017-07-17  95.8935  99.6343   99.4275   97.7482\n2017-07-18  95.4285  101.3566  99.6399   100.1473\n2017-07-19  95.0151  100.0085  100.0705  101.4808\n2017-07-20  95.5041  99.5333   101.202   101.4034\n\u22ee\n2018-03-11  92.6997  95.2451   107.3298  78.9368\n2018-03-12  92.6345  95.6048   109.2535  79.287\n2018-03-13  92.7715  94.3455   108.2504  78.9299\n2018-03-14  94.4689  94.737    107.6857  76.9856\n2018-03-15  93.7799  94.306    107.9559  77.5246\n2018-03-16  93.792   95.3931   105.1672  78.2266\n2018-03-17  92.8502  94.1439   103.8899  76.4632\n2018-03-18  93.6786  95.041    105.4167  76.5951\n2018-03-19  93.7656  96.3846   105.7839  76.7108\n2018-03-20  96.4712  97.2784   106.8643  76.8287\n\njulia  X[trues(size(X,1)), :]\nIndex       A        B         C         D\n2017-07-12  98.6212  98.9292   102.1572  100.2332\n2017-07-13  97.6503  98.2679   102.4446  101.2512\n2017-07-14  96.5785  99.4954   101.5669  101.2002\n2017-07-15  96.5926  99.5785   102.1012  101.2615\n2017-07-16  96.4157  100.6828  100.4304  99.1977\n2017-07-17  95.8935  99.6343   99.4275   97.7482\n2017-07-18  95.4285  101.3566  99.6399   100.1473\n2017-07-19  95.0151  100.0085  100.0705  101.4808\n2017-07-20  95.5041  99.5333   101.202   101.4034\n\u22ee\n2018-03-11  92.6997  95.2451   107.3298  78.9368\n2018-03-12  92.6345  95.6048   109.2535  79.287\n2018-03-13  92.7715  94.3455   108.2504  78.9299\n2018-03-14  94.4689  94.737    107.6857  76.9856\n2018-03-15  93.7799  94.306    107.9559  77.5246\n2018-03-16  93.792   95.3931   105.1672  78.2266\n2018-03-17  92.8502  94.1439   103.8899  76.4632\n2018-03-18  93.6786  95.041    105.4167  76.5951\n2018-03-19  93.7656  96.3846   105.7839  76.7108\n2018-03-20  96.4712  97.2784   106.8643  76.8287\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-07-15  96.5926\n2017-07-20  95.5041\n2017-07-21  96.8023\n2017-07-31  100.6817\n2017-08-01  100.0394\n2017-08-02  99.6499\n2017-08-06  97.5099\n2017-08-07  95.6297\n2017-08-10  96.1008\n\u22ee\n2018-02-17  92.4251\n2018-02-20  91.9816\n2018-02-21  92.4027\n2018-02-23  92.8766\n2018-03-01  93.0699\n2018-03-02  92.3646\n2018-03-08  92.4236\n2018-03-10  92.7853\n2018-03-12  92.6345\n2018-03-16  93.792\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-07-12  98.6212\n2017-07-13  97.6503\n2017-07-14  96.5785\n2017-07-15  96.5926\n2017-07-16  96.4157\n2017-07-19  95.0151\n2017-07-20  95.5041\n2017-07-21  96.8023\n2017-07-22  96.2776\n\u22ee\n2018-02-23  92.8766\n2018-02-28  92.17\n2018-03-01  93.0699\n2018-03-04  90.848\n2018-03-07  91.1767\n2018-03-10  92.7853\n2018-03-14  94.4689\n2018-03-15  93.7799\n2018-03-17  92.8502\n2018-03-18  93.6786", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  99.5933   98.951    99.9214   99.0931\n2017-07-13  101.0971  98.3843   99.8834   98.5309\n2017-07-14  101.0245  98.0651   99.5157   98.1121\n2017-07-15  100.8491  99.3447   99.3279   97.1894\n2017-07-16  101.6872  98.2223   100.7209  98.2745\n2017-07-17  101.7541  98.3294   100.5286  98.9536\n2017-07-18  102.5788  98.8444   101.55    100.3513\n2017-07-19  102.7627  99.5383   100.6503  100.5384\n2017-07-20  100.973   98.1226   99.987    100.0601\n\u22ee\n2018-03-11  93.4009   123.2644  77.0039   90.3083\n2018-03-12  94.7473   123.016   77.756    90.7651\n2018-03-13  94.5947   122.5674  76.8453   91.1004\n2018-03-14  96.2284   123.6397  76.4615   90.6903\n2018-03-15  94.9929   122.993   76.2156   91.5963\n2018-03-16  93.5398   124.4046  75.5307   92.2541\n2018-03-17  93.9543   124.3855  73.9306   91.774\n2018-03-18  93.3796   125.335   73.1968   93.4356\n2018-03-19  92.7662   125.1199  73.1718   93.2506\n2018-03-20  93.8887   126.4285  72.1786   94.3489\n\njulia  X[1:10, :]\nIndex       A         B        C         D\n2017-07-12  99.5933   98.951   99.9214   99.0931\n2017-07-13  101.0971  98.3843  99.8834   98.5309\n2017-07-14  101.0245  98.0651  99.5157   98.1121\n2017-07-15  100.8491  99.3447  99.3279   97.1894\n2017-07-16  101.6872  98.2223  100.7209  98.2745\n2017-07-17  101.7541  98.3294  100.5286  98.9536\n2017-07-18  102.5788  98.8444  101.55    100.3513\n2017-07-19  102.7627  99.5383  100.6503  100.5384\n2017-07-20  100.973   98.1226  99.987    100.0601\n2017-07-21  99.8616   97.9726  99.7178   99.803\n\njulia  X[end-100:end, 2:3]\nIndex       B         C\n2017-12-10  117.2374  88.188\n2017-12-11  117.2505  88.0852\n2017-12-12  118.0058  88.3414\n2017-12-13  117.5444  88.4167\n2017-12-14  117.4204  86.7043\n2017-12-15  118.6302  85.9991\n2017-12-16  116.8873  86.4443\n2017-12-17  116.8154  84.0378\n2017-12-18  115.0102  83.6429\n\u22ee\n2018-03-11  123.2644  77.0039\n2018-03-12  123.016   77.756\n2018-03-13  122.5674  76.8453\n2018-03-14  123.6397  76.4615\n2018-03-15  122.993   76.2156\n2018-03-16  124.4046  75.5307\n2018-03-17  124.3855  73.9306\n2018-03-18  125.335   73.1968\n2018-03-19  125.1199  73.1718\n2018-03-20  126.4285  72.1786\n\njulia  X[end, 2:end]\nIndex       B         C        D\n2018-03-20  126.4285  72.1786  94.3489", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C        D\n2017-07-12  98.5611   99.144    98.2568  99.9961\n2017-07-13  99.2122   100.9451  98.1186  99.528\n2017-07-14  100.513   102.1169  98.5462  100.1639\n2017-07-15  99.8399   100.8921  98.6624  98.6093\n2017-07-16  99.6123   99.944    99.4413  100.2809\n2017-07-17  99.2834   100.3431  98.2072  99.556\n2017-07-18  99.9022   101.1835  98.5634  99.4196\n2017-07-19  99.5486   101.3754  98.4611  99.6646\n2017-07-20  101.0185  102.1056  97.6745  97.6263\n\u22ee\n2018-03-11  88.4814   105.5041  87.1707  99.9108\n2018-03-12  88.7859   106.4773  85.7824  99.0846\n2018-03-13  87.0961   104.7926  83.8266  98.4893\n2018-03-14  88.0856   105.7782  83.6606  100.3233\n2018-03-15  87.8742   107.9819  83.0961  101.7367\n2018-03-16  86.7755   108.8687  83.505   101.1715\n2018-03-17  85.6303   107.5014  84.2173  100.25\n2018-03-18  87.2911   107.5287  83.0658  99.755\n2018-03-19  86.0403   108.5258  83.8421  99.4078\n2018-03-20  85.4855   109.7656  84.9675  98.301\n\njulia  X[:, :A]\nIndex       A\n2017-07-12  98.5611\n2017-07-13  99.2122\n2017-07-14  100.513\n2017-07-15  99.8399\n2017-07-16  99.6123\n2017-07-17  99.2834\n2017-07-18  99.9022\n2017-07-19  99.5486\n2017-07-20  101.0185\n\u22ee\n2018-03-11  88.4814\n2018-03-12  88.7859\n2018-03-13  87.0961\n2018-03-14  88.0856\n2018-03-15  87.8742\n2018-03-16  86.7755\n2018-03-17  85.6303\n2018-03-18  87.2911\n2018-03-19  86.0403\n2018-03-20  85.4855\n\njulia  X[:, [:B, :D]]\nIndex       B         D\n2017-07-12  99.144    99.9961\n2017-07-13  100.9451  99.528\n2017-07-14  102.1169  100.1639\n2017-07-15  100.8921  98.6093\n2017-07-16  99.944    100.2809\n2017-07-17  100.3431  99.556\n2017-07-18  101.1835  99.4196\n2017-07-19  101.3754  99.6646\n2017-07-20  102.1056  97.6263\n\u22ee\n2018-03-11  105.5041  99.9108\n2018-03-12  106.4773  99.0846\n2018-03-13  104.7926  98.4893\n2018-03-14  105.7782  100.3233\n2018-03-15  107.9819  101.7367\n2018-03-16  108.8687  101.1715\n2018-03-17  107.5014  100.25\n2018-03-18  107.5287  99.755\n2018-03-19  108.5258  99.4078\n2018-03-20  109.7656  98.301", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C         D\n2016-01-01  100.2641  100.7771  101.154   100.3461\n2016-01-02  98.627    102.804   101.1935  100.3161\n2016-01-03  98.7008   102.1026  102.2856  99.6111\n2016-01-04  98.6937   102.8657  102.5442  100.5954\n2016-01-05  98.4004   103.6749  103.6086  100.0815\n2016-01-06  98.9588   104.5892  104.9362  101.0069\n2016-01-07  97.8384   103.7255  104.1685  101.1364\n2016-01-08  98.4716   105.1196  105.4461  101.5513\n2016-01-09  97.3477   105.162   104.0336  100.1508\n\u22ee\n2017-12-22  88.3967   84.01     133.7998  108.2526\n2017-12-23  89.0637   84.8438   132.0998  107.2905\n2017-12-24  89.1637   85.0679   133.2903  107.7136\n2017-12-25  90.3636   86.0392   133.6633  107.7301\n2017-12-26  90.244    85.9196   134.8193  105.3148\n2017-12-27  91.1653   85.672    135.2627  103.9506\n2017-12-28  90.5091   83.6033   133.655   103.2895\n2017-12-29  91.0846   85.3898   134.4963  103.6933\n2017-12-30  89.766    85.4533   134.448   101.9001\n2017-12-31  88.7685   85.86     132.6604  101.8577\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A        B        C         D\n2017-07-01  93.4551  97.0018  109.8969  114.0117\n\njulia  X[ 2016 ]  # whole year\nIndex       A         B         C         D\n2016-01-01  100.2641  100.7771  101.154   100.3461\n2016-01-02  98.627    102.804   101.1935  100.3161\n2016-01-03  98.7008   102.1026  102.2856  99.6111\n2016-01-04  98.6937   102.8657  102.5442  100.5954\n2016-01-05  98.4004   103.6749  103.6086  100.0815\n2016-01-06  98.9588   104.5892  104.9362  101.0069\n2016-01-07  97.8384   103.7255  104.1685  101.1364\n2016-01-08  98.4716   105.1196  105.4461  101.5513\n2016-01-09  97.3477   105.162   104.0336  100.1508\n\u22ee\n2016-12-22  89.905    77.807    102.7148  124.4251\n2016-12-23  90.4722   77.1583   104.1698  124.0593\n2016-12-24  89.7335   77.6455   105.1206  124.22\n2016-12-25  90.7435   79.0343   105.2291  124.1315\n2016-12-26  90.8116   80.6736   105.0538  126.1786\n2016-12-27  91.1783   80.7395   104.1103  126.96\n2016-12-28  90.6052   80.5246   103.372   127.2661\n2016-12-29  90.4942   80.7227   102.2175  127.7155\n2016-12-30  90.1775   81.3364   104.23    128.6117\n2016-12-31  91.6507   79.372    103.1286  127.3411\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.004\n2017-07-13  0.6114\n2017-07-14  0.4631\n2017-07-15  0.0956\n2017-07-16  0.4476\n2017-07-17  0.1228\n2017-07-18  0.7101\n2017-07-19  0.5529\n2017-07-20  0.7718\n\u22ee\n2018-03-11  0.3941\n2018-03-12  0.3327\n2018-03-13  0.8715\n2018-03-14  0.9554\n2018-03-15  0.1274\n2018-03-16  0.9438\n2018-03-17  0.5609\n2018-03-18  0.6302\n2018-03-19  0.082\n2018-03-20  0.0191\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.8238\n2017-01-13  0.2915\n2017-01-14  0.3234\n2017-01-15  0.1008\n2017-01-16  0.6261\n2017-01-17  0.161\n2017-01-18  0.3167\n2017-01-19  0.93\n2017-01-20  0.6602\n\u22ee\n2017-09-11  0.6201\n2017-09-12  0.8824\n2017-09-13  0.9345\n2017-09-14  0.4483\n2017-09-15  0.4262\n2017-09-16  0.9813\n2017-09-17  0.4556\n2017-09-18  0.1321\n2017-09-19  0.3281\n2017-09-20  0.2686\n\njulia\n [x y]\nIndex       A       A\n2017-01-12  NaN     0.8238\n2017-01-13  NaN     0.2915\n2017-01-14  NaN     0.3234\n2017-01-15  NaN     0.1008\n2017-01-16  NaN     0.6261\n2017-01-17  NaN     0.161\n2017-01-18  NaN     0.3167\n2017-01-19  NaN     0.93\n2017-01-20  NaN     0.6602\n\u22ee\n2018-03-11  0.3941  NaN\n2018-03-12  0.3327  NaN\n2018-03-13  0.8715  NaN\n2018-03-14  0.9554  NaN\n2018-03-15  0.1274  NaN\n2018-03-16  0.9438  NaN\n2018-03-17  0.5609  NaN\n2018-03-18  0.6302  NaN\n2018-03-19  0.082   NaN\n2018-03-20  0.0191  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.5566\n2017-07-13  0.869\n2017-07-14  0.2583\n2017-07-15  0.6162\n2017-07-16  0.4089\n2017-07-17  0.3965\n2017-07-18  0.937\n2017-07-19  0.0356\n2017-07-20  0.1847\n\u22ee\n2018-03-11  0.808\n2018-03-12  0.5227\n2018-03-13  0.892\n2018-03-14  0.5406\n2018-03-15  0.9218\n2018-03-16  0.4272\n2018-03-17  0.7997\n2018-03-18  0.6835\n2018-03-19  0.3378\n2018-03-20  0.0756\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.6198\n2017-01-13  0.8867\n2017-01-14  0.0857\n2017-01-15  0.3551\n2017-01-16  0.7802\n2017-01-17  0.947\n2017-01-18  0.5233\n2017-01-19  0.8557\n2017-01-20  0.7858\n\u22ee\n2017-09-11  0.8497\n2017-09-12  0.9898\n2017-09-13  0.6044\n2017-09-14  0.937\n2017-09-15  0.3271\n2017-09-16  0.9256\n2017-09-17  0.8821\n2017-09-18  0.1651\n2017-09-19  0.7112\n2017-09-20  0.9235\n\njulia\n ijoin(x, y)\nIndex       A       A\n2017-07-12  0.5566  0.2183\n2017-07-13  0.869   0.6183\n2017-07-14  0.2583  0.9601\n2017-07-15  0.6162  0.8341\n2017-07-16  0.4089  0.2221\n2017-07-17  0.3965  0.2655\n2017-07-18  0.937   0.8598\n2017-07-19  0.0356  0.3363\n2017-07-20  0.1847  0.9814\n\u22ee\n2017-09-11  0.383   0.8497\n2017-09-12  0.4377  0.9898\n2017-09-13  0.1185  0.6044\n2017-09-14  0.9457  0.937\n2017-09-15  0.0141  0.3271\n2017-09-16  0.6422  0.9256\n2017-09-17  0.747   0.8821\n2017-09-18  0.9715  0.1651\n2017-09-19  0.3857  0.7112\n2017-09-20  0.4357  0.9235\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.3623\n2017-07-13  0.3182\n2017-07-14  0.7219\n2017-07-15  0.098\n2017-07-16  0.9916\n2017-07-17  0.4317\n2017-07-18  0.4039\n2017-07-19  0.9698\n2017-07-20  0.8322\n\u22ee\n2018-03-11  0.4681\n2018-03-12  0.4218\n2018-03-13  0.1067\n2018-03-14  0.4988\n2018-03-15  0.9584\n2018-03-16  0.632\n2018-03-17  0.1854\n2018-03-18  0.713\n2018-03-19  0.1587\n2018-03-20  0.5115\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.3424\n2017-01-13  0.9406\n2017-01-14  0.4028\n2017-01-15  0.4879\n2017-01-16  0.204\n2017-01-17  0.3017\n2017-01-18  0.3555\n2017-01-19  0.6642\n2017-01-20  0.921\n\u22ee\n2017-09-11  0.5939\n2017-09-12  0.1404\n2017-09-13  0.3799\n2017-09-14  0.1537\n2017-09-15  0.7482\n2017-09-16  0.9534\n2017-09-17  0.5534\n2017-09-18  0.3426\n2017-09-19  0.8022\n2017-09-20  0.4946\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-07-12  0.3623  0.7181\n2017-07-13  0.3182  0.4935\n2017-07-14  0.7219  0.5052\n2017-07-15  0.098   0.0877\n2017-07-16  0.9916  0.3476\n2017-07-17  0.4317  0.3881\n2017-07-18  0.4039  0.267\n2017-07-19  0.9698  0.4013\n2017-07-20  0.8322  0.0474\n\u22ee\n2018-03-11  0.4681  NaN\n2018-03-12  0.4218  NaN\n2018-03-13  0.1067  NaN\n2018-03-14  0.4988  NaN\n2018-03-15  0.9584  NaN\n2018-03-16  0.632   NaN\n2018-03-17  0.1854  NaN\n2018-03-18  0.713   NaN\n2018-03-19  0.1587  NaN\n2018-03-20  0.5115  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-01-12  NaN     0.3424\n2017-01-13  NaN     0.9406\n2017-01-14  NaN     0.4028\n2017-01-15  NaN     0.4879\n2017-01-16  NaN     0.204\n2017-01-17  NaN     0.3017\n2017-01-18  NaN     0.3555\n2017-01-19  NaN     0.6642\n2017-01-20  NaN     0.921\n\u22ee\n2017-09-11  0.8323  0.4748\n2017-09-12  0.4476  0.9662\n2017-09-13  0.0543  0.8888\n2017-09-14  0.3555  0.6031\n2017-09-15  0.499   0.0959\n2017-09-16  0.6348  0.5939\n2017-09-17  0.5125  0.1404\n2017-09-18  0.1765  0.3799\n2017-09-19  0.603   0.1537\n2017-09-20  0.9472  0.7482", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.004\n2017-07-13  0.6114\n2017-07-14  0.4631\n2017-07-15  0.0956\n2017-07-16  0.4476\n2017-07-17  0.1228\n2017-07-18  0.7101\n2017-07-19  0.5529\n2017-07-20  0.7718\n\u22ee\n2018-03-11  0.3941\n2018-03-12  0.3327\n2018-03-13  0.8715\n2018-03-14  0.9554\n2018-03-15  0.1274\n2018-03-16  0.9438\n2018-03-17  0.5609\n2018-03-18  0.6302\n2018-03-19  0.082\n2018-03-20  0.0191\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.8238\n2017-01-13  0.2915\n2017-01-14  0.3234\n2017-01-15  0.1008\n2017-01-16  0.6261\n2017-01-17  0.161\n2017-01-18  0.3167\n2017-01-19  0.93\n2017-01-20  0.6602\n\u22ee\n2017-09-11  0.6201\n2017-09-12  0.8824\n2017-09-13  0.9345\n2017-09-14  0.4483\n2017-09-15  0.4262\n2017-09-16  0.9813\n2017-09-17  0.4556\n2017-09-18  0.1321\n2017-09-19  0.3281\n2017-09-20  0.2686\n\njulia  [x y]\nIndex       A       A\n2017-01-12  NaN     0.8238\n2017-01-13  NaN     0.2915\n2017-01-14  NaN     0.3234\n2017-01-15  NaN     0.1008\n2017-01-16  NaN     0.6261\n2017-01-17  NaN     0.161\n2017-01-18  NaN     0.3167\n2017-01-19  NaN     0.93\n2017-01-20  NaN     0.6602\n\u22ee\n2018-03-11  0.3941  NaN\n2018-03-12  0.3327  NaN\n2018-03-13  0.8715  NaN\n2018-03-14  0.9554  NaN\n2018-03-15  0.1274  NaN\n2018-03-16  0.9438  NaN\n2018-03-17  0.5609  NaN\n2018-03-18  0.6302  NaN\n2018-03-19  0.082   NaN\n2018-03-20  0.0191  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.5566\n2017-07-13  0.869\n2017-07-14  0.2583\n2017-07-15  0.6162\n2017-07-16  0.4089\n2017-07-17  0.3965\n2017-07-18  0.937\n2017-07-19  0.0356\n2017-07-20  0.1847\n\u22ee\n2018-03-11  0.808\n2018-03-12  0.5227\n2018-03-13  0.892\n2018-03-14  0.5406\n2018-03-15  0.9218\n2018-03-16  0.4272\n2018-03-17  0.7997\n2018-03-18  0.6835\n2018-03-19  0.3378\n2018-03-20  0.0756\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.6198\n2017-01-13  0.8867\n2017-01-14  0.0857\n2017-01-15  0.3551\n2017-01-16  0.7802\n2017-01-17  0.947\n2017-01-18  0.5233\n2017-01-19  0.8557\n2017-01-20  0.7858\n\u22ee\n2017-09-11  0.8497\n2017-09-12  0.9898\n2017-09-13  0.6044\n2017-09-14  0.937\n2017-09-15  0.3271\n2017-09-16  0.9256\n2017-09-17  0.8821\n2017-09-18  0.1651\n2017-09-19  0.7112\n2017-09-20  0.9235\n\njulia  ijoin(x, y)\nIndex       A       A\n2017-07-12  0.5566  0.2183\n2017-07-13  0.869   0.6183\n2017-07-14  0.2583  0.9601\n2017-07-15  0.6162  0.8341\n2017-07-16  0.4089  0.2221\n2017-07-17  0.3965  0.2655\n2017-07-18  0.937   0.8598\n2017-07-19  0.0356  0.3363\n2017-07-20  0.1847  0.9814\n\u22ee\n2017-09-11  0.383   0.8497\n2017-09-12  0.4377  0.9898\n2017-09-13  0.1185  0.6044\n2017-09-14  0.9457  0.937\n2017-09-15  0.0141  0.3271\n2017-09-16  0.6422  0.9256\n2017-09-17  0.747   0.8821\n2017-09-18  0.9715  0.1651\n2017-09-19  0.3857  0.7112\n2017-09-20  0.4357  0.9235", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.3623\n2017-07-13  0.3182\n2017-07-14  0.7219\n2017-07-15  0.098\n2017-07-16  0.9916\n2017-07-17  0.4317\n2017-07-18  0.4039\n2017-07-19  0.9698\n2017-07-20  0.8322\n\u22ee\n2018-03-11  0.4681\n2018-03-12  0.4218\n2018-03-13  0.1067\n2018-03-14  0.4988\n2018-03-15  0.9584\n2018-03-16  0.632\n2018-03-17  0.1854\n2018-03-18  0.713\n2018-03-19  0.1587\n2018-03-20  0.5115\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.3424\n2017-01-13  0.9406\n2017-01-14  0.4028\n2017-01-15  0.4879\n2017-01-16  0.204\n2017-01-17  0.3017\n2017-01-18  0.3555\n2017-01-19  0.6642\n2017-01-20  0.921\n\u22ee\n2017-09-11  0.5939\n2017-09-12  0.1404\n2017-09-13  0.3799\n2017-09-14  0.1537\n2017-09-15  0.7482\n2017-09-16  0.9534\n2017-09-17  0.5534\n2017-09-18  0.3426\n2017-09-19  0.8022\n2017-09-20  0.4946\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-07-12  0.3623  0.7181\n2017-07-13  0.3182  0.4935\n2017-07-14  0.7219  0.5052\n2017-07-15  0.098   0.0877\n2017-07-16  0.9916  0.3476\n2017-07-17  0.4317  0.3881\n2017-07-18  0.4039  0.267\n2017-07-19  0.9698  0.4013\n2017-07-20  0.8322  0.0474\n\u22ee\n2018-03-11  0.4681  NaN\n2018-03-12  0.4218  NaN\n2018-03-13  0.1067  NaN\n2018-03-14  0.4988  NaN\n2018-03-15  0.9584  NaN\n2018-03-16  0.632   NaN\n2018-03-17  0.1854  NaN\n2018-03-18  0.713   NaN\n2018-03-19  0.1587  NaN\n2018-03-20  0.5115  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-01-12  NaN     0.3424\n2017-01-13  NaN     0.9406\n2017-01-14  NaN     0.4028\n2017-01-15  NaN     0.4879\n2017-01-16  NaN     0.204\n2017-01-17  NaN     0.3017\n2017-01-18  NaN     0.3555\n2017-01-19  NaN     0.6642\n2017-01-20  NaN     0.921\n\u22ee\n2017-09-11  0.8323  0.4748\n2017-09-12  0.4476  0.9662\n2017-09-13  0.0543  0.8888\n2017-09-14  0.3555  0.6031\n2017-09-15  0.499   0.0959\n2017-09-16  0.6348  0.5939\n2017-09-17  0.5125  0.1404\n2017-09-18  0.1765  0.3799\n2017-09-19  0.603   0.1537\n2017-09-20  0.9472  0.7482", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}