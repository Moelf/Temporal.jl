{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C        D\n2017-11-04  101.2831  100.9859  99.7802  99.1\n2017-11-05  99.2744   101.6946  98.6217  98.6974\n2017-11-06  98.2728   101.1912  98.5715  98.1637\n2017-11-07  99.9237   100.4588  96.5547  97.7752\n2017-11-08  99.2271   101.7086  96.6787  97.8371\n2017-11-09  98.7764   102.9339  96.6183  98.6817\n2017-11-10  97.328    102.6283  95.0671  97.5466\n2017-11-11  96.9313   101.422   94.0238  97.4532\n2017-11-12  95.568    100.7025  95.1161  99.0942\n\u22ee\n2018-07-04  98.549    115.3966  61.4727  104.8195\n2018-07-05  100.5926  116.8586  60.0502  107.4158\n2018-07-06  99.3473   117.5676  59.5518  106.554\n2018-07-07  100.1089  117.6912  60.4702  106.5754\n2018-07-08  98.8034   119.6786  60.6999  108.8203\n2018-07-09  98.0183   119.3681  59.7947  108.0197\n2018-07-10  98.2289   117.2159  59.7074  107.6152\n2018-07-11  99.8487   119.2119  60.6925  106.7276\n2018-07-12  99.6512   119.3072  60.2889  106.4742\n2018-07-13  98.4612   121.0446  61.9109  106.3254\n\njulia\n X[1]\nIndex       A         B         C        D\n2017-11-04  101.2831  100.9859  99.7802  99.1\n\njulia\n X[1, :]\nIndex       A         B         C        D\n2017-11-04  101.2831  100.9859  99.7802  99.1\n\njulia\n X[:, 1]\nIndex       A\n2017-11-04  101.2831\n2017-11-05  99.2744\n2017-11-06  98.2728\n2017-11-07  99.9237\n2017-11-08  99.2271\n2017-11-09  98.7764\n2017-11-10  97.328\n2017-11-11  96.9313\n2017-11-12  95.568\n\u22ee\n2018-07-04  98.549\n2018-07-05  100.5926\n2018-07-06  99.3473\n2018-07-07  100.1089\n2018-07-08  98.8034\n2018-07-09  98.0183\n2018-07-10  98.2289\n2018-07-11  99.8487\n2018-07-12  99.6512\n2018-07-13  98.4612\n\njulia\n X[1, 1]\nIndex       A\n2017-11-04  101.2831\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A        B        C         D\n2017-11-04  98.9815  99.1087  100.1163  99.2148\n2017-11-05  99.7544  98.5265  101.2456  100.4211\n2017-11-06  99.4085  97.2119  100.2836  99.9737\n2017-11-07  99.9642  94.4763  99.8713   100.8338\n2017-11-08  99.5815  95.5722  100.8444  99.7428\n2017-11-09  99.4959  97.0157  99.278    101.0712\n2017-11-10  99.4552  97.5009  99.072    101.2053\n2017-11-11  98.006   96.7053  97.2739   101.3806\n2017-11-12  97.699   95.7459  95.8195   103.6139\n\u22ee\n2018-07-04  85.5075  95.7037  113.775   102.5596\n2018-07-05  87.4775  95.7324  116.2379  102.4351\n2018-07-06  87.5724  97.0363  116.6224  102.9324\n2018-07-07  86.9954  97.9302  116.7908  102.9553\n2018-07-08  86.9148  95.7863  116.6232  103.2781\n2018-07-09  86.4521  95.2461  116.39    102.8131\n2018-07-10  87.1237  95.6086  116.1888  103.6829\n2018-07-11  86.9142  94.9959  118.7372  103.7393\n2018-07-12  85.0549  95.0846  119.9995  105.8842\n2018-07-13  85.0389  93.5923  119.9442  104.8664\n\njulia\n X[trues(size(X,1)), :]\nIndex       A        B        C         D\n2017-11-04  98.9815  99.1087  100.1163  99.2148\n2017-11-05  99.7544  98.5265  101.2456  100.4211\n2017-11-06  99.4085  97.2119  100.2836  99.9737\n2017-11-07  99.9642  94.4763  99.8713   100.8338\n2017-11-08  99.5815  95.5722  100.8444  99.7428\n2017-11-09  99.4959  97.0157  99.278    101.0712\n2017-11-10  99.4552  97.5009  99.072    101.2053\n2017-11-11  98.006   96.7053  97.2739   101.3806\n2017-11-12  97.699   95.7459  95.8195   103.6139\n\u22ee\n2018-07-04  85.5075  95.7037  113.775   102.5596\n2018-07-05  87.4775  95.7324  116.2379  102.4351\n2018-07-06  87.5724  97.0363  116.6224  102.9324\n2018-07-07  86.9954  97.9302  116.7908  102.9553\n2018-07-08  86.9148  95.7863  116.6232  103.2781\n2018-07-09  86.4521  95.2461  116.39    102.8131\n2018-07-10  87.1237  95.6086  116.1888  103.6829\n2018-07-11  86.9142  94.9959  118.7372  103.7393\n2018-07-12  85.0549  95.0846  119.9995  105.8842\n2018-07-13  85.0389  93.5923  119.9442  104.8664\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-04  98.9815\n2017-11-06  99.4085\n2017-11-07  99.9642\n2017-11-08  99.5815\n2017-11-09  99.4959\n2017-11-11  98.006\n2017-11-17  93.8283\n2017-11-21  93.2414\n2017-11-25  93.1199\n\u22ee\n2018-06-09  81.2066\n2018-06-12  82.0984\n2018-06-13  80.3269\n2018-06-18  79.0721\n2018-06-27  82.431\n2018-07-04  85.5075\n2018-07-06  87.5724\n2018-07-10  87.1237\n2018-07-12  85.0549\n2018-07-13  85.0389\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-04  98.9815\n2017-11-05  99.7544\n2017-11-08  99.5815\n2017-11-09  99.4959\n2017-11-11  98.006\n2017-11-13  97.9753\n2017-11-14  97.0631\n2017-11-15  95.6103\n2017-11-16  95.3539\n\u22ee\n2018-06-29  83.5524\n2018-06-30  85.1935\n2018-07-02  86.1416\n2018-07-04  85.5075\n2018-07-05  87.4775\n2018-07-07  86.9954\n2018-07-08  86.9148\n2018-07-09  86.4521\n2018-07-10  87.1237\n2018-07-12  85.0549\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-04  101.4176  100.8984  98.6865   99.9248\n2017-11-05  101.0342  101.7128  100.0395  100.7799\n2017-11-06  101.3841  102.5175  100.0351  101.4887\n2017-11-07  99.044    104.269   98.1951   100.7474\n2017-11-08  96.8746   103.5173  97.7879   99.2384\n2017-11-09  97.5308   103.409   96.2847   97.6757\n2017-11-10  97.394    104.6988  95.9068   97.4461\n2017-11-11  99.2197   103.8311  94.8759   95.3684\n2017-11-12  100.4448  104.1799  95.1205   95.4597\n\u22ee\n2018-07-04  113.3497  90.3168   93.4725   90.7042\n2018-07-05  113.1485  90.6301   93.976    88.6014\n2018-07-06  112.6063  90.2372   91.8576   88.4513\n2018-07-07  111.7271  90.9908   90.7791   87.5805\n2018-07-08  112.8005  90.2416   89.4599   89.3718\n2018-07-09  113.4216  88.7114   89.4782   88.833\n2018-07-10  110.919   87.4319   88.9589   89.9667\n2018-07-11  111.2948  86.5972   90.0673   88.6275\n2018-07-12  111.6311  87.6733   91.1849   87.5594\n2018-07-13  112.2957  87.3611   89.6671   86.8727\n\njulia\n X[1:10, :]\nIndex       A         B         C         D\n2017-11-04  101.4176  100.8984  98.6865   99.9248\n2017-11-05  101.0342  101.7128  100.0395  100.7799\n2017-11-06  101.3841  102.5175  100.0351  101.4887\n2017-11-07  99.044    104.269   98.1951   100.7474\n2017-11-08  96.8746   103.5173  97.7879   99.2384\n2017-11-09  97.5308   103.409   96.2847   97.6757\n2017-11-10  97.394    104.6988  95.9068   97.4461\n2017-11-11  99.2197   103.8311  94.8759   95.3684\n2017-11-12  100.4448  104.1799  95.1205   95.4597\n2017-11-13  101.8878  103.2967  97.1992   94.7144\n\njulia\n X[end-100:end, 2:3]\nIndex       B        C\n2018-04-04  93.3634  94.0605\n2018-04-05  94.0339  94.9161\n2018-04-06  94.7819  95.159\n2018-04-07  93.7305  93.74\n2018-04-08  93.8366  92.6348\n2018-04-09  92.4191  94.5014\n2018-04-10  93.8048  94.9113\n2018-04-11  93.2927  94.1942\n2018-04-12  94.3351  94.4719\n\u22ee\n2018-07-04  90.3168  93.4725\n2018-07-05  90.6301  93.976\n2018-07-06  90.2372  91.8576\n2018-07-07  90.9908  90.7791\n2018-07-08  90.2416  89.4599\n2018-07-09  88.7114  89.4782\n2018-07-10  87.4319  88.9589\n2018-07-11  86.5972  90.0673\n2018-07-12  87.6733  91.1849\n2018-07-13  87.3611  89.6671\n\njulia\n X[end, 2:end]\nIndex       B        C        D\n2018-07-13  87.3611  89.6671  86.8727\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-04  99.5701   100.5108  100.5942  99.6221\n2017-11-05  99.7134   99.8559   101.1113  98.3867\n2017-11-06  100.1203  100.123   101.799   97.8396\n2017-11-07  101.2657  99.3291   99.4683   97.28\n2017-11-08  100.2243  99.5029   98.2439   96.2344\n2017-11-09  99.7058   99.22     98.3061   97.4298\n2017-11-10  100.3035  100.5622  97.7386   97.4751\n2017-11-11  99.8422   100.5777  97.1179   97.4259\n2017-11-12  99.8189   100.6489  96.466    97.0249\n\u22ee\n2018-07-04  102.0308  102.6769  82.9229   103.7831\n2018-07-05  102.5756  101.614   84.6704   102.2033\n2018-07-06  103.0035  102.6363  84.3585   101.7007\n2018-07-07  103.1361  102.8577  84.7662   100.4981\n2018-07-08  102.1406  103.4968  86.7713   98.6112\n2018-07-09  102.23    104.4431  86.3527   99.3287\n2018-07-10  102.6899  101.6902  88.136    100.7698\n2018-07-11  101.8269  100.3236  88.0379   100.7635\n2018-07-12  102.547   98.8981   89.0145   101.0972\n2018-07-13  102.2987  99.1501   89.5968   99.743\n\njulia\n X[:, :A]\nIndex       A\n2017-11-04  99.5701\n2017-11-05  99.7134\n2017-11-06  100.1203\n2017-11-07  101.2657\n2017-11-08  100.2243\n2017-11-09  99.7058\n2017-11-10  100.3035\n2017-11-11  99.8422\n2017-11-12  99.8189\n\u22ee\n2018-07-04  102.0308\n2018-07-05  102.5756\n2018-07-06  103.0035\n2018-07-07  103.1361\n2018-07-08  102.1406\n2018-07-09  102.23\n2018-07-10  102.6899\n2018-07-11  101.8269\n2018-07-12  102.547\n2018-07-13  102.2987\n\njulia\n X[:, [:B, :D]]\nIndex       B         D\n2017-11-04  100.5108  99.6221\n2017-11-05  99.8559   98.3867\n2017-11-06  100.123   97.8396\n2017-11-07  99.3291   97.28\n2017-11-08  99.5029   96.2344\n2017-11-09  99.22     97.4298\n2017-11-10  100.5622  97.4751\n2017-11-11  100.5777  97.4259\n2017-11-12  100.6489  97.0249\n\u22ee\n2018-07-04  102.6769  103.7831\n2018-07-05  101.614   102.2033\n2018-07-06  102.6363  101.7007\n2018-07-07  102.8577  100.4981\n2018-07-08  103.4968  98.6112\n2018-07-09  104.4431  99.3287\n2018-07-10  101.6902  100.7698\n2018-07-11  100.3236  100.7635\n2018-07-12  98.8981   101.0972\n2018-07-13  99.1501   99.743\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C        D\n2016-01-01  100.7144  100.3073  99.832   100.3785\n2016-01-02  100.3326  99.5207   98.7058  100.6575\n2016-01-03  99.0876   99.4141   99.6393  101.3032\n2016-01-04  99.2193   100.0304  97.9264  102.0482\n2016-01-05  99.3481   99.0644   97.036   101.0124\n2016-01-06  100.2078  98.6327   97.0299  99.7115\n2016-01-07  100.9788  97.8335   97.5464  101.2277\n2016-01-08  99.8931   98.4285   97.2258  103.1656\n2016-01-09  99.69     98.8689   97.4245  101.767\n\u22ee\n2017-12-22  92.92     135.5882  56.0759  84.8765\n2017-12-23  93.4986   137.0883  56.3357  84.8383\n2017-12-24  94.365    137.0298  54.7877  86.0703\n2017-12-25  94.8627   136.3425  54.8763  86.0762\n2017-12-26  94.1039   136.3819  55.0502  86.0632\n2017-12-27  94.1284   137.1583  55.1841  85.5967\n2017-12-28  95.0247   136.9263  55.0158  84.0896\n2017-12-29  96.1618   136.3748  56.5848  83.5206\n2017-12-30  96.8875   135.0173  56.4961  83.7961\n2017-12-31  96.7428   133.2459  56.8513  83.6821\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A        B         C        D\n2017-07-01  89.7392  128.7697  75.8089  92.9731\n\njulia\n X[\n2016\n]  # whole year\nIndex       A         B         C        D\n2016-01-01  100.7144  100.3073  99.832   100.3785\n2016-01-02  100.3326  99.5207   98.7058  100.6575\n2016-01-03  99.0876   99.4141   99.6393  101.3032\n2016-01-04  99.2193   100.0304  97.9264  102.0482\n2016-01-05  99.3481   99.0644   97.036   101.0124\n2016-01-06  100.2078  98.6327   97.0299  99.7115\n2016-01-07  100.9788  97.8335   97.5464  101.2277\n2016-01-08  99.8931   98.4285   97.2258  103.1656\n2016-01-09  99.69     98.8689   97.4245  101.767\n\u22ee\n2016-12-22  103.2635  119.8547  75.8126  86.5894\n2016-12-23  101.8068  120.5569  76.4127  85.6129\n2016-12-24  101.3228  120.3262  75.7326  84.2511\n2016-12-25  99.701    119.5023  74.8363  84.1865\n2016-12-26  101.0168  117.1698  75.6396  83.8221\n2016-12-27  100.1048  117.7249  76.1016  83.719\n2016-12-28  100.9911  118.2906  74.237   84.5835\n2016-12-29  100.8122  118.8292  74.3611  83.955\n2016-12-30  100.6444  119.5945  72.0751  81.9275\n2016-12-31  100.5582  120.8254  71.3959  81.5253\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C        D\n2017-11-04  101.2831  100.9859  99.7802  99.1\n2017-11-05  99.2744   101.6946  98.6217  98.6974\n2017-11-06  98.2728   101.1912  98.5715  98.1637\n2017-11-07  99.9237   100.4588  96.5547  97.7752\n2017-11-08  99.2271   101.7086  96.6787  97.8371\n2017-11-09  98.7764   102.9339  96.6183  98.6817\n2017-11-10  97.328    102.6283  95.0671  97.5466\n2017-11-11  96.9313   101.422   94.0238  97.4532\n2017-11-12  95.568    100.7025  95.1161  99.0942\n\u22ee\n2018-07-04  98.549    115.3966  61.4727  104.8195\n2018-07-05  100.5926  116.8586  60.0502  107.4158\n2018-07-06  99.3473   117.5676  59.5518  106.554\n2018-07-07  100.1089  117.6912  60.4702  106.5754\n2018-07-08  98.8034   119.6786  60.6999  108.8203\n2018-07-09  98.0183   119.3681  59.7947  108.0197\n2018-07-10  98.2289   117.2159  59.7074  107.6152\n2018-07-11  99.8487   119.2119  60.6925  106.7276\n2018-07-12  99.6512   119.3072  60.2889  106.4742\n2018-07-13  98.4612   121.0446  61.9109  106.3254\n\njulia  X[1]\nIndex       A         B         C        D\n2017-11-04  101.2831  100.9859  99.7802  99.1\n\njulia  X[1, :]\nIndex       A         B         C        D\n2017-11-04  101.2831  100.9859  99.7802  99.1\n\njulia  X[:, 1]\nIndex       A\n2017-11-04  101.2831\n2017-11-05  99.2744\n2017-11-06  98.2728\n2017-11-07  99.9237\n2017-11-08  99.2271\n2017-11-09  98.7764\n2017-11-10  97.328\n2017-11-11  96.9313\n2017-11-12  95.568\n\u22ee\n2018-07-04  98.549\n2018-07-05  100.5926\n2018-07-06  99.3473\n2018-07-07  100.1089\n2018-07-08  98.8034\n2018-07-09  98.0183\n2018-07-10  98.2289\n2018-07-11  99.8487\n2018-07-12  99.6512\n2018-07-13  98.4612\n\njulia  X[1, 1]\nIndex       A\n2017-11-04  101.2831", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A        B        C         D\n2017-11-04  98.9815  99.1087  100.1163  99.2148\n2017-11-05  99.7544  98.5265  101.2456  100.4211\n2017-11-06  99.4085  97.2119  100.2836  99.9737\n2017-11-07  99.9642  94.4763  99.8713   100.8338\n2017-11-08  99.5815  95.5722  100.8444  99.7428\n2017-11-09  99.4959  97.0157  99.278    101.0712\n2017-11-10  99.4552  97.5009  99.072    101.2053\n2017-11-11  98.006   96.7053  97.2739   101.3806\n2017-11-12  97.699   95.7459  95.8195   103.6139\n\u22ee\n2018-07-04  85.5075  95.7037  113.775   102.5596\n2018-07-05  87.4775  95.7324  116.2379  102.4351\n2018-07-06  87.5724  97.0363  116.6224  102.9324\n2018-07-07  86.9954  97.9302  116.7908  102.9553\n2018-07-08  86.9148  95.7863  116.6232  103.2781\n2018-07-09  86.4521  95.2461  116.39    102.8131\n2018-07-10  87.1237  95.6086  116.1888  103.6829\n2018-07-11  86.9142  94.9959  118.7372  103.7393\n2018-07-12  85.0549  95.0846  119.9995  105.8842\n2018-07-13  85.0389  93.5923  119.9442  104.8664\n\njulia  X[trues(size(X,1)), :]\nIndex       A        B        C         D\n2017-11-04  98.9815  99.1087  100.1163  99.2148\n2017-11-05  99.7544  98.5265  101.2456  100.4211\n2017-11-06  99.4085  97.2119  100.2836  99.9737\n2017-11-07  99.9642  94.4763  99.8713   100.8338\n2017-11-08  99.5815  95.5722  100.8444  99.7428\n2017-11-09  99.4959  97.0157  99.278    101.0712\n2017-11-10  99.4552  97.5009  99.072    101.2053\n2017-11-11  98.006   96.7053  97.2739   101.3806\n2017-11-12  97.699   95.7459  95.8195   103.6139\n\u22ee\n2018-07-04  85.5075  95.7037  113.775   102.5596\n2018-07-05  87.4775  95.7324  116.2379  102.4351\n2018-07-06  87.5724  97.0363  116.6224  102.9324\n2018-07-07  86.9954  97.9302  116.7908  102.9553\n2018-07-08  86.9148  95.7863  116.6232  103.2781\n2018-07-09  86.4521  95.2461  116.39    102.8131\n2018-07-10  87.1237  95.6086  116.1888  103.6829\n2018-07-11  86.9142  94.9959  118.7372  103.7393\n2018-07-12  85.0549  95.0846  119.9995  105.8842\n2018-07-13  85.0389  93.5923  119.9442  104.8664\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-04  98.9815\n2017-11-06  99.4085\n2017-11-07  99.9642\n2017-11-08  99.5815\n2017-11-09  99.4959\n2017-11-11  98.006\n2017-11-17  93.8283\n2017-11-21  93.2414\n2017-11-25  93.1199\n\u22ee\n2018-06-09  81.2066\n2018-06-12  82.0984\n2018-06-13  80.3269\n2018-06-18  79.0721\n2018-06-27  82.431\n2018-07-04  85.5075\n2018-07-06  87.5724\n2018-07-10  87.1237\n2018-07-12  85.0549\n2018-07-13  85.0389\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-04  98.9815\n2017-11-05  99.7544\n2017-11-08  99.5815\n2017-11-09  99.4959\n2017-11-11  98.006\n2017-11-13  97.9753\n2017-11-14  97.0631\n2017-11-15  95.6103\n2017-11-16  95.3539\n\u22ee\n2018-06-29  83.5524\n2018-06-30  85.1935\n2018-07-02  86.1416\n2018-07-04  85.5075\n2018-07-05  87.4775\n2018-07-07  86.9954\n2018-07-08  86.9148\n2018-07-09  86.4521\n2018-07-10  87.1237\n2018-07-12  85.0549", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-04  101.4176  100.8984  98.6865   99.9248\n2017-11-05  101.0342  101.7128  100.0395  100.7799\n2017-11-06  101.3841  102.5175  100.0351  101.4887\n2017-11-07  99.044    104.269   98.1951   100.7474\n2017-11-08  96.8746   103.5173  97.7879   99.2384\n2017-11-09  97.5308   103.409   96.2847   97.6757\n2017-11-10  97.394    104.6988  95.9068   97.4461\n2017-11-11  99.2197   103.8311  94.8759   95.3684\n2017-11-12  100.4448  104.1799  95.1205   95.4597\n\u22ee\n2018-07-04  113.3497  90.3168   93.4725   90.7042\n2018-07-05  113.1485  90.6301   93.976    88.6014\n2018-07-06  112.6063  90.2372   91.8576   88.4513\n2018-07-07  111.7271  90.9908   90.7791   87.5805\n2018-07-08  112.8005  90.2416   89.4599   89.3718\n2018-07-09  113.4216  88.7114   89.4782   88.833\n2018-07-10  110.919   87.4319   88.9589   89.9667\n2018-07-11  111.2948  86.5972   90.0673   88.6275\n2018-07-12  111.6311  87.6733   91.1849   87.5594\n2018-07-13  112.2957  87.3611   89.6671   86.8727\n\njulia  X[1:10, :]\nIndex       A         B         C         D\n2017-11-04  101.4176  100.8984  98.6865   99.9248\n2017-11-05  101.0342  101.7128  100.0395  100.7799\n2017-11-06  101.3841  102.5175  100.0351  101.4887\n2017-11-07  99.044    104.269   98.1951   100.7474\n2017-11-08  96.8746   103.5173  97.7879   99.2384\n2017-11-09  97.5308   103.409   96.2847   97.6757\n2017-11-10  97.394    104.6988  95.9068   97.4461\n2017-11-11  99.2197   103.8311  94.8759   95.3684\n2017-11-12  100.4448  104.1799  95.1205   95.4597\n2017-11-13  101.8878  103.2967  97.1992   94.7144\n\njulia  X[end-100:end, 2:3]\nIndex       B        C\n2018-04-04  93.3634  94.0605\n2018-04-05  94.0339  94.9161\n2018-04-06  94.7819  95.159\n2018-04-07  93.7305  93.74\n2018-04-08  93.8366  92.6348\n2018-04-09  92.4191  94.5014\n2018-04-10  93.8048  94.9113\n2018-04-11  93.2927  94.1942\n2018-04-12  94.3351  94.4719\n\u22ee\n2018-07-04  90.3168  93.4725\n2018-07-05  90.6301  93.976\n2018-07-06  90.2372  91.8576\n2018-07-07  90.9908  90.7791\n2018-07-08  90.2416  89.4599\n2018-07-09  88.7114  89.4782\n2018-07-10  87.4319  88.9589\n2018-07-11  86.5972  90.0673\n2018-07-12  87.6733  91.1849\n2018-07-13  87.3611  89.6671\n\njulia  X[end, 2:end]\nIndex       B        C        D\n2018-07-13  87.3611  89.6671  86.8727", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-04  99.5701   100.5108  100.5942  99.6221\n2017-11-05  99.7134   99.8559   101.1113  98.3867\n2017-11-06  100.1203  100.123   101.799   97.8396\n2017-11-07  101.2657  99.3291   99.4683   97.28\n2017-11-08  100.2243  99.5029   98.2439   96.2344\n2017-11-09  99.7058   99.22     98.3061   97.4298\n2017-11-10  100.3035  100.5622  97.7386   97.4751\n2017-11-11  99.8422   100.5777  97.1179   97.4259\n2017-11-12  99.8189   100.6489  96.466    97.0249\n\u22ee\n2018-07-04  102.0308  102.6769  82.9229   103.7831\n2018-07-05  102.5756  101.614   84.6704   102.2033\n2018-07-06  103.0035  102.6363  84.3585   101.7007\n2018-07-07  103.1361  102.8577  84.7662   100.4981\n2018-07-08  102.1406  103.4968  86.7713   98.6112\n2018-07-09  102.23    104.4431  86.3527   99.3287\n2018-07-10  102.6899  101.6902  88.136    100.7698\n2018-07-11  101.8269  100.3236  88.0379   100.7635\n2018-07-12  102.547   98.8981   89.0145   101.0972\n2018-07-13  102.2987  99.1501   89.5968   99.743\n\njulia  X[:, :A]\nIndex       A\n2017-11-04  99.5701\n2017-11-05  99.7134\n2017-11-06  100.1203\n2017-11-07  101.2657\n2017-11-08  100.2243\n2017-11-09  99.7058\n2017-11-10  100.3035\n2017-11-11  99.8422\n2017-11-12  99.8189\n\u22ee\n2018-07-04  102.0308\n2018-07-05  102.5756\n2018-07-06  103.0035\n2018-07-07  103.1361\n2018-07-08  102.1406\n2018-07-09  102.23\n2018-07-10  102.6899\n2018-07-11  101.8269\n2018-07-12  102.547\n2018-07-13  102.2987\n\njulia  X[:, [:B, :D]]\nIndex       B         D\n2017-11-04  100.5108  99.6221\n2017-11-05  99.8559   98.3867\n2017-11-06  100.123   97.8396\n2017-11-07  99.3291   97.28\n2017-11-08  99.5029   96.2344\n2017-11-09  99.22     97.4298\n2017-11-10  100.5622  97.4751\n2017-11-11  100.5777  97.4259\n2017-11-12  100.6489  97.0249\n\u22ee\n2018-07-04  102.6769  103.7831\n2018-07-05  101.614   102.2033\n2018-07-06  102.6363  101.7007\n2018-07-07  102.8577  100.4981\n2018-07-08  103.4968  98.6112\n2018-07-09  104.4431  99.3287\n2018-07-10  101.6902  100.7698\n2018-07-11  100.3236  100.7635\n2018-07-12  98.8981   101.0972\n2018-07-13  99.1501   99.743", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C        D\n2016-01-01  100.7144  100.3073  99.832   100.3785\n2016-01-02  100.3326  99.5207   98.7058  100.6575\n2016-01-03  99.0876   99.4141   99.6393  101.3032\n2016-01-04  99.2193   100.0304  97.9264  102.0482\n2016-01-05  99.3481   99.0644   97.036   101.0124\n2016-01-06  100.2078  98.6327   97.0299  99.7115\n2016-01-07  100.9788  97.8335   97.5464  101.2277\n2016-01-08  99.8931   98.4285   97.2258  103.1656\n2016-01-09  99.69     98.8689   97.4245  101.767\n\u22ee\n2017-12-22  92.92     135.5882  56.0759  84.8765\n2017-12-23  93.4986   137.0883  56.3357  84.8383\n2017-12-24  94.365    137.0298  54.7877  86.0703\n2017-12-25  94.8627   136.3425  54.8763  86.0762\n2017-12-26  94.1039   136.3819  55.0502  86.0632\n2017-12-27  94.1284   137.1583  55.1841  85.5967\n2017-12-28  95.0247   136.9263  55.0158  84.0896\n2017-12-29  96.1618   136.3748  56.5848  83.5206\n2017-12-30  96.8875   135.0173  56.4961  83.7961\n2017-12-31  96.7428   133.2459  56.8513  83.6821\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A        B         C        D\n2017-07-01  89.7392  128.7697  75.8089  92.9731\n\njulia  X[ 2016 ]  # whole year\nIndex       A         B         C        D\n2016-01-01  100.7144  100.3073  99.832   100.3785\n2016-01-02  100.3326  99.5207   98.7058  100.6575\n2016-01-03  99.0876   99.4141   99.6393  101.3032\n2016-01-04  99.2193   100.0304  97.9264  102.0482\n2016-01-05  99.3481   99.0644   97.036   101.0124\n2016-01-06  100.2078  98.6327   97.0299  99.7115\n2016-01-07  100.9788  97.8335   97.5464  101.2277\n2016-01-08  99.8931   98.4285   97.2258  103.1656\n2016-01-09  99.69     98.8689   97.4245  101.767\n\u22ee\n2016-12-22  103.2635  119.8547  75.8126  86.5894\n2016-12-23  101.8068  120.5569  76.4127  85.6129\n2016-12-24  101.3228  120.3262  75.7326  84.2511\n2016-12-25  99.701    119.5023  74.8363  84.1865\n2016-12-26  101.0168  117.1698  75.6396  83.8221\n2016-12-27  100.1048  117.7249  76.1016  83.719\n2016-12-28  100.9911  118.2906  74.237   84.5835\n2016-12-29  100.8122  118.8292  74.3611  83.955\n2016-12-30  100.6444  119.5945  72.0751  81.9275\n2016-12-31  100.5582  120.8254  71.3959  81.5253\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-04  0.9524\n2017-11-05  0.2901\n2017-11-06  0.1605\n2017-11-07  0.9819\n2017-11-08  0.1588\n2017-11-09  0.2022\n2017-11-10  0.2\n2017-11-11  0.6512\n2017-11-12  0.5843\n\u22ee\n2018-07-04  0.4283\n2018-07-05  0.7884\n2018-07-06  0.5566\n2018-07-07  0.9968\n2018-07-08  0.5768\n2018-07-09  0.0352\n2018-07-10  0.747\n2018-07-11  0.5975\n2018-07-12  0.6877\n2018-07-13  0.5681\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-04  0.4627\n2017-05-05  0.181\n2017-05-06  0.3704\n2017-05-07  0.4437\n2017-05-08  0.4089\n2017-05-09  0.6074\n2017-05-10  0.7707\n2017-05-11  0.5159\n2017-05-12  0.5377\n\u22ee\n2018-01-04  0.0659\n2018-01-05  0.1671\n2018-01-06  0.179\n2018-01-07  0.0756\n2018-01-08  0.0814\n2018-01-09  0.7939\n2018-01-10  0.3595\n2018-01-11  0.098\n2018-01-12  0.2901\n2018-01-13  0.9941\n\njulia\n [x y]\nIndex       A       A\n2017-05-04  NaN     0.4627\n2017-05-05  NaN     0.181\n2017-05-06  NaN     0.3704\n2017-05-07  NaN     0.4437\n2017-05-08  NaN     0.4089\n2017-05-09  NaN     0.6074\n2017-05-10  NaN     0.7707\n2017-05-11  NaN     0.5159\n2017-05-12  NaN     0.5377\n\u22ee\n2018-07-04  0.4283  NaN\n2018-07-05  0.7884  NaN\n2018-07-06  0.5566  NaN\n2018-07-07  0.9968  NaN\n2018-07-08  0.5768  NaN\n2018-07-09  0.0352  NaN\n2018-07-10  0.747   NaN\n2018-07-11  0.5975  NaN\n2018-07-12  0.6877  NaN\n2018-07-13  0.5681  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-04  0.3505\n2017-11-05  0.2721\n2017-11-06  0.8191\n2017-11-07  0.3519\n2017-11-08  0.8169\n2017-11-09  0.5556\n2017-11-10  0.9971\n2017-11-11  0.4348\n2017-11-12  0.3636\n\u22ee\n2018-07-04  0.6894\n2018-07-05  0.7251\n2018-07-06  0.9035\n2018-07-07  0.2034\n2018-07-08  0.3374\n2018-07-09  0.7584\n2018-07-10  0.6513\n2018-07-11  0.0818\n2018-07-12  0.8939\n2018-07-13  0.8359\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-04  0.8189\n2017-05-05  0.3022\n2017-05-06  0.0988\n2017-05-07  0.9956\n2017-05-08  0.9856\n2017-05-09  0.8081\n2017-05-10  0.169\n2017-05-11  0.9622\n2017-05-12  0.5822\n\u22ee\n2018-01-04  0.3206\n2018-01-05  0.8176\n2018-01-06  0.1287\n2018-01-07  0.1625\n2018-01-08  0.4285\n2018-01-09  0.3393\n2018-01-10  0.4134\n2018-01-11  0.2043\n2018-01-12  0.7179\n2018-01-13  0.8157\n\njulia\n ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-04  0.2624\n2017-11-05  0.6381\n2017-11-06  0.4662\n2017-11-07  0.0796\n2017-11-08  0.9562\n2017-11-09  0.0735\n2017-11-10  0.9858\n2017-11-11  0.6418\n2017-11-12  0.8342\n\u22ee\n2018-07-04  0.1448\n2018-07-05  0.4547\n2018-07-06  0.1792\n2018-07-07  0.4668\n2018-07-08  0.4248\n2018-07-09  0.0943\n2018-07-10  0.7363\n2018-07-11  0.2166\n2018-07-12  0.2128\n2018-07-13  0.0302\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-04  0.5582\n2017-05-05  0.0426\n2017-05-06  0.4614\n2017-05-07  0.9891\n2017-05-08  0.6539\n2017-05-09  0.4823\n2017-05-10  0.2571\n2017-05-11  0.1192\n2017-05-12  0.3549\n\u22ee\n2018-01-04  0.669\n2018-01-05  0.002\n2018-01-06  0.0539\n2018-01-07  0.7523\n2018-01-08  0.5684\n2018-01-09  0.6691\n2018-01-10  0.706\n2018-01-11  0.3491\n2018-01-12  0.171\n2018-01-13  0.9229\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-11-04  0.2624  0.4775\n2017-11-05  0.6381  0.4646\n2017-11-06  0.4662  0.8398\n2017-11-07  0.0796  0.0806\n2017-11-08  0.9562  0.6911\n2017-11-09  0.0735  0.683\n2017-11-10  0.9858  0.3894\n2017-11-11  0.6418  0.697\n2017-11-12  0.8342  0.2819\n\u22ee\n2018-07-04  0.1448  NaN\n2018-07-05  0.4547  NaN\n2018-07-06  0.1792  NaN\n2018-07-07  0.4668  NaN\n2018-07-08  0.4248  NaN\n2018-07-09  0.0943  NaN\n2018-07-10  0.7363  NaN\n2018-07-11  0.2166  NaN\n2018-07-12  0.2128  NaN\n2018-07-13  0.0302  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-05-04  NaN     0.5582\n2017-05-05  NaN     0.0426\n2017-05-06  NaN     0.4614\n2017-05-07  NaN     0.9891\n2017-05-08  NaN     0.6539\n2017-05-09  NaN     0.4823\n2017-05-10  NaN     0.2571\n2017-05-11  NaN     0.1192\n2017-05-12  NaN     0.3549\n\u22ee\n2018-01-04  0.3836  0.1618\n2018-01-05  0.6098  0.4809\n2018-01-06  0.6639  0.2593\n2018-01-07  0.1044  0.669\n2018-01-08  0.9202  0.002\n2018-01-09  0.1473  0.0539\n2018-01-10  0.1547  0.7523\n2018-01-11  0.1653  0.5684\n2018-01-12  0.7368  0.6691\n2018-01-13  0.4018  0.706", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-04  0.9524\n2017-11-05  0.2901\n2017-11-06  0.1605\n2017-11-07  0.9819\n2017-11-08  0.1588\n2017-11-09  0.2022\n2017-11-10  0.2\n2017-11-11  0.6512\n2017-11-12  0.5843\n\u22ee\n2018-07-04  0.4283\n2018-07-05  0.7884\n2018-07-06  0.5566\n2018-07-07  0.9968\n2018-07-08  0.5768\n2018-07-09  0.0352\n2018-07-10  0.747\n2018-07-11  0.5975\n2018-07-12  0.6877\n2018-07-13  0.5681\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-04  0.4627\n2017-05-05  0.181\n2017-05-06  0.3704\n2017-05-07  0.4437\n2017-05-08  0.4089\n2017-05-09  0.6074\n2017-05-10  0.7707\n2017-05-11  0.5159\n2017-05-12  0.5377\n\u22ee\n2018-01-04  0.0659\n2018-01-05  0.1671\n2018-01-06  0.179\n2018-01-07  0.0756\n2018-01-08  0.0814\n2018-01-09  0.7939\n2018-01-10  0.3595\n2018-01-11  0.098\n2018-01-12  0.2901\n2018-01-13  0.9941\n\njulia  [x y]\nIndex       A       A\n2017-05-04  NaN     0.4627\n2017-05-05  NaN     0.181\n2017-05-06  NaN     0.3704\n2017-05-07  NaN     0.4437\n2017-05-08  NaN     0.4089\n2017-05-09  NaN     0.6074\n2017-05-10  NaN     0.7707\n2017-05-11  NaN     0.5159\n2017-05-12  NaN     0.5377\n\u22ee\n2018-07-04  0.4283  NaN\n2018-07-05  0.7884  NaN\n2018-07-06  0.5566  NaN\n2018-07-07  0.9968  NaN\n2018-07-08  0.5768  NaN\n2018-07-09  0.0352  NaN\n2018-07-10  0.747   NaN\n2018-07-11  0.5975  NaN\n2018-07-12  0.6877  NaN\n2018-07-13  0.5681  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-04  0.3505\n2017-11-05  0.2721\n2017-11-06  0.8191\n2017-11-07  0.3519\n2017-11-08  0.8169\n2017-11-09  0.5556\n2017-11-10  0.9971\n2017-11-11  0.4348\n2017-11-12  0.3636\n\u22ee\n2018-07-04  0.6894\n2018-07-05  0.7251\n2018-07-06  0.9035\n2018-07-07  0.2034\n2018-07-08  0.3374\n2018-07-09  0.7584\n2018-07-10  0.6513\n2018-07-11  0.0818\n2018-07-12  0.8939\n2018-07-13  0.8359\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-04  0.8189\n2017-05-05  0.3022\n2017-05-06  0.0988\n2017-05-07  0.9956\n2017-05-08  0.9856\n2017-05-09  0.8081\n2017-05-10  0.169\n2017-05-11  0.9622\n2017-05-12  0.5822\n\u22ee\n2018-01-04  0.3206\n2018-01-05  0.8176\n2018-01-06  0.1287\n2018-01-07  0.1625\n2018-01-08  0.4285\n2018-01-09  0.3393\n2018-01-10  0.4134\n2018-01-11  0.2043\n2018-01-12  0.7179\n2018-01-13  0.8157\n\njulia  ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-11-04  0.2624\n2017-11-05  0.6381\n2017-11-06  0.4662\n2017-11-07  0.0796\n2017-11-08  0.9562\n2017-11-09  0.0735\n2017-11-10  0.9858\n2017-11-11  0.6418\n2017-11-12  0.8342\n\u22ee\n2018-07-04  0.1448\n2018-07-05  0.4547\n2018-07-06  0.1792\n2018-07-07  0.4668\n2018-07-08  0.4248\n2018-07-09  0.0943\n2018-07-10  0.7363\n2018-07-11  0.2166\n2018-07-12  0.2128\n2018-07-13  0.0302\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-04  0.5582\n2017-05-05  0.0426\n2017-05-06  0.4614\n2017-05-07  0.9891\n2017-05-08  0.6539\n2017-05-09  0.4823\n2017-05-10  0.2571\n2017-05-11  0.1192\n2017-05-12  0.3549\n\u22ee\n2018-01-04  0.669\n2018-01-05  0.002\n2018-01-06  0.0539\n2018-01-07  0.7523\n2018-01-08  0.5684\n2018-01-09  0.6691\n2018-01-10  0.706\n2018-01-11  0.3491\n2018-01-12  0.171\n2018-01-13  0.9229\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-11-04  0.2624  0.4775\n2017-11-05  0.6381  0.4646\n2017-11-06  0.4662  0.8398\n2017-11-07  0.0796  0.0806\n2017-11-08  0.9562  0.6911\n2017-11-09  0.0735  0.683\n2017-11-10  0.9858  0.3894\n2017-11-11  0.6418  0.697\n2017-11-12  0.8342  0.2819\n\u22ee\n2018-07-04  0.1448  NaN\n2018-07-05  0.4547  NaN\n2018-07-06  0.1792  NaN\n2018-07-07  0.4668  NaN\n2018-07-08  0.4248  NaN\n2018-07-09  0.0943  NaN\n2018-07-10  0.7363  NaN\n2018-07-11  0.2166  NaN\n2018-07-12  0.2128  NaN\n2018-07-13  0.0302  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-05-04  NaN     0.5582\n2017-05-05  NaN     0.0426\n2017-05-06  NaN     0.4614\n2017-05-07  NaN     0.9891\n2017-05-08  NaN     0.6539\n2017-05-09  NaN     0.4823\n2017-05-10  NaN     0.2571\n2017-05-11  NaN     0.1192\n2017-05-12  NaN     0.3549\n\u22ee\n2018-01-04  0.3836  0.1618\n2018-01-05  0.6098  0.4809\n2018-01-06  0.6639  0.2593\n2018-01-07  0.1044  0.669\n2018-01-08  0.9202  0.002\n2018-01-09  0.1473  0.0539\n2018-01-10  0.1547  0.7523\n2018-01-11  0.1653  0.5684\n2018-01-12  0.7368  0.6691\n2018-01-13  0.4018  0.706", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}