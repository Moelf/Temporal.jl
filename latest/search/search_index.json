{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  100.2518  99.1814   101.3625  100.0873\n2017-07-13  100.4002  99.5835   101.7856  99.3381\n2017-07-14  99.8234   99.685    102.0828  99.0116\n2017-07-15  98.6323   100.0008  102.7892  99.6367\n2017-07-16  98.7332   97.8768   103.2313  100.5995\n2017-07-17  98.1941   98.3268   103.6514  98.3131\n2017-07-18  96.3498   99.7114   103.9232  97.6695\n2017-07-19  96.1653   99.8153   103.535   97.6523\n2017-07-20  94.8911   98.8878   105.3708  97.9788\n\u22ee\n2018-03-11  81.725    94.9715   108.8183  103.0736\n2018-03-12  82.2875   94.3954   108.5507  104.0599\n2018-03-13  82.8411   95.1416   108.291   105.3676\n2018-03-14  82.9599   95.3305   107.7011  106.1368\n2018-03-15  82.166    93.512    107.3371  108.8939\n2018-03-16  84.1482   91.2724   106.572   110.5483\n2018-03-17  83.9655   90.8445   106.8065  111.3411\n2018-03-18  83.9956   90.32     107.3578  111.8968\n2018-03-19  83.3262   89.6969   107.453   110.8924\n2018-03-20  84.0261   89.8935   107.9354  109.8415\n\njulia\n X[1]\nIndex       A         B        C         D\n2017-07-12  100.2518  99.1814  101.3625  100.0873\n\njulia\n X[1, :]\nIndex       A         B        C         D\n2017-07-12  100.2518  99.1814  101.3625  100.0873\n\njulia\n X[:, 1]\nIndex       A\n2017-07-12  100.2518\n2017-07-13  100.4002\n2017-07-14  99.8234\n2017-07-15  98.6323\n2017-07-16  98.7332\n2017-07-17  98.1941\n2017-07-18  96.3498\n2017-07-19  96.1653\n2017-07-20  94.8911\n\u22ee\n2018-03-11  81.725\n2018-03-12  82.2875\n2018-03-13  82.8411\n2018-03-14  82.9599\n2018-03-15  82.166\n2018-03-16  84.1482\n2018-03-17  83.9655\n2018-03-18  83.9956\n2018-03-19  83.3262\n2018-03-20  84.0261\n\njulia\n X[1, 1]\nIndex       A\n2017-07-12  100.2518\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  100.1931  99.0825   100.814   99.5604\n2017-07-13  99.6614   98.3363   100.9446  97.3007\n2017-07-14  99.7203   97.4571   100.8418  97.0542\n2017-07-15  100.9053  96.2994   100.2877  97.6592\n2017-07-16  101.6409  96.8637   100.7009  98.2461\n2017-07-17  99.728    96.6019   99.8082   98.3617\n2017-07-18  99.3149   97.2101   101.3107  97.6017\n2017-07-19  98.5246   98.6112   102.5664  97.8628\n2017-07-20  99.0129   97.6033   102.9538  97.8298\n\u22ee\n2018-03-11  94.1695   129.9668  101.76    88.5211\n2018-03-12  94.6012   128.7188  98.722    89.8041\n2018-03-13  93.7342   127.7801  99.4378   90.4385\n2018-03-14  93.204    127.786   98.4654   91.0212\n2018-03-15  91.9338   127.7101  98.817    91.0363\n2018-03-16  91.1654   127.4654  99.9917   90.7213\n2018-03-17  91.1839   127.5788  97.8771   89.8959\n2018-03-18  92.6855   126.9381  98.471    88.4494\n2018-03-19  92.3851   126.6721  99.5774   89.3741\n2018-03-20  93.4942   125.4661  99.8361   90.3404\n\njulia\n X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-07-12  100.1931  99.0825   100.814   99.5604\n2017-07-13  99.6614   98.3363   100.9446  97.3007\n2017-07-14  99.7203   97.4571   100.8418  97.0542\n2017-07-15  100.9053  96.2994   100.2877  97.6592\n2017-07-16  101.6409  96.8637   100.7009  98.2461\n2017-07-17  99.728    96.6019   99.8082   98.3617\n2017-07-18  99.3149   97.2101   101.3107  97.6017\n2017-07-19  98.5246   98.6112   102.5664  97.8628\n2017-07-20  99.0129   97.6033   102.9538  97.8298\n\u22ee\n2018-03-11  94.1695   129.9668  101.76    88.5211\n2018-03-12  94.6012   128.7188  98.722    89.8041\n2018-03-13  93.7342   127.7801  99.4378   90.4385\n2018-03-14  93.204    127.786   98.4654   91.0212\n2018-03-15  91.9338   127.7101  98.817    91.0363\n2018-03-16  91.1654   127.4654  99.9917   90.7213\n2018-03-17  91.1839   127.5788  97.8771   89.8959\n2018-03-18  92.6855   126.9381  98.471    88.4494\n2018-03-19  92.3851   126.6721  99.5774   89.3741\n2018-03-20  93.4942   125.4661  99.8361   90.3404\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-07-12  100.1931\n2017-07-14  99.7203\n2017-07-16  101.6409\n2017-07-17  99.728\n2017-07-24  98.0028\n2017-07-25  99.5703\n2017-07-28  100.0744\n2017-07-30  99.0134\n2017-07-31  99.8482\n\u22ee\n2018-03-03  94.8248\n2018-03-05  94.2479\n2018-03-06  93.6948\n2018-03-07  94.5039\n2018-03-08  93.8987\n2018-03-09  92.8092\n2018-03-14  93.204\n2018-03-16  91.1654\n2018-03-19  92.3851\n2018-03-20  93.4942\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-07-12  100.1931\n2017-07-14  99.7203\n2017-07-16  101.6409\n2017-07-19  98.5246\n2017-07-20  99.0129\n2017-07-21  98.215\n2017-07-22  98.9149\n2017-07-27  98.7936\n2017-07-29  98.3592\n\u22ee\n2018-02-21  94.3523\n2018-02-22  93.8013\n2018-02-27  96.428\n2018-02-28  96.0626\n2018-03-04  93.2247\n2018-03-05  94.2479\n2018-03-07  94.5039\n2018-03-11  94.1695\n2018-03-14  93.204\n2018-03-20  93.4942\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  101.5063  98.9686   100.1469  99.6268\n2017-07-13  101.5463  99.0422   100.6471  98.7905\n2017-07-14  100.9329  100.4897  100.0223  97.5863\n2017-07-15  101.6661  101.7126  99.7899   97.4069\n2017-07-16  101.9346  101.3945  100.3287  96.9989\n2017-07-17  101.4937  100.4396  100.3447  97.1871\n2017-07-18  100.2333  101.0141  98.6983   95.3435\n2017-07-19  100.8515  101.2898  97.5771   95.0217\n2017-07-20  102.4799  100.8808  97.3168   94.1505\n\u22ee\n2018-03-11  95.5804   103.6218  90.7381   98.093\n2018-03-12  93.5766   102.5484  91.4819   98.186\n2018-03-13  93.4762   100.8631  92.6023   97.0838\n2018-03-14  95.1828   102.7725  91.1067   96.9328\n2018-03-15  93.9429   103.0041  90.463    96.4988\n2018-03-16  93.0215   103.3495  90.0059   95.4772\n2018-03-17  92.594    105.1114  89.7108   95.3242\n2018-03-18  92.6089   103.6084  89.1321   95.6587\n2018-03-19  92.3852   104.3135  88.716    94.3103\n2018-03-20  91.4348   102.0752  89.7271   93.0157\n\njulia\n X[1:10, :]\nIndex       A         B         C         D\n2017-07-12  101.5063  98.9686   100.1469  99.6268\n2017-07-13  101.5463  99.0422   100.6471  98.7905\n2017-07-14  100.9329  100.4897  100.0223  97.5863\n2017-07-15  101.6661  101.7126  99.7899   97.4069\n2017-07-16  101.9346  101.3945  100.3287  96.9989\n2017-07-17  101.4937  100.4396  100.3447  97.1871\n2017-07-18  100.2333  101.0141  98.6983   95.3435\n2017-07-19  100.8515  101.2898  97.5771   95.0217\n2017-07-20  102.4799  100.8808  97.3168   94.1505\n2017-07-21  101.3001  100.8851  98.7509   95.2313\n\njulia\n X[end-100:end, 2:3]\nIndex       B         C\n2017-12-10  109.933   67.5004\n2017-12-11  111.1083  65.7615\n2017-12-12  110.6463  65.2592\n2017-12-13  111.3225  64.9323\n2017-12-14  111.6627  67.5551\n2017-12-15  111.8224  67.2238\n2017-12-16  110.3624  67.0259\n2017-12-17  111.616   65.7265\n2017-12-18  112.652   65.6572\n\u22ee\n2018-03-11  103.6218  90.7381\n2018-03-12  102.5484  91.4819\n2018-03-13  100.8631  92.6023\n2018-03-14  102.7725  91.1067\n2018-03-15  103.0041  90.463\n2018-03-16  103.3495  90.0059\n2018-03-17  105.1114  89.7108\n2018-03-18  103.6084  89.1321\n2018-03-19  104.3135  88.716\n2018-03-20  102.0752  89.7271\n\njulia\n X[end, 2:end]\nIndex       B         C        D\n2018-03-20  102.0752  89.7271  93.0157\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  100.2506  100.1207  99.4082   98.8383\n2017-07-13  100.587   102.0907  99.3022   98.8321\n2017-07-14  101.6163  101.9532  100.4783  97.5161\n2017-07-15  101.1399  102.0046  100.813   97.6779\n2017-07-16  100.6841  103.1704  101.3398  98.1211\n2017-07-17  101.2541  103.5696  101.2554  98.5877\n2017-07-18  102.0288  103.9802  103.3401  99.2006\n2017-07-19  103.9813  102.7292  103.9791  98.8635\n2017-07-20  104.094   104.108   103.3974  99.1658\n\u22ee\n2018-03-11  105.5574  90.2474   131.913   87.548\n2018-03-12  104.6895  88.9309   131.3979  88.4427\n2018-03-13  106.6687  87.4548   131.7544  88.1645\n2018-03-14  104.9439  87.667    130.5419  88.271\n2018-03-15  104.7432  87.27     130.1278  86.7623\n2018-03-16  104.3062  86.7013   128.95    87.7836\n2018-03-17  105.3506  85.7181   127.1399  87.1881\n2018-03-18  104.7379  85.8673   126.7463  88.5662\n2018-03-19  104.3903  85.4943   125.7681  88.8654\n2018-03-20  104.9258  84.6613   125.0239  86.8134\n\njulia\n X[:, :A]\nIndex       A\n2017-07-12  100.2506\n2017-07-13  100.587\n2017-07-14  101.6163\n2017-07-15  101.1399\n2017-07-16  100.6841\n2017-07-17  101.2541\n2017-07-18  102.0288\n2017-07-19  103.9813\n2017-07-20  104.094\n\u22ee\n2018-03-11  105.5574\n2018-03-12  104.6895\n2018-03-13  106.6687\n2018-03-14  104.9439\n2018-03-15  104.7432\n2018-03-16  104.3062\n2018-03-17  105.3506\n2018-03-18  104.7379\n2018-03-19  104.3903\n2018-03-20  104.9258\n\njulia\n X[:, [:B, :D]]\nIndex       B         D\n2017-07-12  100.1207  98.8383\n2017-07-13  102.0907  98.8321\n2017-07-14  101.9532  97.5161\n2017-07-15  102.0046  97.6779\n2017-07-16  103.1704  98.1211\n2017-07-17  103.5696  98.5877\n2017-07-18  103.9802  99.2006\n2017-07-19  102.7292  98.8635\n2017-07-20  104.108   99.1658\n\u22ee\n2018-03-11  90.2474   87.548\n2018-03-12  88.9309   88.4427\n2018-03-13  87.4548   88.1645\n2018-03-14  87.667    88.271\n2018-03-15  87.27     86.7623\n2018-03-16  86.7013   87.7836\n2018-03-17  85.7181   87.1881\n2018-03-18  85.8673   88.5662\n2018-03-19  85.4943   88.8654\n2018-03-20  84.6613   86.8134\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A        B         C        D\n2016-01-01  99.8142  100.7021  99.128   100.415\n2016-01-02  97.979   99.0632   97.9055  101.7764\n2016-01-03  98.3911  100.8487  97.8576  102.0591\n2016-01-04  97.8177  100.5582  98.5523  102.4378\n2016-01-05  97.4763  101.6301  98.0327  102.1053\n2016-01-06  96.6016  101.381   97.3376  102.2882\n2016-01-07  96.5544  100.6296  95.5206  101.5777\n2016-01-08  96.6368  100.7642  96.5015  102.1036\n2016-01-09  97.449   101.3562  96.6196  102.6966\n\u22ee\n2017-12-22  92.3718  52.6071   80.3639  113.0852\n2017-12-23  91.8886  52.6814   79.3486  113.0808\n2017-12-24  91.7971  52.4156   78.1508  111.952\n2017-12-25  90.4023  52.4038   77.4707  113.0629\n2017-12-26  89.9217  53.7189   77.205   113.3838\n2017-12-27  90.7358  54.3859   76.237   113.4077\n2017-12-28  90.2617  53.9752   76.7506  113.8307\n2017-12-29  89.2539  54.3521   76.3465  113.4192\n2017-12-30  90.1904  55.1944   77.3832  112.8806\n2017-12-31  91.241   53.4022   76.2164  114.6489\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A         B        C        D\n2017-07-01  102.6675  69.8748  74.1193  111.7496\n\njulia\n X[\n2016\n]  # whole year\nIndex       A        B         C        D\n2016-01-01  99.8142  100.7021  99.128   100.415\n2016-01-02  97.979   99.0632   97.9055  101.7764\n2016-01-03  98.3911  100.8487  97.8576  102.0591\n2016-01-04  97.8177  100.5582  98.5523  102.4378\n2016-01-05  97.4763  101.6301  98.0327  102.1053\n2016-01-06  96.6016  101.381   97.3376  102.2882\n2016-01-07  96.5544  100.6296  95.5206  101.5777\n2016-01-08  96.6368  100.7642  96.5015  102.1036\n2016-01-09  97.449   101.3562  96.6196  102.6966\n\u22ee\n2016-12-22  85.853   92.1475   70.33    98.2224\n2016-12-23  84.7663  91.4808   71.5474  97.4785\n2016-12-24  85.1347  92.6879   72.2488  97.811\n2016-12-25  83.8461  93.212    72.9513  97.5988\n2016-12-26  82.8977  92.2163   69.3434  97.7743\n2016-12-27  82.3496  91.4306   68.1504  97.173\n2016-12-28  82.0223  92.9737   68.9589  96.4035\n2016-12-29  81.1195  91.0252   68.3967  96.1856\n2016-12-30  80.6663  90.6665   68.7352  97.192\n2016-12-31  80.6047  90.4813   67.7021  97.7961\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  100.2518  99.1814   101.3625  100.0873\n2017-07-13  100.4002  99.5835   101.7856  99.3381\n2017-07-14  99.8234   99.685    102.0828  99.0116\n2017-07-15  98.6323   100.0008  102.7892  99.6367\n2017-07-16  98.7332   97.8768   103.2313  100.5995\n2017-07-17  98.1941   98.3268   103.6514  98.3131\n2017-07-18  96.3498   99.7114   103.9232  97.6695\n2017-07-19  96.1653   99.8153   103.535   97.6523\n2017-07-20  94.8911   98.8878   105.3708  97.9788\n\u22ee\n2018-03-11  81.725    94.9715   108.8183  103.0736\n2018-03-12  82.2875   94.3954   108.5507  104.0599\n2018-03-13  82.8411   95.1416   108.291   105.3676\n2018-03-14  82.9599   95.3305   107.7011  106.1368\n2018-03-15  82.166    93.512    107.3371  108.8939\n2018-03-16  84.1482   91.2724   106.572   110.5483\n2018-03-17  83.9655   90.8445   106.8065  111.3411\n2018-03-18  83.9956   90.32     107.3578  111.8968\n2018-03-19  83.3262   89.6969   107.453   110.8924\n2018-03-20  84.0261   89.8935   107.9354  109.8415\n\njulia  X[1]\nIndex       A         B        C         D\n2017-07-12  100.2518  99.1814  101.3625  100.0873\n\njulia  X[1, :]\nIndex       A         B        C         D\n2017-07-12  100.2518  99.1814  101.3625  100.0873\n\njulia  X[:, 1]\nIndex       A\n2017-07-12  100.2518\n2017-07-13  100.4002\n2017-07-14  99.8234\n2017-07-15  98.6323\n2017-07-16  98.7332\n2017-07-17  98.1941\n2017-07-18  96.3498\n2017-07-19  96.1653\n2017-07-20  94.8911\n\u22ee\n2018-03-11  81.725\n2018-03-12  82.2875\n2018-03-13  82.8411\n2018-03-14  82.9599\n2018-03-15  82.166\n2018-03-16  84.1482\n2018-03-17  83.9655\n2018-03-18  83.9956\n2018-03-19  83.3262\n2018-03-20  84.0261\n\njulia  X[1, 1]\nIndex       A\n2017-07-12  100.2518", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  100.1931  99.0825   100.814   99.5604\n2017-07-13  99.6614   98.3363   100.9446  97.3007\n2017-07-14  99.7203   97.4571   100.8418  97.0542\n2017-07-15  100.9053  96.2994   100.2877  97.6592\n2017-07-16  101.6409  96.8637   100.7009  98.2461\n2017-07-17  99.728    96.6019   99.8082   98.3617\n2017-07-18  99.3149   97.2101   101.3107  97.6017\n2017-07-19  98.5246   98.6112   102.5664  97.8628\n2017-07-20  99.0129   97.6033   102.9538  97.8298\n\u22ee\n2018-03-11  94.1695   129.9668  101.76    88.5211\n2018-03-12  94.6012   128.7188  98.722    89.8041\n2018-03-13  93.7342   127.7801  99.4378   90.4385\n2018-03-14  93.204    127.786   98.4654   91.0212\n2018-03-15  91.9338   127.7101  98.817    91.0363\n2018-03-16  91.1654   127.4654  99.9917   90.7213\n2018-03-17  91.1839   127.5788  97.8771   89.8959\n2018-03-18  92.6855   126.9381  98.471    88.4494\n2018-03-19  92.3851   126.6721  99.5774   89.3741\n2018-03-20  93.4942   125.4661  99.8361   90.3404\n\njulia  X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-07-12  100.1931  99.0825   100.814   99.5604\n2017-07-13  99.6614   98.3363   100.9446  97.3007\n2017-07-14  99.7203   97.4571   100.8418  97.0542\n2017-07-15  100.9053  96.2994   100.2877  97.6592\n2017-07-16  101.6409  96.8637   100.7009  98.2461\n2017-07-17  99.728    96.6019   99.8082   98.3617\n2017-07-18  99.3149   97.2101   101.3107  97.6017\n2017-07-19  98.5246   98.6112   102.5664  97.8628\n2017-07-20  99.0129   97.6033   102.9538  97.8298\n\u22ee\n2018-03-11  94.1695   129.9668  101.76    88.5211\n2018-03-12  94.6012   128.7188  98.722    89.8041\n2018-03-13  93.7342   127.7801  99.4378   90.4385\n2018-03-14  93.204    127.786   98.4654   91.0212\n2018-03-15  91.9338   127.7101  98.817    91.0363\n2018-03-16  91.1654   127.4654  99.9917   90.7213\n2018-03-17  91.1839   127.5788  97.8771   89.8959\n2018-03-18  92.6855   126.9381  98.471    88.4494\n2018-03-19  92.3851   126.6721  99.5774   89.3741\n2018-03-20  93.4942   125.4661  99.8361   90.3404\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-07-12  100.1931\n2017-07-14  99.7203\n2017-07-16  101.6409\n2017-07-17  99.728\n2017-07-24  98.0028\n2017-07-25  99.5703\n2017-07-28  100.0744\n2017-07-30  99.0134\n2017-07-31  99.8482\n\u22ee\n2018-03-03  94.8248\n2018-03-05  94.2479\n2018-03-06  93.6948\n2018-03-07  94.5039\n2018-03-08  93.8987\n2018-03-09  92.8092\n2018-03-14  93.204\n2018-03-16  91.1654\n2018-03-19  92.3851\n2018-03-20  93.4942\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-07-12  100.1931\n2017-07-14  99.7203\n2017-07-16  101.6409\n2017-07-19  98.5246\n2017-07-20  99.0129\n2017-07-21  98.215\n2017-07-22  98.9149\n2017-07-27  98.7936\n2017-07-29  98.3592\n\u22ee\n2018-02-21  94.3523\n2018-02-22  93.8013\n2018-02-27  96.428\n2018-02-28  96.0626\n2018-03-04  93.2247\n2018-03-05  94.2479\n2018-03-07  94.5039\n2018-03-11  94.1695\n2018-03-14  93.204\n2018-03-20  93.4942", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  101.5063  98.9686   100.1469  99.6268\n2017-07-13  101.5463  99.0422   100.6471  98.7905\n2017-07-14  100.9329  100.4897  100.0223  97.5863\n2017-07-15  101.6661  101.7126  99.7899   97.4069\n2017-07-16  101.9346  101.3945  100.3287  96.9989\n2017-07-17  101.4937  100.4396  100.3447  97.1871\n2017-07-18  100.2333  101.0141  98.6983   95.3435\n2017-07-19  100.8515  101.2898  97.5771   95.0217\n2017-07-20  102.4799  100.8808  97.3168   94.1505\n\u22ee\n2018-03-11  95.5804   103.6218  90.7381   98.093\n2018-03-12  93.5766   102.5484  91.4819   98.186\n2018-03-13  93.4762   100.8631  92.6023   97.0838\n2018-03-14  95.1828   102.7725  91.1067   96.9328\n2018-03-15  93.9429   103.0041  90.463    96.4988\n2018-03-16  93.0215   103.3495  90.0059   95.4772\n2018-03-17  92.594    105.1114  89.7108   95.3242\n2018-03-18  92.6089   103.6084  89.1321   95.6587\n2018-03-19  92.3852   104.3135  88.716    94.3103\n2018-03-20  91.4348   102.0752  89.7271   93.0157\n\njulia  X[1:10, :]\nIndex       A         B         C         D\n2017-07-12  101.5063  98.9686   100.1469  99.6268\n2017-07-13  101.5463  99.0422   100.6471  98.7905\n2017-07-14  100.9329  100.4897  100.0223  97.5863\n2017-07-15  101.6661  101.7126  99.7899   97.4069\n2017-07-16  101.9346  101.3945  100.3287  96.9989\n2017-07-17  101.4937  100.4396  100.3447  97.1871\n2017-07-18  100.2333  101.0141  98.6983   95.3435\n2017-07-19  100.8515  101.2898  97.5771   95.0217\n2017-07-20  102.4799  100.8808  97.3168   94.1505\n2017-07-21  101.3001  100.8851  98.7509   95.2313\n\njulia  X[end-100:end, 2:3]\nIndex       B         C\n2017-12-10  109.933   67.5004\n2017-12-11  111.1083  65.7615\n2017-12-12  110.6463  65.2592\n2017-12-13  111.3225  64.9323\n2017-12-14  111.6627  67.5551\n2017-12-15  111.8224  67.2238\n2017-12-16  110.3624  67.0259\n2017-12-17  111.616   65.7265\n2017-12-18  112.652   65.6572\n\u22ee\n2018-03-11  103.6218  90.7381\n2018-03-12  102.5484  91.4819\n2018-03-13  100.8631  92.6023\n2018-03-14  102.7725  91.1067\n2018-03-15  103.0041  90.463\n2018-03-16  103.3495  90.0059\n2018-03-17  105.1114  89.7108\n2018-03-18  103.6084  89.1321\n2018-03-19  104.3135  88.716\n2018-03-20  102.0752  89.7271\n\njulia  X[end, 2:end]\nIndex       B         C        D\n2018-03-20  102.0752  89.7271  93.0157", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  100.2506  100.1207  99.4082   98.8383\n2017-07-13  100.587   102.0907  99.3022   98.8321\n2017-07-14  101.6163  101.9532  100.4783  97.5161\n2017-07-15  101.1399  102.0046  100.813   97.6779\n2017-07-16  100.6841  103.1704  101.3398  98.1211\n2017-07-17  101.2541  103.5696  101.2554  98.5877\n2017-07-18  102.0288  103.9802  103.3401  99.2006\n2017-07-19  103.9813  102.7292  103.9791  98.8635\n2017-07-20  104.094   104.108   103.3974  99.1658\n\u22ee\n2018-03-11  105.5574  90.2474   131.913   87.548\n2018-03-12  104.6895  88.9309   131.3979  88.4427\n2018-03-13  106.6687  87.4548   131.7544  88.1645\n2018-03-14  104.9439  87.667    130.5419  88.271\n2018-03-15  104.7432  87.27     130.1278  86.7623\n2018-03-16  104.3062  86.7013   128.95    87.7836\n2018-03-17  105.3506  85.7181   127.1399  87.1881\n2018-03-18  104.7379  85.8673   126.7463  88.5662\n2018-03-19  104.3903  85.4943   125.7681  88.8654\n2018-03-20  104.9258  84.6613   125.0239  86.8134\n\njulia  X[:, :A]\nIndex       A\n2017-07-12  100.2506\n2017-07-13  100.587\n2017-07-14  101.6163\n2017-07-15  101.1399\n2017-07-16  100.6841\n2017-07-17  101.2541\n2017-07-18  102.0288\n2017-07-19  103.9813\n2017-07-20  104.094\n\u22ee\n2018-03-11  105.5574\n2018-03-12  104.6895\n2018-03-13  106.6687\n2018-03-14  104.9439\n2018-03-15  104.7432\n2018-03-16  104.3062\n2018-03-17  105.3506\n2018-03-18  104.7379\n2018-03-19  104.3903\n2018-03-20  104.9258\n\njulia  X[:, [:B, :D]]\nIndex       B         D\n2017-07-12  100.1207  98.8383\n2017-07-13  102.0907  98.8321\n2017-07-14  101.9532  97.5161\n2017-07-15  102.0046  97.6779\n2017-07-16  103.1704  98.1211\n2017-07-17  103.5696  98.5877\n2017-07-18  103.9802  99.2006\n2017-07-19  102.7292  98.8635\n2017-07-20  104.108   99.1658\n\u22ee\n2018-03-11  90.2474   87.548\n2018-03-12  88.9309   88.4427\n2018-03-13  87.4548   88.1645\n2018-03-14  87.667    88.271\n2018-03-15  87.27     86.7623\n2018-03-16  86.7013   87.7836\n2018-03-17  85.7181   87.1881\n2018-03-18  85.8673   88.5662\n2018-03-19  85.4943   88.8654\n2018-03-20  84.6613   86.8134", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A        B         C        D\n2016-01-01  99.8142  100.7021  99.128   100.415\n2016-01-02  97.979   99.0632   97.9055  101.7764\n2016-01-03  98.3911  100.8487  97.8576  102.0591\n2016-01-04  97.8177  100.5582  98.5523  102.4378\n2016-01-05  97.4763  101.6301  98.0327  102.1053\n2016-01-06  96.6016  101.381   97.3376  102.2882\n2016-01-07  96.5544  100.6296  95.5206  101.5777\n2016-01-08  96.6368  100.7642  96.5015  102.1036\n2016-01-09  97.449   101.3562  96.6196  102.6966\n\u22ee\n2017-12-22  92.3718  52.6071   80.3639  113.0852\n2017-12-23  91.8886  52.6814   79.3486  113.0808\n2017-12-24  91.7971  52.4156   78.1508  111.952\n2017-12-25  90.4023  52.4038   77.4707  113.0629\n2017-12-26  89.9217  53.7189   77.205   113.3838\n2017-12-27  90.7358  54.3859   76.237   113.4077\n2017-12-28  90.2617  53.9752   76.7506  113.8307\n2017-12-29  89.2539  54.3521   76.3465  113.4192\n2017-12-30  90.1904  55.1944   77.3832  112.8806\n2017-12-31  91.241   53.4022   76.2164  114.6489\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A         B        C        D\n2017-07-01  102.6675  69.8748  74.1193  111.7496\n\njulia  X[ 2016 ]  # whole year\nIndex       A        B         C        D\n2016-01-01  99.8142  100.7021  99.128   100.415\n2016-01-02  97.979   99.0632   97.9055  101.7764\n2016-01-03  98.3911  100.8487  97.8576  102.0591\n2016-01-04  97.8177  100.5582  98.5523  102.4378\n2016-01-05  97.4763  101.6301  98.0327  102.1053\n2016-01-06  96.6016  101.381   97.3376  102.2882\n2016-01-07  96.5544  100.6296  95.5206  101.5777\n2016-01-08  96.6368  100.7642  96.5015  102.1036\n2016-01-09  97.449   101.3562  96.6196  102.6966\n\u22ee\n2016-12-22  85.853   92.1475   70.33    98.2224\n2016-12-23  84.7663  91.4808   71.5474  97.4785\n2016-12-24  85.1347  92.6879   72.2488  97.811\n2016-12-25  83.8461  93.212    72.9513  97.5988\n2016-12-26  82.8977  92.2163   69.3434  97.7743\n2016-12-27  82.3496  91.4306   68.1504  97.173\n2016-12-28  82.0223  92.9737   68.9589  96.4035\n2016-12-29  81.1195  91.0252   68.3967  96.1856\n2016-12-30  80.6663  90.6665   68.7352  97.192\n2016-12-31  80.6047  90.4813   67.7021  97.7961\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.7944\n2017-07-13  0.6989\n2017-07-14  0.7376\n2017-07-15  0.9387\n2017-07-16  0.6141\n2017-07-17  0.5655\n2017-07-18  0.3315\n2017-07-19  0.4287\n2017-07-20  0.6628\n\u22ee\n2018-03-11  0.4005\n2018-03-12  0.5887\n2018-03-13  0.4285\n2018-03-14  0.705\n2018-03-15  0.9616\n2018-03-16  0.3125\n2018-03-17  0.584\n2018-03-18  0.7414\n2018-03-19  0.8006\n2018-03-20  0.0207\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.7623\n2017-01-13  0.3005\n2017-01-14  0.6934\n2017-01-15  0.4007\n2017-01-16  0.0695\n2017-01-17  0.1406\n2017-01-18  0.9912\n2017-01-19  0.7332\n2017-01-20  0.4926\n\u22ee\n2017-09-11  0.7022\n2017-09-12  0.1775\n2017-09-13  0.9075\n2017-09-14  0.435\n2017-09-15  0.4519\n2017-09-16  0.0595\n2017-09-17  0.8706\n2017-09-18  0.0088\n2017-09-19  0.8781\n2017-09-20  0.0968\n\njulia\n [x y]\nIndex       A       A\n2017-01-12  NaN     0.7623\n2017-01-13  NaN     0.3005\n2017-01-14  NaN     0.6934\n2017-01-15  NaN     0.4007\n2017-01-16  NaN     0.0695\n2017-01-17  NaN     0.1406\n2017-01-18  NaN     0.9912\n2017-01-19  NaN     0.7332\n2017-01-20  NaN     0.4926\n\u22ee\n2018-03-11  0.4005  NaN\n2018-03-12  0.5887  NaN\n2018-03-13  0.4285  NaN\n2018-03-14  0.705   NaN\n2018-03-15  0.9616  NaN\n2018-03-16  0.3125  NaN\n2018-03-17  0.584   NaN\n2018-03-18  0.7414  NaN\n2018-03-19  0.8006  NaN\n2018-03-20  0.0207  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.6084\n2017-07-13  0.5543\n2017-07-14  0.3152\n2017-07-15  0.2928\n2017-07-16  0.7248\n2017-07-17  0.0198\n2017-07-18  0.1549\n2017-07-19  0.5318\n2017-07-20  0.3269\n\u22ee\n2018-03-11  0.1599\n2018-03-12  0.6523\n2018-03-13  0.6912\n2018-03-14  0.0692\n2018-03-15  0.0631\n2018-03-16  0.5717\n2018-03-17  0.8307\n2018-03-18  0.603\n2018-03-19  0.9957\n2018-03-20  0.1797\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.577\n2017-01-13  0.3601\n2017-01-14  0.6573\n2017-01-15  0.1414\n2017-01-16  0.9588\n2017-01-17  0.8214\n2017-01-18  0.8639\n2017-01-19  0.8305\n2017-01-20  0.782\n\u22ee\n2017-09-11  0.0756\n2017-09-12  0.7552\n2017-09-13  0.6197\n2017-09-14  0.6471\n2017-09-15  0.8941\n2017-09-16  0.8439\n2017-09-17  0.0204\n2017-09-18  0.5002\n2017-09-19  0.4341\n2017-09-20  0.1622\n\njulia\n ijoin(x, y)\nIndex       A       A\n2017-07-12  0.6084  0.5371\n2017-07-13  0.5543  0.0641\n2017-07-14  0.3152  0.978\n2017-07-15  0.2928  0.516\n2017-07-16  0.7248  0.2986\n2017-07-17  0.0198  0.513\n2017-07-18  0.1549  0.9957\n2017-07-19  0.5318  0.3793\n2017-07-20  0.3269  0.3372\n\u22ee\n2017-09-11  0.8124  0.0756\n2017-09-12  0.5874  0.7552\n2017-09-13  0.0032  0.6197\n2017-09-14  0.5194  0.6471\n2017-09-15  0.1657  0.8941\n2017-09-16  0.215   0.8439\n2017-09-17  0.8805  0.0204\n2017-09-18  0.7054  0.5002\n2017-09-19  0.2854  0.4341\n2017-09-20  0.5391  0.1622\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.6982\n2017-07-13  0.252\n2017-07-14  0.9234\n2017-07-15  0.994\n2017-07-16  0.2752\n2017-07-17  0.2578\n2017-07-18  0.8164\n2017-07-19  0.8371\n2017-07-20  0.6881\n\u22ee\n2018-03-11  0.9032\n2018-03-12  0.7567\n2018-03-13  0.8537\n2018-03-14  0.5448\n2018-03-15  0.6841\n2018-03-16  0.6374\n2018-03-17  0.8294\n2018-03-18  0.2743\n2018-03-19  0.51\n2018-03-20  0.1284\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.2685\n2017-01-13  0.8923\n2017-01-14  0.7133\n2017-01-15  0.6272\n2017-01-16  0.8461\n2017-01-17  0.9237\n2017-01-18  0.4841\n2017-01-19  0.7322\n2017-01-20  0.9127\n\u22ee\n2017-09-11  0.2165\n2017-09-12  0.1272\n2017-09-13  0.7874\n2017-09-14  0.6755\n2017-09-15  0.7248\n2017-09-16  0.6883\n2017-09-17  0.0534\n2017-09-18  0.315\n2017-09-19  0.2364\n2017-09-20  0.3259\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-07-12  0.6982  0.3241\n2017-07-13  0.252   0.9729\n2017-07-14  0.9234  0.0812\n2017-07-15  0.994   0.991\n2017-07-16  0.2752  0.6467\n2017-07-17  0.2578  0.23\n2017-07-18  0.8164  0.5106\n2017-07-19  0.8371  0.3625\n2017-07-20  0.6881  0.2393\n\u22ee\n2018-03-11  0.9032  NaN\n2018-03-12  0.7567  NaN\n2018-03-13  0.8537  NaN\n2018-03-14  0.5448  NaN\n2018-03-15  0.6841  NaN\n2018-03-16  0.6374  NaN\n2018-03-17  0.8294  NaN\n2018-03-18  0.2743  NaN\n2018-03-19  0.51    NaN\n2018-03-20  0.1284  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-01-12  NaN     0.2685\n2017-01-13  NaN     0.8923\n2017-01-14  NaN     0.7133\n2017-01-15  NaN     0.6272\n2017-01-16  NaN     0.8461\n2017-01-17  NaN     0.9237\n2017-01-18  NaN     0.4841\n2017-01-19  NaN     0.7322\n2017-01-20  NaN     0.9127\n\u22ee\n2017-09-11  0.3897  0.1946\n2017-09-12  0.3235  0.6143\n2017-09-13  0.3037  0.6649\n2017-09-14  0.5725  0.4213\n2017-09-15  0.2203  0.5838\n2017-09-16  0.964   0.2165\n2017-09-17  0.0999  0.1272\n2017-09-18  0.2851  0.7874\n2017-09-19  0.2798  0.6755\n2017-09-20  0.9078  0.7248", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.7944\n2017-07-13  0.6989\n2017-07-14  0.7376\n2017-07-15  0.9387\n2017-07-16  0.6141\n2017-07-17  0.5655\n2017-07-18  0.3315\n2017-07-19  0.4287\n2017-07-20  0.6628\n\u22ee\n2018-03-11  0.4005\n2018-03-12  0.5887\n2018-03-13  0.4285\n2018-03-14  0.705\n2018-03-15  0.9616\n2018-03-16  0.3125\n2018-03-17  0.584\n2018-03-18  0.7414\n2018-03-19  0.8006\n2018-03-20  0.0207\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.7623\n2017-01-13  0.3005\n2017-01-14  0.6934\n2017-01-15  0.4007\n2017-01-16  0.0695\n2017-01-17  0.1406\n2017-01-18  0.9912\n2017-01-19  0.7332\n2017-01-20  0.4926\n\u22ee\n2017-09-11  0.7022\n2017-09-12  0.1775\n2017-09-13  0.9075\n2017-09-14  0.435\n2017-09-15  0.4519\n2017-09-16  0.0595\n2017-09-17  0.8706\n2017-09-18  0.0088\n2017-09-19  0.8781\n2017-09-20  0.0968\n\njulia  [x y]\nIndex       A       A\n2017-01-12  NaN     0.7623\n2017-01-13  NaN     0.3005\n2017-01-14  NaN     0.6934\n2017-01-15  NaN     0.4007\n2017-01-16  NaN     0.0695\n2017-01-17  NaN     0.1406\n2017-01-18  NaN     0.9912\n2017-01-19  NaN     0.7332\n2017-01-20  NaN     0.4926\n\u22ee\n2018-03-11  0.4005  NaN\n2018-03-12  0.5887  NaN\n2018-03-13  0.4285  NaN\n2018-03-14  0.705   NaN\n2018-03-15  0.9616  NaN\n2018-03-16  0.3125  NaN\n2018-03-17  0.584   NaN\n2018-03-18  0.7414  NaN\n2018-03-19  0.8006  NaN\n2018-03-20  0.0207  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.6084\n2017-07-13  0.5543\n2017-07-14  0.3152\n2017-07-15  0.2928\n2017-07-16  0.7248\n2017-07-17  0.0198\n2017-07-18  0.1549\n2017-07-19  0.5318\n2017-07-20  0.3269\n\u22ee\n2018-03-11  0.1599\n2018-03-12  0.6523\n2018-03-13  0.6912\n2018-03-14  0.0692\n2018-03-15  0.0631\n2018-03-16  0.5717\n2018-03-17  0.8307\n2018-03-18  0.603\n2018-03-19  0.9957\n2018-03-20  0.1797\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.577\n2017-01-13  0.3601\n2017-01-14  0.6573\n2017-01-15  0.1414\n2017-01-16  0.9588\n2017-01-17  0.8214\n2017-01-18  0.8639\n2017-01-19  0.8305\n2017-01-20  0.782\n\u22ee\n2017-09-11  0.0756\n2017-09-12  0.7552\n2017-09-13  0.6197\n2017-09-14  0.6471\n2017-09-15  0.8941\n2017-09-16  0.8439\n2017-09-17  0.0204\n2017-09-18  0.5002\n2017-09-19  0.4341\n2017-09-20  0.1622\n\njulia  ijoin(x, y)\nIndex       A       A\n2017-07-12  0.6084  0.5371\n2017-07-13  0.5543  0.0641\n2017-07-14  0.3152  0.978\n2017-07-15  0.2928  0.516\n2017-07-16  0.7248  0.2986\n2017-07-17  0.0198  0.513\n2017-07-18  0.1549  0.9957\n2017-07-19  0.5318  0.3793\n2017-07-20  0.3269  0.3372\n\u22ee\n2017-09-11  0.8124  0.0756\n2017-09-12  0.5874  0.7552\n2017-09-13  0.0032  0.6197\n2017-09-14  0.5194  0.6471\n2017-09-15  0.1657  0.8941\n2017-09-16  0.215   0.8439\n2017-09-17  0.8805  0.0204\n2017-09-18  0.7054  0.5002\n2017-09-19  0.2854  0.4341\n2017-09-20  0.5391  0.1622", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.6982\n2017-07-13  0.252\n2017-07-14  0.9234\n2017-07-15  0.994\n2017-07-16  0.2752\n2017-07-17  0.2578\n2017-07-18  0.8164\n2017-07-19  0.8371\n2017-07-20  0.6881\n\u22ee\n2018-03-11  0.9032\n2018-03-12  0.7567\n2018-03-13  0.8537\n2018-03-14  0.5448\n2018-03-15  0.6841\n2018-03-16  0.6374\n2018-03-17  0.8294\n2018-03-18  0.2743\n2018-03-19  0.51\n2018-03-20  0.1284\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.2685\n2017-01-13  0.8923\n2017-01-14  0.7133\n2017-01-15  0.6272\n2017-01-16  0.8461\n2017-01-17  0.9237\n2017-01-18  0.4841\n2017-01-19  0.7322\n2017-01-20  0.9127\n\u22ee\n2017-09-11  0.2165\n2017-09-12  0.1272\n2017-09-13  0.7874\n2017-09-14  0.6755\n2017-09-15  0.7248\n2017-09-16  0.6883\n2017-09-17  0.0534\n2017-09-18  0.315\n2017-09-19  0.2364\n2017-09-20  0.3259\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-07-12  0.6982  0.3241\n2017-07-13  0.252   0.9729\n2017-07-14  0.9234  0.0812\n2017-07-15  0.994   0.991\n2017-07-16  0.2752  0.6467\n2017-07-17  0.2578  0.23\n2017-07-18  0.8164  0.5106\n2017-07-19  0.8371  0.3625\n2017-07-20  0.6881  0.2393\n\u22ee\n2018-03-11  0.9032  NaN\n2018-03-12  0.7567  NaN\n2018-03-13  0.8537  NaN\n2018-03-14  0.5448  NaN\n2018-03-15  0.6841  NaN\n2018-03-16  0.6374  NaN\n2018-03-17  0.8294  NaN\n2018-03-18  0.2743  NaN\n2018-03-19  0.51    NaN\n2018-03-20  0.1284  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-01-12  NaN     0.2685\n2017-01-13  NaN     0.8923\n2017-01-14  NaN     0.7133\n2017-01-15  NaN     0.6272\n2017-01-16  NaN     0.8461\n2017-01-17  NaN     0.9237\n2017-01-18  NaN     0.4841\n2017-01-19  NaN     0.7322\n2017-01-20  NaN     0.9127\n\u22ee\n2017-09-11  0.3897  0.1946\n2017-09-12  0.3235  0.6143\n2017-09-13  0.3037  0.6649\n2017-09-14  0.5725  0.4213\n2017-09-15  0.2203  0.5838\n2017-09-16  0.964   0.2165\n2017-09-17  0.0999  0.1272\n2017-09-18  0.2851  0.7874\n2017-09-19  0.2798  0.6755\n2017-09-20  0.9078  0.7248", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}