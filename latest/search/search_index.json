{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  99.2579   99.2988   99.0977   98.8771\n2017-11-24  99.7551   99.4905   100.6576  97.8504\n2017-11-25  100.9762  99.3137   101.7175  96.0355\n2017-11-26  100.9917  100.1958  100.2453  95.1499\n2017-11-27  101.5567  99.4382   100.7193  95.0884\n2017-11-28  102.2929  98.5221   100.2792  95.2204\n2017-11-29  103.2357  99.7355   101.5447  94.8546\n2017-11-30  102.5016  101.3307  103.7178  95.4308\n2017-12-01  101.045   99.774    104.0928  95.0304\n\u22ee\n2018-07-23  84.742    98.3483   125.0061  115.4788\n2018-07-24  84.5889   96.9198   126.707   116.1145\n2018-07-25  85.918    97.3602   128.4708  115.8185\n2018-07-26  86.1687   97.1056   128.8742  115.4364\n2018-07-27  85.725    98.3254   128.6413  115.846\n2018-07-28  86.5081   97.2107   129.8011  116.4927\n2018-07-29  86.0306   95.7554   127.8302  115.9256\n2018-07-30  85.2441   95.1274   128.0661  116.492\n2018-07-31  85.3002   95.7109   126.5389  116.0495\n2018-08-01  85.5531   96.8614   126.5059  114.6061\n\njulia\n X[1]\nIndex       A        B        C        D\n2017-11-23  99.2579  99.2988  99.0977  98.8771\n\njulia\n X[1, :]\nIndex       A        B        C        D\n2017-11-23  99.2579  99.2988  99.0977  98.8771\n\njulia\n X[:, 1]\nIndex       A\n2017-11-23  99.2579\n2017-11-24  99.7551\n2017-11-25  100.9762\n2017-11-26  100.9917\n2017-11-27  101.5567\n2017-11-28  102.2929\n2017-11-29  103.2357\n2017-11-30  102.5016\n2017-12-01  101.045\n\u22ee\n2018-07-23  84.742\n2018-07-24  84.5889\n2018-07-25  85.918\n2018-07-26  86.1687\n2018-07-27  85.725\n2018-07-28  86.5081\n2018-07-29  86.0306\n2018-07-30  85.2441\n2018-07-31  85.3002\n2018-08-01  85.5531\n\njulia\n X[1, 1]\nIndex       A\n2017-11-23  99.2579\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.2242  99.231    100.2173  100.5847\n2017-11-24  98.9724   96.4671   99.8265   101.3124\n2017-11-25  97.1708   96.2993   102.2225  100.7919\n2017-11-26  97.3795   96.4455   101.2099  101.6496\n2017-11-27  96.6669   96.2465   100.8883  101.4907\n2017-11-28  97.9013   95.3066   101.1899  102.1175\n2017-11-29  95.9929   95.5225   99.7931   102.533\n2017-11-30  95.3948   96.6695   99.4799   101.6873\n2017-12-01  96.2951   96.2003   100.6933  103.7479\n\u22ee\n2018-07-23  75.7664   113.0963  100.3037  112.039\n2018-07-24  76.37     113.4861  99.5218   113.3547\n2018-07-25  76.3346   115.3156  99.8261   114.3991\n2018-07-26  76.7072   115.7084  98.4036   114.1621\n2018-07-27  77.7203   116.557   99.5499   112.9328\n2018-07-28  77.2595   116.0376  101.3423  113.2648\n2018-07-29  80.1331   116.6656  100.1653  112.1072\n2018-07-30  80.2598   116.4668  101.1055  111.3718\n2018-07-31  81.2802   116.7834  100.8144  111.2806\n2018-08-01  80.8822   115.8388  101.4432  111.1104\n\njulia\n X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-11-23  100.2242  99.231    100.2173  100.5847\n2017-11-24  98.9724   96.4671   99.8265   101.3124\n2017-11-25  97.1708   96.2993   102.2225  100.7919\n2017-11-26  97.3795   96.4455   101.2099  101.6496\n2017-11-27  96.6669   96.2465   100.8883  101.4907\n2017-11-28  97.9013   95.3066   101.1899  102.1175\n2017-11-29  95.9929   95.5225   99.7931   102.533\n2017-11-30  95.3948   96.6695   99.4799   101.6873\n2017-12-01  96.2951   96.2003   100.6933  103.7479\n\u22ee\n2018-07-23  75.7664   113.0963  100.3037  112.039\n2018-07-24  76.37     113.4861  99.5218   113.3547\n2018-07-25  76.3346   115.3156  99.8261   114.3991\n2018-07-26  76.7072   115.7084  98.4036   114.1621\n2018-07-27  77.7203   116.557   99.5499   112.9328\n2018-07-28  77.2595   116.0376  101.3423  113.2648\n2018-07-29  80.1331   116.6656  100.1653  112.1072\n2018-07-30  80.2598   116.4668  101.1055  111.3718\n2018-07-31  81.2802   116.7834  100.8144  111.2806\n2018-08-01  80.8822   115.8388  101.4432  111.1104\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-23  100.2242\n2017-11-26  97.3795\n2017-11-27  96.6669\n2017-11-30  95.3948\n2017-12-01  96.2951\n2017-12-03  95.3472\n2017-12-05  93.8856\n2017-12-07  95.3632\n2017-12-12  92.8798\n\u22ee\n2018-07-19  74.6279\n2018-07-20  75.8684\n2018-07-21  75.5375\n2018-07-22  76.2116\n2018-07-23  75.7664\n2018-07-24  76.37\n2018-07-25  76.3346\n2018-07-26  76.7072\n2018-07-27  77.7203\n2018-08-01  80.8822\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-23  100.2242\n2017-11-25  97.1708\n2017-11-26  97.3795\n2017-11-28  97.9013\n2017-11-29  95.9929\n2017-11-30  95.3948\n2017-12-03  95.3472\n2017-12-05  93.8856\n2017-12-07  95.3632\n\u22ee\n2018-07-11  74.6493\n2018-07-12  75.5279\n2018-07-13  75.2112\n2018-07-19  74.6279\n2018-07-20  75.8684\n2018-07-22  76.2116\n2018-07-23  75.7664\n2018-07-24  76.37\n2018-07-25  76.3346\n2018-07-31  81.2802\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  99.6354   98.4678   103.1937  100.2768\n2017-11-24  99.7328   98.9916   102.3001  100.4094\n2017-11-25  99.3774   98.4976   102.8194  98.4073\n2017-11-26  101.5193  98.9442   102.7443  98.5428\n2017-11-27  102.6034  99.6373   101.7445  97.1884\n2017-11-28  104.7912  100.6437  102.1694  97.6594\n2017-11-29  104.4644  100.3609  102.519   97.6496\n2017-11-30  104.2713  100.9696  102.5352  98.8246\n2017-12-01  105.1499  100.1869  102.8641  98.0796\n\u22ee\n2018-07-23  118.4114  89.2363   106.6888  85.2272\n2018-07-24  119.4964  89.6054   107.2164  85.3812\n2018-07-25  119.6536  91.044    107.064   84.2986\n2018-07-26  121.5912  92.658    108.8358  84.0769\n2018-07-27  122.3401  92.2204   109.1219  83.785\n2018-07-28  122.7092  93.7088   110.7563  84.4919\n2018-07-29  123.8261  94.0495   110.4987  84.0083\n2018-07-30  121.1233  93.5904   109.6476  85.465\n2018-07-31  120.3438  93.8448   105.449   85.6089\n2018-08-01  120.137   95.0724   104.8985  85.6926\n\njulia\n X[1:10, :]\nIndex       A         B         C         D\n2017-11-23  99.6354   98.4678   103.1937  100.2768\n2017-11-24  99.7328   98.9916   102.3001  100.4094\n2017-11-25  99.3774   98.4976   102.8194  98.4073\n2017-11-26  101.5193  98.9442   102.7443  98.5428\n2017-11-27  102.6034  99.6373   101.7445  97.1884\n2017-11-28  104.7912  100.6437  102.1694  97.6594\n2017-11-29  104.4644  100.3609  102.519   97.6496\n2017-11-30  104.2713  100.9696  102.5352  98.8246\n2017-12-01  105.1499  100.1869  102.8641  98.0796\n2017-12-02  106.1445  101.3582  101.8563  97.5626\n\njulia\n X[end-100:end, 2:3]\nIndex       B         C\n2018-04-23  98.6832   109.6706\n2018-04-24  98.9451   108.2695\n2018-04-25  98.9644   106.6536\n2018-04-26  100.7091  105.6002\n2018-04-27  100.8814  105.9686\n2018-04-28  100.5858  106.4985\n2018-04-29  101.1457  108.6331\n2018-04-30  101.9323  109.0211\n2018-05-01  102.9747  108.9285\n\u22ee\n2018-07-23  89.2363   106.6888\n2018-07-24  89.6054   107.2164\n2018-07-25  91.044    107.064\n2018-07-26  92.658    108.8358\n2018-07-27  92.2204   109.1219\n2018-07-28  93.7088   110.7563\n2018-07-29  94.0495   110.4987\n2018-07-30  93.5904   109.6476\n2018-07-31  93.8448   105.449\n2018-08-01  95.0724   104.8985\n\njulia\n X[end, 2:end]\nIndex       B        C         D\n2018-08-01  95.0724  104.8985  85.6926\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B        C         D\n2017-11-23  100.6208  99.3333  100.1839  100.5419\n2017-11-24  100.8866  99.3847  99.5667   100.0888\n2017-11-25  102.3403  98.1617  98.6923   99.275\n2017-11-26  101.5446  99.1574  99.2985   99.5562\n2017-11-27  100.5414  98.4704  100.8141  101.093\n2017-11-28  98.4675   96.9692  99.5209   101.2048\n2017-11-29  98.6242   98.0686  99.0811   99.9887\n2017-11-30  98.9641   98.703   98.2434   100.1029\n2017-12-01  99.3053   97.3686  98.7398   102.2455\n\u22ee\n2018-07-23  117.4839  86.8003  131.4582  112.0598\n2018-07-24  115.9439  84.4832  131.8141  111.9462\n2018-07-25  115.1818  85.4533  131.2669  112.1872\n2018-07-26  115.2602  84.396   132.0925  111.9161\n2018-07-27  115.0074  84.641   131.8119  112.2702\n2018-07-28  113.2056  84.7461  129.386   114.3054\n2018-07-29  113.4507  84.7958  129.7171  116.2711\n2018-07-30  113.3408  85.6252  130.6178  114.9845\n2018-07-31  113.9333  85.1573  131.0907  115.165\n2018-08-01  113.6046  85.4853  130.9592  116.3811\n\njulia\n X[:, :A]\nIndex       A\n2017-11-23  100.6208\n2017-11-24  100.8866\n2017-11-25  102.3403\n2017-11-26  101.5446\n2017-11-27  100.5414\n2017-11-28  98.4675\n2017-11-29  98.6242\n2017-11-30  98.9641\n2017-12-01  99.3053\n\u22ee\n2018-07-23  117.4839\n2018-07-24  115.9439\n2018-07-25  115.1818\n2018-07-26  115.2602\n2018-07-27  115.0074\n2018-07-28  113.2056\n2018-07-29  113.4507\n2018-07-30  113.3408\n2018-07-31  113.9333\n2018-08-01  113.6046\n\njulia\n X[:, [:B, :D]]\nIndex       B        D\n2017-11-23  99.3333  100.5419\n2017-11-24  99.3847  100.0888\n2017-11-25  98.1617  99.275\n2017-11-26  99.1574  99.5562\n2017-11-27  98.4704  101.093\n2017-11-28  96.9692  101.2048\n2017-11-29  98.0686  99.9887\n2017-11-30  98.703   100.1029\n2017-12-01  97.3686  102.2455\n\u22ee\n2018-07-23  86.8003  112.0598\n2018-07-24  84.4832  111.9462\n2018-07-25  85.4533  112.1872\n2018-07-26  84.396   111.9161\n2018-07-27  84.641   112.2702\n2018-07-28  84.7461  114.3054\n2018-07-29  84.7958  116.2711\n2018-07-30  85.6252  114.9845\n2018-07-31  85.1573  115.165\n2018-08-01  85.4853  116.3811\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C         D\n2016-01-01  99.6417   98.6319   99.679    100.4268\n2016-01-02  99.6044   98.8993   99.8382   100.5993\n2016-01-03  97.4812   99.7901   99.7668   100.4471\n2016-01-04  96.6238   100.9413  100.4331  100.0471\n2016-01-05  97.1094   99.1646   100.0909  100.6964\n2016-01-06  97.1574   99.3916   98.0103   102.7609\n2016-01-07  96.6395   100.2517  99.9691   103.2797\n2016-01-08  96.7477   100.7843  99.4271   104.2412\n2016-01-09  96.039    99.3903   100.0802  102.2033\n\u22ee\n2017-12-22  102.5801  116.2172  104.0153  85.5227\n2017-12-23  102.8934  114.725   102.1472  86.683\n2017-12-24  102.087   113.3674  100.4247  86.0979\n2017-12-25  101.9984  113.7194  99.6982   84.9729\n2017-12-26  100.4949  112.1568  100.3872  84.3219\n2017-12-27  101.0404  111.6218  100.7453  84.0188\n2017-12-28  102.0062  110.4955  101.5717  85.2999\n2017-12-29  100.8862  111.0889  99.8146   84.2856\n2017-12-30  102.2354  112.1276  99.436    83.7914\n2017-12-31  103.0834  111.8619  98.2434   83.9108\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A         B         C         D\n2017-07-01  103.5487  105.3277  101.5165  79.9013\n\njulia\n X[\n2016\n]  # whole year\nIndex       A         B         C         D\n2016-01-01  99.6417   98.6319   99.679    100.4268\n2016-01-02  99.6044   98.8993   99.8382   100.5993\n2016-01-03  97.4812   99.7901   99.7668   100.4471\n2016-01-04  96.6238   100.9413  100.4331  100.0471\n2016-01-05  97.1094   99.1646   100.0909  100.6964\n2016-01-06  97.1574   99.3916   98.0103   102.7609\n2016-01-07  96.6395   100.2517  99.9691   103.2797\n2016-01-08  96.7477   100.7843  99.4271   104.2412\n2016-01-09  96.039    99.3903   100.0802  102.2033\n\u22ee\n2016-12-22  106.1239  111.7855  85.7112   83.4155\n2016-12-23  106.8234  112.2397  86.6604   83.0761\n2016-12-24  106.5614  112.5305  86.5772   83.9873\n2016-12-25  105.8622  111.7155  86.353    84.376\n2016-12-26  105.5532  112.9586  85.5078   83.6297\n2016-12-27  104.6322  112.2861  85.8198   84.582\n2016-12-28  102.2167  112.5144  85.0853   83.607\n2016-12-29  101.0898  111.9989  85.1498   82.2228\n2016-12-30  100.0693  112.7086  85.8818   79.9885\n2016-12-31  100.8344  109.4623  86.972    79.1192\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  99.2579   99.2988   99.0977   98.8771\n2017-11-24  99.7551   99.4905   100.6576  97.8504\n2017-11-25  100.9762  99.3137   101.7175  96.0355\n2017-11-26  100.9917  100.1958  100.2453  95.1499\n2017-11-27  101.5567  99.4382   100.7193  95.0884\n2017-11-28  102.2929  98.5221   100.2792  95.2204\n2017-11-29  103.2357  99.7355   101.5447  94.8546\n2017-11-30  102.5016  101.3307  103.7178  95.4308\n2017-12-01  101.045   99.774    104.0928  95.0304\n\u22ee\n2018-07-23  84.742    98.3483   125.0061  115.4788\n2018-07-24  84.5889   96.9198   126.707   116.1145\n2018-07-25  85.918    97.3602   128.4708  115.8185\n2018-07-26  86.1687   97.1056   128.8742  115.4364\n2018-07-27  85.725    98.3254   128.6413  115.846\n2018-07-28  86.5081   97.2107   129.8011  116.4927\n2018-07-29  86.0306   95.7554   127.8302  115.9256\n2018-07-30  85.2441   95.1274   128.0661  116.492\n2018-07-31  85.3002   95.7109   126.5389  116.0495\n2018-08-01  85.5531   96.8614   126.5059  114.6061\n\njulia  X[1]\nIndex       A        B        C        D\n2017-11-23  99.2579  99.2988  99.0977  98.8771\n\njulia  X[1, :]\nIndex       A        B        C        D\n2017-11-23  99.2579  99.2988  99.0977  98.8771\n\njulia  X[:, 1]\nIndex       A\n2017-11-23  99.2579\n2017-11-24  99.7551\n2017-11-25  100.9762\n2017-11-26  100.9917\n2017-11-27  101.5567\n2017-11-28  102.2929\n2017-11-29  103.2357\n2017-11-30  102.5016\n2017-12-01  101.045\n\u22ee\n2018-07-23  84.742\n2018-07-24  84.5889\n2018-07-25  85.918\n2018-07-26  86.1687\n2018-07-27  85.725\n2018-07-28  86.5081\n2018-07-29  86.0306\n2018-07-30  85.2441\n2018-07-31  85.3002\n2018-08-01  85.5531\n\njulia  X[1, 1]\nIndex       A\n2017-11-23  99.2579", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.2242  99.231    100.2173  100.5847\n2017-11-24  98.9724   96.4671   99.8265   101.3124\n2017-11-25  97.1708   96.2993   102.2225  100.7919\n2017-11-26  97.3795   96.4455   101.2099  101.6496\n2017-11-27  96.6669   96.2465   100.8883  101.4907\n2017-11-28  97.9013   95.3066   101.1899  102.1175\n2017-11-29  95.9929   95.5225   99.7931   102.533\n2017-11-30  95.3948   96.6695   99.4799   101.6873\n2017-12-01  96.2951   96.2003   100.6933  103.7479\n\u22ee\n2018-07-23  75.7664   113.0963  100.3037  112.039\n2018-07-24  76.37     113.4861  99.5218   113.3547\n2018-07-25  76.3346   115.3156  99.8261   114.3991\n2018-07-26  76.7072   115.7084  98.4036   114.1621\n2018-07-27  77.7203   116.557   99.5499   112.9328\n2018-07-28  77.2595   116.0376  101.3423  113.2648\n2018-07-29  80.1331   116.6656  100.1653  112.1072\n2018-07-30  80.2598   116.4668  101.1055  111.3718\n2018-07-31  81.2802   116.7834  100.8144  111.2806\n2018-08-01  80.8822   115.8388  101.4432  111.1104\n\njulia  X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-11-23  100.2242  99.231    100.2173  100.5847\n2017-11-24  98.9724   96.4671   99.8265   101.3124\n2017-11-25  97.1708   96.2993   102.2225  100.7919\n2017-11-26  97.3795   96.4455   101.2099  101.6496\n2017-11-27  96.6669   96.2465   100.8883  101.4907\n2017-11-28  97.9013   95.3066   101.1899  102.1175\n2017-11-29  95.9929   95.5225   99.7931   102.533\n2017-11-30  95.3948   96.6695   99.4799   101.6873\n2017-12-01  96.2951   96.2003   100.6933  103.7479\n\u22ee\n2018-07-23  75.7664   113.0963  100.3037  112.039\n2018-07-24  76.37     113.4861  99.5218   113.3547\n2018-07-25  76.3346   115.3156  99.8261   114.3991\n2018-07-26  76.7072   115.7084  98.4036   114.1621\n2018-07-27  77.7203   116.557   99.5499   112.9328\n2018-07-28  77.2595   116.0376  101.3423  113.2648\n2018-07-29  80.1331   116.6656  100.1653  112.1072\n2018-07-30  80.2598   116.4668  101.1055  111.3718\n2018-07-31  81.2802   116.7834  100.8144  111.2806\n2018-08-01  80.8822   115.8388  101.4432  111.1104\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-23  100.2242\n2017-11-26  97.3795\n2017-11-27  96.6669\n2017-11-30  95.3948\n2017-12-01  96.2951\n2017-12-03  95.3472\n2017-12-05  93.8856\n2017-12-07  95.3632\n2017-12-12  92.8798\n\u22ee\n2018-07-19  74.6279\n2018-07-20  75.8684\n2018-07-21  75.5375\n2018-07-22  76.2116\n2018-07-23  75.7664\n2018-07-24  76.37\n2018-07-25  76.3346\n2018-07-26  76.7072\n2018-07-27  77.7203\n2018-08-01  80.8822\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-23  100.2242\n2017-11-25  97.1708\n2017-11-26  97.3795\n2017-11-28  97.9013\n2017-11-29  95.9929\n2017-11-30  95.3948\n2017-12-03  95.3472\n2017-12-05  93.8856\n2017-12-07  95.3632\n\u22ee\n2018-07-11  74.6493\n2018-07-12  75.5279\n2018-07-13  75.2112\n2018-07-19  74.6279\n2018-07-20  75.8684\n2018-07-22  76.2116\n2018-07-23  75.7664\n2018-07-24  76.37\n2018-07-25  76.3346\n2018-07-31  81.2802", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  99.6354   98.4678   103.1937  100.2768\n2017-11-24  99.7328   98.9916   102.3001  100.4094\n2017-11-25  99.3774   98.4976   102.8194  98.4073\n2017-11-26  101.5193  98.9442   102.7443  98.5428\n2017-11-27  102.6034  99.6373   101.7445  97.1884\n2017-11-28  104.7912  100.6437  102.1694  97.6594\n2017-11-29  104.4644  100.3609  102.519   97.6496\n2017-11-30  104.2713  100.9696  102.5352  98.8246\n2017-12-01  105.1499  100.1869  102.8641  98.0796\n\u22ee\n2018-07-23  118.4114  89.2363   106.6888  85.2272\n2018-07-24  119.4964  89.6054   107.2164  85.3812\n2018-07-25  119.6536  91.044    107.064   84.2986\n2018-07-26  121.5912  92.658    108.8358  84.0769\n2018-07-27  122.3401  92.2204   109.1219  83.785\n2018-07-28  122.7092  93.7088   110.7563  84.4919\n2018-07-29  123.8261  94.0495   110.4987  84.0083\n2018-07-30  121.1233  93.5904   109.6476  85.465\n2018-07-31  120.3438  93.8448   105.449   85.6089\n2018-08-01  120.137   95.0724   104.8985  85.6926\n\njulia  X[1:10, :]\nIndex       A         B         C         D\n2017-11-23  99.6354   98.4678   103.1937  100.2768\n2017-11-24  99.7328   98.9916   102.3001  100.4094\n2017-11-25  99.3774   98.4976   102.8194  98.4073\n2017-11-26  101.5193  98.9442   102.7443  98.5428\n2017-11-27  102.6034  99.6373   101.7445  97.1884\n2017-11-28  104.7912  100.6437  102.1694  97.6594\n2017-11-29  104.4644  100.3609  102.519   97.6496\n2017-11-30  104.2713  100.9696  102.5352  98.8246\n2017-12-01  105.1499  100.1869  102.8641  98.0796\n2017-12-02  106.1445  101.3582  101.8563  97.5626\n\njulia  X[end-100:end, 2:3]\nIndex       B         C\n2018-04-23  98.6832   109.6706\n2018-04-24  98.9451   108.2695\n2018-04-25  98.9644   106.6536\n2018-04-26  100.7091  105.6002\n2018-04-27  100.8814  105.9686\n2018-04-28  100.5858  106.4985\n2018-04-29  101.1457  108.6331\n2018-04-30  101.9323  109.0211\n2018-05-01  102.9747  108.9285\n\u22ee\n2018-07-23  89.2363   106.6888\n2018-07-24  89.6054   107.2164\n2018-07-25  91.044    107.064\n2018-07-26  92.658    108.8358\n2018-07-27  92.2204   109.1219\n2018-07-28  93.7088   110.7563\n2018-07-29  94.0495   110.4987\n2018-07-30  93.5904   109.6476\n2018-07-31  93.8448   105.449\n2018-08-01  95.0724   104.8985\n\njulia  X[end, 2:end]\nIndex       B        C         D\n2018-08-01  95.0724  104.8985  85.6926", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B        C         D\n2017-11-23  100.6208  99.3333  100.1839  100.5419\n2017-11-24  100.8866  99.3847  99.5667   100.0888\n2017-11-25  102.3403  98.1617  98.6923   99.275\n2017-11-26  101.5446  99.1574  99.2985   99.5562\n2017-11-27  100.5414  98.4704  100.8141  101.093\n2017-11-28  98.4675   96.9692  99.5209   101.2048\n2017-11-29  98.6242   98.0686  99.0811   99.9887\n2017-11-30  98.9641   98.703   98.2434   100.1029\n2017-12-01  99.3053   97.3686  98.7398   102.2455\n\u22ee\n2018-07-23  117.4839  86.8003  131.4582  112.0598\n2018-07-24  115.9439  84.4832  131.8141  111.9462\n2018-07-25  115.1818  85.4533  131.2669  112.1872\n2018-07-26  115.2602  84.396   132.0925  111.9161\n2018-07-27  115.0074  84.641   131.8119  112.2702\n2018-07-28  113.2056  84.7461  129.386   114.3054\n2018-07-29  113.4507  84.7958  129.7171  116.2711\n2018-07-30  113.3408  85.6252  130.6178  114.9845\n2018-07-31  113.9333  85.1573  131.0907  115.165\n2018-08-01  113.6046  85.4853  130.9592  116.3811\n\njulia  X[:, :A]\nIndex       A\n2017-11-23  100.6208\n2017-11-24  100.8866\n2017-11-25  102.3403\n2017-11-26  101.5446\n2017-11-27  100.5414\n2017-11-28  98.4675\n2017-11-29  98.6242\n2017-11-30  98.9641\n2017-12-01  99.3053\n\u22ee\n2018-07-23  117.4839\n2018-07-24  115.9439\n2018-07-25  115.1818\n2018-07-26  115.2602\n2018-07-27  115.0074\n2018-07-28  113.2056\n2018-07-29  113.4507\n2018-07-30  113.3408\n2018-07-31  113.9333\n2018-08-01  113.6046\n\njulia  X[:, [:B, :D]]\nIndex       B        D\n2017-11-23  99.3333  100.5419\n2017-11-24  99.3847  100.0888\n2017-11-25  98.1617  99.275\n2017-11-26  99.1574  99.5562\n2017-11-27  98.4704  101.093\n2017-11-28  96.9692  101.2048\n2017-11-29  98.0686  99.9887\n2017-11-30  98.703   100.1029\n2017-12-01  97.3686  102.2455\n\u22ee\n2018-07-23  86.8003  112.0598\n2018-07-24  84.4832  111.9462\n2018-07-25  85.4533  112.1872\n2018-07-26  84.396   111.9161\n2018-07-27  84.641   112.2702\n2018-07-28  84.7461  114.3054\n2018-07-29  84.7958  116.2711\n2018-07-30  85.6252  114.9845\n2018-07-31  85.1573  115.165\n2018-08-01  85.4853  116.3811", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C         D\n2016-01-01  99.6417   98.6319   99.679    100.4268\n2016-01-02  99.6044   98.8993   99.8382   100.5993\n2016-01-03  97.4812   99.7901   99.7668   100.4471\n2016-01-04  96.6238   100.9413  100.4331  100.0471\n2016-01-05  97.1094   99.1646   100.0909  100.6964\n2016-01-06  97.1574   99.3916   98.0103   102.7609\n2016-01-07  96.6395   100.2517  99.9691   103.2797\n2016-01-08  96.7477   100.7843  99.4271   104.2412\n2016-01-09  96.039    99.3903   100.0802  102.2033\n\u22ee\n2017-12-22  102.5801  116.2172  104.0153  85.5227\n2017-12-23  102.8934  114.725   102.1472  86.683\n2017-12-24  102.087   113.3674  100.4247  86.0979\n2017-12-25  101.9984  113.7194  99.6982   84.9729\n2017-12-26  100.4949  112.1568  100.3872  84.3219\n2017-12-27  101.0404  111.6218  100.7453  84.0188\n2017-12-28  102.0062  110.4955  101.5717  85.2999\n2017-12-29  100.8862  111.0889  99.8146   84.2856\n2017-12-30  102.2354  112.1276  99.436    83.7914\n2017-12-31  103.0834  111.8619  98.2434   83.9108\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A         B         C         D\n2017-07-01  103.5487  105.3277  101.5165  79.9013\n\njulia  X[ 2016 ]  # whole year\nIndex       A         B         C         D\n2016-01-01  99.6417   98.6319   99.679    100.4268\n2016-01-02  99.6044   98.8993   99.8382   100.5993\n2016-01-03  97.4812   99.7901   99.7668   100.4471\n2016-01-04  96.6238   100.9413  100.4331  100.0471\n2016-01-05  97.1094   99.1646   100.0909  100.6964\n2016-01-06  97.1574   99.3916   98.0103   102.7609\n2016-01-07  96.6395   100.2517  99.9691   103.2797\n2016-01-08  96.7477   100.7843  99.4271   104.2412\n2016-01-09  96.039    99.3903   100.0802  102.2033\n\u22ee\n2016-12-22  106.1239  111.7855  85.7112   83.4155\n2016-12-23  106.8234  112.2397  86.6604   83.0761\n2016-12-24  106.5614  112.5305  86.5772   83.9873\n2016-12-25  105.8622  111.7155  86.353    84.376\n2016-12-26  105.5532  112.9586  85.5078   83.6297\n2016-12-27  104.6322  112.2861  85.8198   84.582\n2016-12-28  102.2167  112.5144  85.0853   83.607\n2016-12-29  101.0898  111.9989  85.1498   82.2228\n2016-12-30  100.0693  112.7086  85.8818   79.9885\n2016-12-31  100.8344  109.4623  86.972    79.1192\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-23  0.475\n2017-11-24  0.2228\n2017-11-25  0.0659\n2017-11-26  0.6258\n2017-11-27  0.4034\n2017-11-28  0.5843\n2017-11-29  0.247\n2017-11-30  0.69\n2017-12-01  0.1991\n\u22ee\n2018-07-23  0.1257\n2018-07-24  0.8322\n2018-07-25  0.5006\n2018-07-26  0.3101\n2018-07-27  0.6395\n2018-07-28  0.1507\n2018-07-29  0.5697\n2018-07-30  0.8901\n2018-07-31  0.8223\n2018-08-01  0.6296\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.5862\n2017-05-24  0.7465\n2017-05-25  0.0377\n2017-05-26  0.945\n2017-05-27  0.4628\n2017-05-28  0.1843\n2017-05-29  0.2295\n2017-05-30  0.4845\n2017-06-01  0.6541\n\u22ee\n2018-01-23  0.4184\n2018-01-24  0.9303\n2018-01-25  0.1102\n2018-01-26  0.1816\n2018-01-27  0.8718\n2018-01-28  0.9739\n2018-01-29  0.4274\n2018-01-30  0.1894\n2018-01-31  0.7587\n2018-02-01  0.4077\n\njulia\n [x y]\nIndex       A       A\n2017-05-23  NaN     0.5862\n2017-05-24  NaN     0.7465\n2017-05-25  NaN     0.0377\n2017-05-26  NaN     0.945\n2017-05-27  NaN     0.4628\n2017-05-28  NaN     0.1843\n2017-05-29  NaN     0.2295\n2017-05-30  NaN     0.4845\n2017-06-01  NaN     0.6541\n\u22ee\n2018-07-23  0.1257  NaN\n2018-07-24  0.8322  NaN\n2018-07-25  0.5006  NaN\n2018-07-26  0.3101  NaN\n2018-07-27  0.6395  NaN\n2018-07-28  0.1507  NaN\n2018-07-29  0.5697  NaN\n2018-07-30  0.8901  NaN\n2018-07-31  0.8223  NaN\n2018-08-01  0.6296  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-23  0.5809\n2017-11-24  0.7959\n2017-11-25  0.6081\n2017-11-26  0.8327\n2017-11-27  0.915\n2017-11-28  0.3677\n2017-11-29  0.9722\n2017-11-30  0.7343\n2017-12-01  0.6734\n\u22ee\n2018-07-23  0.8297\n2018-07-24  0.5545\n2018-07-25  0.4583\n2018-07-26  0.4905\n2018-07-27  0.6184\n2018-07-28  0.6384\n2018-07-29  0.8736\n2018-07-30  0.806\n2018-07-31  0.1896\n2018-08-01  0.9202\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.5518\n2017-05-24  0.1798\n2017-05-25  0.5156\n2017-05-26  0.1472\n2017-05-27  0.5241\n2017-05-28  0.2852\n2017-05-29  0.3835\n2017-05-30  0.932\n2017-06-01  0.2269\n\u22ee\n2018-01-23  0.6683\n2018-01-24  0.9267\n2018-01-25  0.6776\n2018-01-26  0.196\n2018-01-27  0.7832\n2018-01-28  0.7677\n2018-01-29  0.3928\n2018-01-30  0.8981\n2018-01-31  0.6023\n2018-02-01  0.361\n\njulia\n ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-23  0.932\n2017-11-24  0.8638\n2017-11-25  0.4438\n2017-11-26  0.9553\n2017-11-27  0.0964\n2017-11-28  0.9132\n2017-11-29  0.8867\n2017-11-30  0.7884\n2017-12-01  0.2332\n\u22ee\n2018-07-23  0.7102\n2018-07-24  0.6595\n2018-07-25  0.2833\n2018-07-26  0.7241\n2018-07-27  0.1309\n2018-07-28  0.8373\n2018-07-29  0.771\n2018-07-30  0.8725\n2018-07-31  0.4761\n2018-08-01  0.2554\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.2218\n2017-05-24  0.5675\n2017-05-25  0.0981\n2017-05-26  0.1198\n2017-05-27  0.8877\n2017-05-28  0.761\n2017-05-29  0.888\n2017-05-30  0.6103\n2017-06-01  0.7469\n\u22ee\n2018-01-23  0.458\n2018-01-24  0.5883\n2018-01-25  0.9387\n2018-01-26  0.967\n2018-01-27  0.2631\n2018-01-28  0.8149\n2018-01-29  0.5713\n2018-01-30  0.0922\n2018-01-31  0.5377\n2018-02-01  0.4969\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-11-23  0.932   0.1244\n2017-11-24  0.8638  0.486\n2017-11-25  0.4438  0.7694\n2017-11-26  0.9553  0.2564\n2017-11-27  0.0964  0.2249\n2017-11-28  0.9132  0.2018\n2017-11-29  0.8867  0.7154\n2017-11-30  0.7884  0.9007\n2017-12-01  0.2332  0.1263\n\u22ee\n2018-07-23  0.7102  NaN\n2018-07-24  0.6595  NaN\n2018-07-25  0.2833  NaN\n2018-07-26  0.7241  NaN\n2018-07-27  0.1309  NaN\n2018-07-28  0.8373  NaN\n2018-07-29  0.771   NaN\n2018-07-30  0.8725  NaN\n2018-07-31  0.4761  NaN\n2018-08-01  0.2554  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-05-23  NaN     0.2218\n2017-05-24  NaN     0.5675\n2017-05-25  NaN     0.0981\n2017-05-26  NaN     0.1198\n2017-05-27  NaN     0.8877\n2017-05-28  NaN     0.761\n2017-05-29  NaN     0.888\n2017-05-30  NaN     0.6103\n2017-06-01  NaN     0.7469\n\u22ee\n2018-01-23  0.8693  0.9288\n2018-01-24  0.7044  0.7502\n2018-01-25  0.0579  0.0275\n2018-01-26  0.8702  0.458\n2018-01-27  0.6919  0.5883\n2018-01-28  0.2086  0.9387\n2018-01-29  0.066   0.967\n2018-01-30  0.3304  0.2631\n2018-01-31  0.6843  0.8149\n2018-02-01  0.2614  0.5713", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-23  0.475\n2017-11-24  0.2228\n2017-11-25  0.0659\n2017-11-26  0.6258\n2017-11-27  0.4034\n2017-11-28  0.5843\n2017-11-29  0.247\n2017-11-30  0.69\n2017-12-01  0.1991\n\u22ee\n2018-07-23  0.1257\n2018-07-24  0.8322\n2018-07-25  0.5006\n2018-07-26  0.3101\n2018-07-27  0.6395\n2018-07-28  0.1507\n2018-07-29  0.5697\n2018-07-30  0.8901\n2018-07-31  0.8223\n2018-08-01  0.6296\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.5862\n2017-05-24  0.7465\n2017-05-25  0.0377\n2017-05-26  0.945\n2017-05-27  0.4628\n2017-05-28  0.1843\n2017-05-29  0.2295\n2017-05-30  0.4845\n2017-06-01  0.6541\n\u22ee\n2018-01-23  0.4184\n2018-01-24  0.9303\n2018-01-25  0.1102\n2018-01-26  0.1816\n2018-01-27  0.8718\n2018-01-28  0.9739\n2018-01-29  0.4274\n2018-01-30  0.1894\n2018-01-31  0.7587\n2018-02-01  0.4077\n\njulia  [x y]\nIndex       A       A\n2017-05-23  NaN     0.5862\n2017-05-24  NaN     0.7465\n2017-05-25  NaN     0.0377\n2017-05-26  NaN     0.945\n2017-05-27  NaN     0.4628\n2017-05-28  NaN     0.1843\n2017-05-29  NaN     0.2295\n2017-05-30  NaN     0.4845\n2017-06-01  NaN     0.6541\n\u22ee\n2018-07-23  0.1257  NaN\n2018-07-24  0.8322  NaN\n2018-07-25  0.5006  NaN\n2018-07-26  0.3101  NaN\n2018-07-27  0.6395  NaN\n2018-07-28  0.1507  NaN\n2018-07-29  0.5697  NaN\n2018-07-30  0.8901  NaN\n2018-07-31  0.8223  NaN\n2018-08-01  0.6296  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-23  0.5809\n2017-11-24  0.7959\n2017-11-25  0.6081\n2017-11-26  0.8327\n2017-11-27  0.915\n2017-11-28  0.3677\n2017-11-29  0.9722\n2017-11-30  0.7343\n2017-12-01  0.6734\n\u22ee\n2018-07-23  0.8297\n2018-07-24  0.5545\n2018-07-25  0.4583\n2018-07-26  0.4905\n2018-07-27  0.6184\n2018-07-28  0.6384\n2018-07-29  0.8736\n2018-07-30  0.806\n2018-07-31  0.1896\n2018-08-01  0.9202\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.5518\n2017-05-24  0.1798\n2017-05-25  0.5156\n2017-05-26  0.1472\n2017-05-27  0.5241\n2017-05-28  0.2852\n2017-05-29  0.3835\n2017-05-30  0.932\n2017-06-01  0.2269\n\u22ee\n2018-01-23  0.6683\n2018-01-24  0.9267\n2018-01-25  0.6776\n2018-01-26  0.196\n2018-01-27  0.7832\n2018-01-28  0.7677\n2018-01-29  0.3928\n2018-01-30  0.8981\n2018-01-31  0.6023\n2018-02-01  0.361\n\njulia  ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-11-23  0.932\n2017-11-24  0.8638\n2017-11-25  0.4438\n2017-11-26  0.9553\n2017-11-27  0.0964\n2017-11-28  0.9132\n2017-11-29  0.8867\n2017-11-30  0.7884\n2017-12-01  0.2332\n\u22ee\n2018-07-23  0.7102\n2018-07-24  0.6595\n2018-07-25  0.2833\n2018-07-26  0.7241\n2018-07-27  0.1309\n2018-07-28  0.8373\n2018-07-29  0.771\n2018-07-30  0.8725\n2018-07-31  0.4761\n2018-08-01  0.2554\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.2218\n2017-05-24  0.5675\n2017-05-25  0.0981\n2017-05-26  0.1198\n2017-05-27  0.8877\n2017-05-28  0.761\n2017-05-29  0.888\n2017-05-30  0.6103\n2017-06-01  0.7469\n\u22ee\n2018-01-23  0.458\n2018-01-24  0.5883\n2018-01-25  0.9387\n2018-01-26  0.967\n2018-01-27  0.2631\n2018-01-28  0.8149\n2018-01-29  0.5713\n2018-01-30  0.0922\n2018-01-31  0.5377\n2018-02-01  0.4969\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-11-23  0.932   0.1244\n2017-11-24  0.8638  0.486\n2017-11-25  0.4438  0.7694\n2017-11-26  0.9553  0.2564\n2017-11-27  0.0964  0.2249\n2017-11-28  0.9132  0.2018\n2017-11-29  0.8867  0.7154\n2017-11-30  0.7884  0.9007\n2017-12-01  0.2332  0.1263\n\u22ee\n2018-07-23  0.7102  NaN\n2018-07-24  0.6595  NaN\n2018-07-25  0.2833  NaN\n2018-07-26  0.7241  NaN\n2018-07-27  0.1309  NaN\n2018-07-28  0.8373  NaN\n2018-07-29  0.771   NaN\n2018-07-30  0.8725  NaN\n2018-07-31  0.4761  NaN\n2018-08-01  0.2554  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-05-23  NaN     0.2218\n2017-05-24  NaN     0.5675\n2017-05-25  NaN     0.0981\n2017-05-26  NaN     0.1198\n2017-05-27  NaN     0.8877\n2017-05-28  NaN     0.761\n2017-05-29  NaN     0.888\n2017-05-30  NaN     0.6103\n2017-06-01  NaN     0.7469\n\u22ee\n2018-01-23  0.8693  0.9288\n2018-01-24  0.7044  0.7502\n2018-01-25  0.0579  0.0275\n2018-01-26  0.8702  0.458\n2018-01-27  0.6919  0.5883\n2018-01-28  0.2086  0.9387\n2018-01-29  0.066   0.967\n2018-01-30  0.3304  0.2631\n2018-01-31  0.6843  0.8149\n2018-02-01  0.2614  0.5713", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}