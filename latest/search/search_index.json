{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  98.3192   99.4964   100.5704  100.8317\n2017-11-24  96.4178   99.938    99.2238   100.199\n2017-11-25  97.6629   98.8944   99.9083   99.6547\n2017-11-26  98.529    99.2285   99.8186   99.2315\n2017-11-27  97.7478   100.2484  100.486   99.3285\n2017-11-28  96.8123   101.3399  100.1651  100.3124\n2017-11-29  97.5629   102.6531  100.188   99.6378\n2017-11-30  97.5946   101.0735  100.2442  100.0542\n2017-12-01  98.4235   99.3071   101.8621  98.7578\n\u22ee\n2018-07-23  113.5843  96.1383   124.0849  97.219\n2018-07-24  112.3176  95.7441   122.0346  96.7158\n2018-07-25  112.9214  95.4346   121.6572  96.7614\n2018-07-26  111.5865  96.4868   122.3778  96.9982\n2018-07-27  110.9158  97.7635   122.1499  95.8687\n2018-07-28  110.4569  97.791    124.2119  94.5797\n2018-07-29  111.3765  96.9964   124.5095  92.7362\n2018-07-30  112.6991  96.6889   125.038   92.2777\n2018-07-31  113.3458  95.6401   123.8469  93.4939\n2018-08-01  113.0684  95.8291   122.5985  95.3242\n\njulia\n X[1]\nIndex       A        B        C         D\n2017-11-23  98.3192  99.4964  100.5704  100.8317\n\njulia\n X[1, :]\nIndex       A        B        C         D\n2017-11-23  98.3192  99.4964  100.5704  100.8317\n\njulia\n X[:, 1]\nIndex       A\n2017-11-23  98.3192\n2017-11-24  96.4178\n2017-11-25  97.6629\n2017-11-26  98.529\n2017-11-27  97.7478\n2017-11-28  96.8123\n2017-11-29  97.5629\n2017-11-30  97.5946\n2017-12-01  98.4235\n\u22ee\n2018-07-23  113.5843\n2018-07-24  112.3176\n2018-07-25  112.9214\n2018-07-26  111.5865\n2018-07-27  110.9158\n2018-07-28  110.4569\n2018-07-29  111.3765\n2018-07-30  112.6991\n2018-07-31  113.3458\n2018-08-01  113.0684\n\njulia\n X[1, 1]\nIndex       A\n2017-11-23  98.3192\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  98.6633   98.8542   100.6007  100.3052\n2017-11-24  97.1534   99.7687   102.2013  100.0276\n2017-11-25  97.2188   100.8937  102.9409  100.2823\n2017-11-26  99.9508   100.0184  102.5265  100.5513\n2017-11-27  97.9025   100.214   101.2728  100.7348\n2017-11-28  98.063    99.5362   101.7172  100.6809\n2017-11-29  98.5032   99.1744   102.3177  99.8088\n2017-11-30  97.9201   97.3282   102.661   99.9924\n2017-12-01  96.4162   97.2255   101.1651  99.7464\n\u22ee\n2018-07-23  106.9786  126.0232  90.316    113.4061\n2018-07-24  109.4582  125.4632  90.6158   111.8527\n2018-07-25  107.1325  125.0482  89.8823   110.4822\n2018-07-26  108.9247  126.2122  89.7023   112.6914\n2018-07-27  108.0124  128.3294  90.3522   112.9228\n2018-07-28  107.5786  127.8156  90.0506   110.504\n2018-07-29  108.5244  127.9824  88.5537   110.1997\n2018-07-30  110.0493  128.5962  89.4069   109.5091\n2018-07-31  110.5581  128.7811  89.5631   109.0159\n2018-08-01  109.7906  127.6826  89.4851   108.7848\n\njulia\n X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-11-23  98.6633   98.8542   100.6007  100.3052\n2017-11-24  97.1534   99.7687   102.2013  100.0276\n2017-11-25  97.2188   100.8937  102.9409  100.2823\n2017-11-26  99.9508   100.0184  102.5265  100.5513\n2017-11-27  97.9025   100.214   101.2728  100.7348\n2017-11-28  98.063    99.5362   101.7172  100.6809\n2017-11-29  98.5032   99.1744   102.3177  99.8088\n2017-11-30  97.9201   97.3282   102.661   99.9924\n2017-12-01  96.4162   97.2255   101.1651  99.7464\n\u22ee\n2018-07-23  106.9786  126.0232  90.316    113.4061\n2018-07-24  109.4582  125.4632  90.6158   111.8527\n2018-07-25  107.1325  125.0482  89.8823   110.4822\n2018-07-26  108.9247  126.2122  89.7023   112.6914\n2018-07-27  108.0124  128.3294  90.3522   112.9228\n2018-07-28  107.5786  127.8156  90.0506   110.504\n2018-07-29  108.5244  127.9824  88.5537   110.1997\n2018-07-30  110.0493  128.5962  89.4069   109.5091\n2018-07-31  110.5581  128.7811  89.5631   109.0159\n2018-08-01  109.7906  127.6826  89.4851   108.7848\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-26  99.9508\n2017-11-27  97.9025\n2017-11-30  97.9201\n2017-12-01  96.4162\n2017-12-03  98.8117\n2017-12-05  97.5913\n2017-12-06  96.6438\n2017-12-08  98.8517\n2017-12-09  99.1201\n\u22ee\n2018-07-08  101.4499\n2018-07-09  101.4684\n2018-07-14  104.0806\n2018-07-15  103.8815\n2018-07-18  106.6848\n2018-07-20  107.8469\n2018-07-22  106.7115\n2018-07-23  106.9786\n2018-07-24  109.4582\n2018-07-27  108.0124\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-24  97.1534\n2017-11-26  99.9508\n2017-11-27  97.9025\n2017-11-29  98.5032\n2017-12-01  96.4162\n2017-12-03  98.8117\n2017-12-05  97.5913\n2017-12-07  97.1517\n2017-12-10  99.125\n\u22ee\n2018-07-13  103.0368\n2018-07-14  104.0806\n2018-07-16  104.2628\n2018-07-21  106.4829\n2018-07-22  106.7115\n2018-07-25  107.1325\n2018-07-27  108.0124\n2018-07-28  107.5786\n2018-07-31  110.5581\n2018-08-01  109.7906\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.7242  100.2486  101.0566  101.2282\n2017-11-24  101.8939  99.4247   99.7377   100.5264\n2017-11-25  102.2794  100.0931  102.5235  100.4557\n2017-11-26  103.9967  99.0487   104.4304  101.1514\n2017-11-27  104.8213  101.1359  104.5915  101.1678\n2017-11-28  103.1712  99.2056   105.2518  101.2569\n2017-11-29  102.4331  99.367    105.886   100.9497\n2017-11-30  103.5421  99.4503   105.2759  100.3756\n2017-12-01  103.8071  98.4422   105.1979  100.3658\n\u22ee\n2018-07-23  89.994    80.8179   119.5804  95.2426\n2018-07-24  89.545    80.2439   119.6887  93.8265\n2018-07-25  91.5985   79.0699   117.3206  94.0113\n2018-07-26  90.7056   77.7225   116.9586  93.2299\n2018-07-27  93.2364   78.2996   118.3632  92.6614\n2018-07-28  95.2329   77.5741   118.3211  91.9596\n2018-07-29  96.948    77.0484   119.0267  91.8598\n2018-07-30  96.946    78.0964   118.3545  91.6659\n2018-07-31  97.6952   76.9705   118.7268  93.4225\n2018-08-01  97.1613   77.7893   120.1477  94.417\n\njulia\n X[1:10, :]\nIndex       A         B         C         D\n2017-11-23  100.7242  100.2486  101.0566  101.2282\n2017-11-24  101.8939  99.4247   99.7377   100.5264\n2017-11-25  102.2794  100.0931  102.5235  100.4557\n2017-11-26  103.9967  99.0487   104.4304  101.1514\n2017-11-27  104.8213  101.1359  104.5915  101.1678\n2017-11-28  103.1712  99.2056   105.2518  101.2569\n2017-11-29  102.4331  99.367    105.886   100.9497\n2017-11-30  103.5421  99.4503   105.2759  100.3756\n2017-12-01  103.8071  98.4422   105.1979  100.3658\n2017-12-02  103.5275  97.9944   105.1206  99.2056\n\njulia\n X[end-100:end, 2:3]\nIndex       B        C\n2018-04-23  77.7414  122.9209\n2018-04-24  79.4647  122.0431\n2018-04-25  79.1268  122.4928\n2018-04-26  79.8052  122.2012\n2018-04-27  79.5642  121.9928\n2018-04-28  79.7178  120.5711\n2018-04-29  78.4999  119.76\n2018-04-30  76.7721  119.6802\n2018-05-01  77.0487  118.1124\n\u22ee\n2018-07-23  80.8179  119.5804\n2018-07-24  80.2439  119.6887\n2018-07-25  79.0699  117.3206\n2018-07-26  77.7225  116.9586\n2018-07-27  78.2996  118.3632\n2018-07-28  77.5741  118.3211\n2018-07-29  77.0484  119.0267\n2018-07-30  78.0964  118.3545\n2018-07-31  76.9705  118.7268\n2018-08-01  77.7893  120.1477\n\njulia\n X[end, 2:end]\nIndex       B        C         D\n2018-08-01  77.7893  120.1477  94.417\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.2822  99.9927   99.5979   97.3696\n2017-11-24  101.9219  101.611   100.2164  98.5306\n2017-11-25  103.1006  101.0448  99.478    99.4351\n2017-11-26  104.9948  103.4361  100.7554  97.7748\n2017-11-27  105.5567  102.569   99.5185   98.7266\n2017-11-28  106.9565  102.231   100.7553  98.4182\n2017-11-29  106.8111  101.7379  101.7858  97.794\n2017-11-30  106.6676  101.8881  98.7984   97.4519\n2017-12-01  105.777   101.7958  97.9808   99.5179\n\u22ee\n2018-07-23  76.1681   115.1038  119.3501  105.515\n2018-07-24  75.7027   115.8708  120.3812  105.6435\n2018-07-25  76.585    115.102   121.2083  105.2403\n2018-07-26  75.391    115.5545  120.9111  107.8564\n2018-07-27  76.1072   114.2795  121.0371  109.7502\n2018-07-28  77.2945   114.8218  120.8204  109.5256\n2018-07-29  77.5833   116.1666  119.4675  107.8609\n2018-07-30  76.7263   115.8583  118.7783  106.525\n2018-07-31  77.017    115.9767  117.106   107.9162\n2018-08-01  75.908    116.3623  117.8233  107.1797\n\njulia\n X[:, :A]\nIndex       A\n2017-11-23  100.2822\n2017-11-24  101.9219\n2017-11-25  103.1006\n2017-11-26  104.9948\n2017-11-27  105.5567\n2017-11-28  106.9565\n2017-11-29  106.8111\n2017-11-30  106.6676\n2017-12-01  105.777\n\u22ee\n2018-07-23  76.1681\n2018-07-24  75.7027\n2018-07-25  76.585\n2018-07-26  75.391\n2018-07-27  76.1072\n2018-07-28  77.2945\n2018-07-29  77.5833\n2018-07-30  76.7263\n2018-07-31  77.017\n2018-08-01  75.908\n\njulia\n X[:, [:B, :D]]\nIndex       B         D\n2017-11-23  99.9927   97.3696\n2017-11-24  101.611   98.5306\n2017-11-25  101.0448  99.4351\n2017-11-26  103.4361  97.7748\n2017-11-27  102.569   98.7266\n2017-11-28  102.231   98.4182\n2017-11-29  101.7379  97.794\n2017-11-30  101.8881  97.4519\n2017-12-01  101.7958  99.5179\n\u22ee\n2018-07-23  115.1038  105.515\n2018-07-24  115.8708  105.6435\n2018-07-25  115.102   105.2403\n2018-07-26  115.5545  107.8564\n2018-07-27  114.2795  109.7502\n2018-07-28  114.8218  109.5256\n2018-07-29  116.1666  107.8609\n2018-07-30  115.8583  106.525\n2018-07-31  115.9767  107.9162\n2018-08-01  116.3623  107.1797\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C         D\n2016-01-01  98.6355   100.2439  98.3429   99.5146\n2016-01-02  98.8344   100.9326  99.4969   99.7721\n2016-01-03  98.326    101.3728  101.2048  99.6251\n2016-01-04  98.3451   99.3975   99.3633   100.7114\n2016-01-05  98.9549   100.6375  99.7632   101.8935\n2016-01-06  97.4128   100.7524  99.4342   102.4067\n2016-01-07  96.4605   100.6415  98.9931   103.2832\n2016-01-08  97.1504   100.7084  99.1022   101.9398\n2016-01-09  96.3036   100.5476  99.9372   102.5721\n\u22ee\n2017-12-22  114.8707  51.3275   116.8742  115.6574\n2017-12-23  114.2831  52.0193   116.4485  117.4699\n2017-12-24  113.9258  53.8134   116.2619  117.9918\n2017-12-25  113.4838  56.1629   116.9536  118.0234\n2017-12-26  111.5514  56.5348   117.0817  117.1842\n2017-12-27  112.6587  56.4338   117.3636  119.677\n2017-12-28  114.1179  55.5099   118.533   121.0175\n2017-12-29  113.591   55.6933   117.7791  119.8985\n2017-12-30  112.6425  54.499    118.1593  120.8823\n2017-12-31  112.1165  54.8212   116.952   121.313\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A         B        C         D\n2017-07-01  123.2492  54.5431  129.8842  116.0977\n\njulia\n X[\n2016\n]  # whole year\nIndex       A        B         C         D\n2016-01-01  98.6355  100.2439  98.3429   99.5146\n2016-01-02  98.8344  100.9326  99.4969   99.7721\n2016-01-03  98.326   101.3728  101.2048  99.6251\n2016-01-04  98.3451  99.3975   99.3633   100.7114\n2016-01-05  98.9549  100.6375  99.7632   101.8935\n2016-01-06  97.4128  100.7524  99.4342   102.4067\n2016-01-07  96.4605  100.6415  98.9931   103.2832\n2016-01-08  97.1504  100.7084  99.1022   101.9398\n2016-01-09  96.3036  100.5476  99.9372   102.5721\n\u22ee\n2016-12-22  100.365  74.241    117.026   132.3919\n2016-12-23  98.9212  74.0894   115.7853  132.5399\n2016-12-24  98.5964  72.3086   116.2551  132.9057\n2016-12-25  98.1665  70.2486   118.2188  133.8731\n2016-12-26  98.6555  69.5133   117.8972  131.9641\n2016-12-27  98.2978  69.8855   117.5002  131.692\n2016-12-28  97.7753  70.7703   118.3781  132.6271\n2016-12-29  96.6782  71.4259   117.4384  132.5587\n2016-12-30  96.5826  70.9096   118.5227  132.3853\n2016-12-31  95.4603  68.7      118.2514  131.4355\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  98.3192   99.4964   100.5704  100.8317\n2017-11-24  96.4178   99.938    99.2238   100.199\n2017-11-25  97.6629   98.8944   99.9083   99.6547\n2017-11-26  98.529    99.2285   99.8186   99.2315\n2017-11-27  97.7478   100.2484  100.486   99.3285\n2017-11-28  96.8123   101.3399  100.1651  100.3124\n2017-11-29  97.5629   102.6531  100.188   99.6378\n2017-11-30  97.5946   101.0735  100.2442  100.0542\n2017-12-01  98.4235   99.3071   101.8621  98.7578\n\u22ee\n2018-07-23  113.5843  96.1383   124.0849  97.219\n2018-07-24  112.3176  95.7441   122.0346  96.7158\n2018-07-25  112.9214  95.4346   121.6572  96.7614\n2018-07-26  111.5865  96.4868   122.3778  96.9982\n2018-07-27  110.9158  97.7635   122.1499  95.8687\n2018-07-28  110.4569  97.791    124.2119  94.5797\n2018-07-29  111.3765  96.9964   124.5095  92.7362\n2018-07-30  112.6991  96.6889   125.038   92.2777\n2018-07-31  113.3458  95.6401   123.8469  93.4939\n2018-08-01  113.0684  95.8291   122.5985  95.3242\n\njulia  X[1]\nIndex       A        B        C         D\n2017-11-23  98.3192  99.4964  100.5704  100.8317\n\njulia  X[1, :]\nIndex       A        B        C         D\n2017-11-23  98.3192  99.4964  100.5704  100.8317\n\njulia  X[:, 1]\nIndex       A\n2017-11-23  98.3192\n2017-11-24  96.4178\n2017-11-25  97.6629\n2017-11-26  98.529\n2017-11-27  97.7478\n2017-11-28  96.8123\n2017-11-29  97.5629\n2017-11-30  97.5946\n2017-12-01  98.4235\n\u22ee\n2018-07-23  113.5843\n2018-07-24  112.3176\n2018-07-25  112.9214\n2018-07-26  111.5865\n2018-07-27  110.9158\n2018-07-28  110.4569\n2018-07-29  111.3765\n2018-07-30  112.6991\n2018-07-31  113.3458\n2018-08-01  113.0684\n\njulia  X[1, 1]\nIndex       A\n2017-11-23  98.3192", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  98.6633   98.8542   100.6007  100.3052\n2017-11-24  97.1534   99.7687   102.2013  100.0276\n2017-11-25  97.2188   100.8937  102.9409  100.2823\n2017-11-26  99.9508   100.0184  102.5265  100.5513\n2017-11-27  97.9025   100.214   101.2728  100.7348\n2017-11-28  98.063    99.5362   101.7172  100.6809\n2017-11-29  98.5032   99.1744   102.3177  99.8088\n2017-11-30  97.9201   97.3282   102.661   99.9924\n2017-12-01  96.4162   97.2255   101.1651  99.7464\n\u22ee\n2018-07-23  106.9786  126.0232  90.316    113.4061\n2018-07-24  109.4582  125.4632  90.6158   111.8527\n2018-07-25  107.1325  125.0482  89.8823   110.4822\n2018-07-26  108.9247  126.2122  89.7023   112.6914\n2018-07-27  108.0124  128.3294  90.3522   112.9228\n2018-07-28  107.5786  127.8156  90.0506   110.504\n2018-07-29  108.5244  127.9824  88.5537   110.1997\n2018-07-30  110.0493  128.5962  89.4069   109.5091\n2018-07-31  110.5581  128.7811  89.5631   109.0159\n2018-08-01  109.7906  127.6826  89.4851   108.7848\n\njulia  X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-11-23  98.6633   98.8542   100.6007  100.3052\n2017-11-24  97.1534   99.7687   102.2013  100.0276\n2017-11-25  97.2188   100.8937  102.9409  100.2823\n2017-11-26  99.9508   100.0184  102.5265  100.5513\n2017-11-27  97.9025   100.214   101.2728  100.7348\n2017-11-28  98.063    99.5362   101.7172  100.6809\n2017-11-29  98.5032   99.1744   102.3177  99.8088\n2017-11-30  97.9201   97.3282   102.661   99.9924\n2017-12-01  96.4162   97.2255   101.1651  99.7464\n\u22ee\n2018-07-23  106.9786  126.0232  90.316    113.4061\n2018-07-24  109.4582  125.4632  90.6158   111.8527\n2018-07-25  107.1325  125.0482  89.8823   110.4822\n2018-07-26  108.9247  126.2122  89.7023   112.6914\n2018-07-27  108.0124  128.3294  90.3522   112.9228\n2018-07-28  107.5786  127.8156  90.0506   110.504\n2018-07-29  108.5244  127.9824  88.5537   110.1997\n2018-07-30  110.0493  128.5962  89.4069   109.5091\n2018-07-31  110.5581  128.7811  89.5631   109.0159\n2018-08-01  109.7906  127.6826  89.4851   108.7848\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-26  99.9508\n2017-11-27  97.9025\n2017-11-30  97.9201\n2017-12-01  96.4162\n2017-12-03  98.8117\n2017-12-05  97.5913\n2017-12-06  96.6438\n2017-12-08  98.8517\n2017-12-09  99.1201\n\u22ee\n2018-07-08  101.4499\n2018-07-09  101.4684\n2018-07-14  104.0806\n2018-07-15  103.8815\n2018-07-18  106.6848\n2018-07-20  107.8469\n2018-07-22  106.7115\n2018-07-23  106.9786\n2018-07-24  109.4582\n2018-07-27  108.0124\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-24  97.1534\n2017-11-26  99.9508\n2017-11-27  97.9025\n2017-11-29  98.5032\n2017-12-01  96.4162\n2017-12-03  98.8117\n2017-12-05  97.5913\n2017-12-07  97.1517\n2017-12-10  99.125\n\u22ee\n2018-07-13  103.0368\n2018-07-14  104.0806\n2018-07-16  104.2628\n2018-07-21  106.4829\n2018-07-22  106.7115\n2018-07-25  107.1325\n2018-07-27  108.0124\n2018-07-28  107.5786\n2018-07-31  110.5581\n2018-08-01  109.7906", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.7242  100.2486  101.0566  101.2282\n2017-11-24  101.8939  99.4247   99.7377   100.5264\n2017-11-25  102.2794  100.0931  102.5235  100.4557\n2017-11-26  103.9967  99.0487   104.4304  101.1514\n2017-11-27  104.8213  101.1359  104.5915  101.1678\n2017-11-28  103.1712  99.2056   105.2518  101.2569\n2017-11-29  102.4331  99.367    105.886   100.9497\n2017-11-30  103.5421  99.4503   105.2759  100.3756\n2017-12-01  103.8071  98.4422   105.1979  100.3658\n\u22ee\n2018-07-23  89.994    80.8179   119.5804  95.2426\n2018-07-24  89.545    80.2439   119.6887  93.8265\n2018-07-25  91.5985   79.0699   117.3206  94.0113\n2018-07-26  90.7056   77.7225   116.9586  93.2299\n2018-07-27  93.2364   78.2996   118.3632  92.6614\n2018-07-28  95.2329   77.5741   118.3211  91.9596\n2018-07-29  96.948    77.0484   119.0267  91.8598\n2018-07-30  96.946    78.0964   118.3545  91.6659\n2018-07-31  97.6952   76.9705   118.7268  93.4225\n2018-08-01  97.1613   77.7893   120.1477  94.417\n\njulia  X[1:10, :]\nIndex       A         B         C         D\n2017-11-23  100.7242  100.2486  101.0566  101.2282\n2017-11-24  101.8939  99.4247   99.7377   100.5264\n2017-11-25  102.2794  100.0931  102.5235  100.4557\n2017-11-26  103.9967  99.0487   104.4304  101.1514\n2017-11-27  104.8213  101.1359  104.5915  101.1678\n2017-11-28  103.1712  99.2056   105.2518  101.2569\n2017-11-29  102.4331  99.367    105.886   100.9497\n2017-11-30  103.5421  99.4503   105.2759  100.3756\n2017-12-01  103.8071  98.4422   105.1979  100.3658\n2017-12-02  103.5275  97.9944   105.1206  99.2056\n\njulia  X[end-100:end, 2:3]\nIndex       B        C\n2018-04-23  77.7414  122.9209\n2018-04-24  79.4647  122.0431\n2018-04-25  79.1268  122.4928\n2018-04-26  79.8052  122.2012\n2018-04-27  79.5642  121.9928\n2018-04-28  79.7178  120.5711\n2018-04-29  78.4999  119.76\n2018-04-30  76.7721  119.6802\n2018-05-01  77.0487  118.1124\n\u22ee\n2018-07-23  80.8179  119.5804\n2018-07-24  80.2439  119.6887\n2018-07-25  79.0699  117.3206\n2018-07-26  77.7225  116.9586\n2018-07-27  78.2996  118.3632\n2018-07-28  77.5741  118.3211\n2018-07-29  77.0484  119.0267\n2018-07-30  78.0964  118.3545\n2018-07-31  76.9705  118.7268\n2018-08-01  77.7893  120.1477\n\njulia  X[end, 2:end]\nIndex       B        C         D\n2018-08-01  77.7893  120.1477  94.417", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.2822  99.9927   99.5979   97.3696\n2017-11-24  101.9219  101.611   100.2164  98.5306\n2017-11-25  103.1006  101.0448  99.478    99.4351\n2017-11-26  104.9948  103.4361  100.7554  97.7748\n2017-11-27  105.5567  102.569   99.5185   98.7266\n2017-11-28  106.9565  102.231   100.7553  98.4182\n2017-11-29  106.8111  101.7379  101.7858  97.794\n2017-11-30  106.6676  101.8881  98.7984   97.4519\n2017-12-01  105.777   101.7958  97.9808   99.5179\n\u22ee\n2018-07-23  76.1681   115.1038  119.3501  105.515\n2018-07-24  75.7027   115.8708  120.3812  105.6435\n2018-07-25  76.585    115.102   121.2083  105.2403\n2018-07-26  75.391    115.5545  120.9111  107.8564\n2018-07-27  76.1072   114.2795  121.0371  109.7502\n2018-07-28  77.2945   114.8218  120.8204  109.5256\n2018-07-29  77.5833   116.1666  119.4675  107.8609\n2018-07-30  76.7263   115.8583  118.7783  106.525\n2018-07-31  77.017    115.9767  117.106   107.9162\n2018-08-01  75.908    116.3623  117.8233  107.1797\n\njulia  X[:, :A]\nIndex       A\n2017-11-23  100.2822\n2017-11-24  101.9219\n2017-11-25  103.1006\n2017-11-26  104.9948\n2017-11-27  105.5567\n2017-11-28  106.9565\n2017-11-29  106.8111\n2017-11-30  106.6676\n2017-12-01  105.777\n\u22ee\n2018-07-23  76.1681\n2018-07-24  75.7027\n2018-07-25  76.585\n2018-07-26  75.391\n2018-07-27  76.1072\n2018-07-28  77.2945\n2018-07-29  77.5833\n2018-07-30  76.7263\n2018-07-31  77.017\n2018-08-01  75.908\n\njulia  X[:, [:B, :D]]\nIndex       B         D\n2017-11-23  99.9927   97.3696\n2017-11-24  101.611   98.5306\n2017-11-25  101.0448  99.4351\n2017-11-26  103.4361  97.7748\n2017-11-27  102.569   98.7266\n2017-11-28  102.231   98.4182\n2017-11-29  101.7379  97.794\n2017-11-30  101.8881  97.4519\n2017-12-01  101.7958  99.5179\n\u22ee\n2018-07-23  115.1038  105.515\n2018-07-24  115.8708  105.6435\n2018-07-25  115.102   105.2403\n2018-07-26  115.5545  107.8564\n2018-07-27  114.2795  109.7502\n2018-07-28  114.8218  109.5256\n2018-07-29  116.1666  107.8609\n2018-07-30  115.8583  106.525\n2018-07-31  115.9767  107.9162\n2018-08-01  116.3623  107.1797", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C         D\n2016-01-01  98.6355   100.2439  98.3429   99.5146\n2016-01-02  98.8344   100.9326  99.4969   99.7721\n2016-01-03  98.326    101.3728  101.2048  99.6251\n2016-01-04  98.3451   99.3975   99.3633   100.7114\n2016-01-05  98.9549   100.6375  99.7632   101.8935\n2016-01-06  97.4128   100.7524  99.4342   102.4067\n2016-01-07  96.4605   100.6415  98.9931   103.2832\n2016-01-08  97.1504   100.7084  99.1022   101.9398\n2016-01-09  96.3036   100.5476  99.9372   102.5721\n\u22ee\n2017-12-22  114.8707  51.3275   116.8742  115.6574\n2017-12-23  114.2831  52.0193   116.4485  117.4699\n2017-12-24  113.9258  53.8134   116.2619  117.9918\n2017-12-25  113.4838  56.1629   116.9536  118.0234\n2017-12-26  111.5514  56.5348   117.0817  117.1842\n2017-12-27  112.6587  56.4338   117.3636  119.677\n2017-12-28  114.1179  55.5099   118.533   121.0175\n2017-12-29  113.591   55.6933   117.7791  119.8985\n2017-12-30  112.6425  54.499    118.1593  120.8823\n2017-12-31  112.1165  54.8212   116.952   121.313\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A         B        C         D\n2017-07-01  123.2492  54.5431  129.8842  116.0977\n\njulia  X[ 2016 ]  # whole year\nIndex       A        B         C         D\n2016-01-01  98.6355  100.2439  98.3429   99.5146\n2016-01-02  98.8344  100.9326  99.4969   99.7721\n2016-01-03  98.326   101.3728  101.2048  99.6251\n2016-01-04  98.3451  99.3975   99.3633   100.7114\n2016-01-05  98.9549  100.6375  99.7632   101.8935\n2016-01-06  97.4128  100.7524  99.4342   102.4067\n2016-01-07  96.4605  100.6415  98.9931   103.2832\n2016-01-08  97.1504  100.7084  99.1022   101.9398\n2016-01-09  96.3036  100.5476  99.9372   102.5721\n\u22ee\n2016-12-22  100.365  74.241    117.026   132.3919\n2016-12-23  98.9212  74.0894   115.7853  132.5399\n2016-12-24  98.5964  72.3086   116.2551  132.9057\n2016-12-25  98.1665  70.2486   118.2188  133.8731\n2016-12-26  98.6555  69.5133   117.8972  131.9641\n2016-12-27  98.2978  69.8855   117.5002  131.692\n2016-12-28  97.7753  70.7703   118.3781  132.6271\n2016-12-29  96.6782  71.4259   117.4384  132.5587\n2016-12-30  96.5826  70.9096   118.5227  132.3853\n2016-12-31  95.4603  68.7      118.2514  131.4355\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-23  0.5095\n2017-11-24  0.4623\n2017-11-25  0.0147\n2017-11-26  0.1113\n2017-11-27  0.6867\n2017-11-28  0.9057\n2017-11-29  0.2987\n2017-11-30  0.1693\n2017-12-01  0.1064\n\u22ee\n2018-07-23  0.6491\n2018-07-24  0.851\n2018-07-25  0.1406\n2018-07-26  0.7889\n2018-07-27  0.9765\n2018-07-28  0.4369\n2018-07-29  0.9545\n2018-07-30  0.0257\n2018-07-31  0.3125\n2018-08-01  0.3182\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.2717\n2017-05-24  0.8317\n2017-05-25  0.0317\n2017-05-26  0.9593\n2017-05-27  0.1105\n2017-05-28  0.5218\n2017-05-29  0.7892\n2017-05-30  0.6111\n2017-06-01  0.9346\n\u22ee\n2018-01-23  0.8753\n2018-01-24  0.1974\n2018-01-25  0.0542\n2018-01-26  0.6852\n2018-01-27  0.768\n2018-01-28  0.0818\n2018-01-29  0.2244\n2018-01-30  0.8542\n2018-01-31  0.9626\n2018-02-01  0.7282\n\njulia\n [x y]\nIndex       A       A\n2017-05-23  NaN     0.2717\n2017-05-24  NaN     0.8317\n2017-05-25  NaN     0.0317\n2017-05-26  NaN     0.9593\n2017-05-27  NaN     0.1105\n2017-05-28  NaN     0.5218\n2017-05-29  NaN     0.7892\n2017-05-30  NaN     0.6111\n2017-06-01  NaN     0.9346\n\u22ee\n2018-07-23  0.6491  NaN\n2018-07-24  0.851   NaN\n2018-07-25  0.1406  NaN\n2018-07-26  0.7889  NaN\n2018-07-27  0.9765  NaN\n2018-07-28  0.4369  NaN\n2018-07-29  0.9545  NaN\n2018-07-30  0.0257  NaN\n2018-07-31  0.3125  NaN\n2018-08-01  0.3182  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-23  0.5628\n2017-11-24  0.8038\n2017-11-25  0.5824\n2017-11-26  0.3681\n2017-11-27  0.7504\n2017-11-28  0.4801\n2017-11-29  0.1422\n2017-11-30  0.3085\n2017-12-01  0.597\n\u22ee\n2018-07-23  0.4516\n2018-07-24  0.276\n2018-07-25  0.8413\n2018-07-26  0.9844\n2018-07-27  0.5042\n2018-07-28  0.9041\n2018-07-29  0.9391\n2018-07-30  0.0022\n2018-07-31  0.1766\n2018-08-01  0.2887\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.3147\n2017-05-24  0.1483\n2017-05-25  0.3737\n2017-05-26  0.5578\n2017-05-27  0.6266\n2017-05-28  0.9613\n2017-05-29  0.8483\n2017-05-30  0.5449\n2017-06-01  0.8571\n\u22ee\n2018-01-23  0.5409\n2018-01-24  0.2372\n2018-01-25  0.9672\n2018-01-26  0.5207\n2018-01-27  0.4014\n2018-01-28  0.1666\n2018-01-29  0.3459\n2018-01-30  0.6791\n2018-01-31  0.468\n2018-02-01  0.0317\n\njulia\n ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-23  0.874\n2017-11-24  0.2374\n2017-11-25  0.7942\n2017-11-26  0.3981\n2017-11-27  0.0811\n2017-11-28  0.6455\n2017-11-29  0.4148\n2017-11-30  0.5448\n2017-12-01  0.7751\n\u22ee\n2018-07-23  0.7492\n2018-07-24  0.8921\n2018-07-25  0.2477\n2018-07-26  0.2605\n2018-07-27  0.6114\n2018-07-28  0.3575\n2018-07-29  0.599\n2018-07-30  0.5595\n2018-07-31  0.7855\n2018-08-01  0.4335\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.0219\n2017-05-24  0.7113\n2017-05-25  0.8092\n2017-05-26  0.111\n2017-05-27  0.9309\n2017-05-28  0.1044\n2017-05-29  0.2288\n2017-05-30  0.565\n2017-06-01  0.8834\n\u22ee\n2018-01-23  0.9805\n2018-01-24  0.269\n2018-01-25  0.0877\n2018-01-26  0.3737\n2018-01-27  0.2237\n2018-01-28  0.6557\n2018-01-29  0.9302\n2018-01-30  0.0373\n2018-01-31  0.0863\n2018-02-01  0.9857\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-11-23  0.874   0.8872\n2017-11-24  0.2374  0.4043\n2017-11-25  0.7942  0.5683\n2017-11-26  0.3981  0.15\n2017-11-27  0.0811  0.1068\n2017-11-28  0.6455  0.4502\n2017-11-29  0.4148  0.8994\n2017-11-30  0.5448  0.4404\n2017-12-01  0.7751  0.7311\n\u22ee\n2018-07-23  0.7492  NaN\n2018-07-24  0.8921  NaN\n2018-07-25  0.2477  NaN\n2018-07-26  0.2605  NaN\n2018-07-27  0.6114  NaN\n2018-07-28  0.3575  NaN\n2018-07-29  0.599   NaN\n2018-07-30  0.5595  NaN\n2018-07-31  0.7855  NaN\n2018-08-01  0.4335  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-05-23  NaN     0.0219\n2017-05-24  NaN     0.7113\n2017-05-25  NaN     0.8092\n2017-05-26  NaN     0.111\n2017-05-27  NaN     0.9309\n2017-05-28  NaN     0.1044\n2017-05-29  NaN     0.2288\n2017-05-30  NaN     0.565\n2017-06-01  NaN     0.8834\n\u22ee\n2018-01-23  0.7189  0.4672\n2018-01-24  0.0041  0.0237\n2018-01-25  0.8799  0.2246\n2018-01-26  0.4133  0.9805\n2018-01-27  0.5707  0.269\n2018-01-28  0.4537  0.0877\n2018-01-29  0.6105  0.3737\n2018-01-30  0.6637  0.2237\n2018-01-31  0.8582  0.6557\n2018-02-01  0.85    0.9302", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-23  0.5095\n2017-11-24  0.4623\n2017-11-25  0.0147\n2017-11-26  0.1113\n2017-11-27  0.6867\n2017-11-28  0.9057\n2017-11-29  0.2987\n2017-11-30  0.1693\n2017-12-01  0.1064\n\u22ee\n2018-07-23  0.6491\n2018-07-24  0.851\n2018-07-25  0.1406\n2018-07-26  0.7889\n2018-07-27  0.9765\n2018-07-28  0.4369\n2018-07-29  0.9545\n2018-07-30  0.0257\n2018-07-31  0.3125\n2018-08-01  0.3182\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.2717\n2017-05-24  0.8317\n2017-05-25  0.0317\n2017-05-26  0.9593\n2017-05-27  0.1105\n2017-05-28  0.5218\n2017-05-29  0.7892\n2017-05-30  0.6111\n2017-06-01  0.9346\n\u22ee\n2018-01-23  0.8753\n2018-01-24  0.1974\n2018-01-25  0.0542\n2018-01-26  0.6852\n2018-01-27  0.768\n2018-01-28  0.0818\n2018-01-29  0.2244\n2018-01-30  0.8542\n2018-01-31  0.9626\n2018-02-01  0.7282\n\njulia  [x y]\nIndex       A       A\n2017-05-23  NaN     0.2717\n2017-05-24  NaN     0.8317\n2017-05-25  NaN     0.0317\n2017-05-26  NaN     0.9593\n2017-05-27  NaN     0.1105\n2017-05-28  NaN     0.5218\n2017-05-29  NaN     0.7892\n2017-05-30  NaN     0.6111\n2017-06-01  NaN     0.9346\n\u22ee\n2018-07-23  0.6491  NaN\n2018-07-24  0.851   NaN\n2018-07-25  0.1406  NaN\n2018-07-26  0.7889  NaN\n2018-07-27  0.9765  NaN\n2018-07-28  0.4369  NaN\n2018-07-29  0.9545  NaN\n2018-07-30  0.0257  NaN\n2018-07-31  0.3125  NaN\n2018-08-01  0.3182  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-23  0.5628\n2017-11-24  0.8038\n2017-11-25  0.5824\n2017-11-26  0.3681\n2017-11-27  0.7504\n2017-11-28  0.4801\n2017-11-29  0.1422\n2017-11-30  0.3085\n2017-12-01  0.597\n\u22ee\n2018-07-23  0.4516\n2018-07-24  0.276\n2018-07-25  0.8413\n2018-07-26  0.9844\n2018-07-27  0.5042\n2018-07-28  0.9041\n2018-07-29  0.9391\n2018-07-30  0.0022\n2018-07-31  0.1766\n2018-08-01  0.2887\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.3147\n2017-05-24  0.1483\n2017-05-25  0.3737\n2017-05-26  0.5578\n2017-05-27  0.6266\n2017-05-28  0.9613\n2017-05-29  0.8483\n2017-05-30  0.5449\n2017-06-01  0.8571\n\u22ee\n2018-01-23  0.5409\n2018-01-24  0.2372\n2018-01-25  0.9672\n2018-01-26  0.5207\n2018-01-27  0.4014\n2018-01-28  0.1666\n2018-01-29  0.3459\n2018-01-30  0.6791\n2018-01-31  0.468\n2018-02-01  0.0317\n\njulia  ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-11-23  0.874\n2017-11-24  0.2374\n2017-11-25  0.7942\n2017-11-26  0.3981\n2017-11-27  0.0811\n2017-11-28  0.6455\n2017-11-29  0.4148\n2017-11-30  0.5448\n2017-12-01  0.7751\n\u22ee\n2018-07-23  0.7492\n2018-07-24  0.8921\n2018-07-25  0.2477\n2018-07-26  0.2605\n2018-07-27  0.6114\n2018-07-28  0.3575\n2018-07-29  0.599\n2018-07-30  0.5595\n2018-07-31  0.7855\n2018-08-01  0.4335\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.0219\n2017-05-24  0.7113\n2017-05-25  0.8092\n2017-05-26  0.111\n2017-05-27  0.9309\n2017-05-28  0.1044\n2017-05-29  0.2288\n2017-05-30  0.565\n2017-06-01  0.8834\n\u22ee\n2018-01-23  0.9805\n2018-01-24  0.269\n2018-01-25  0.0877\n2018-01-26  0.3737\n2018-01-27  0.2237\n2018-01-28  0.6557\n2018-01-29  0.9302\n2018-01-30  0.0373\n2018-01-31  0.0863\n2018-02-01  0.9857\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-11-23  0.874   0.8872\n2017-11-24  0.2374  0.4043\n2017-11-25  0.7942  0.5683\n2017-11-26  0.3981  0.15\n2017-11-27  0.0811  0.1068\n2017-11-28  0.6455  0.4502\n2017-11-29  0.4148  0.8994\n2017-11-30  0.5448  0.4404\n2017-12-01  0.7751  0.7311\n\u22ee\n2018-07-23  0.7492  NaN\n2018-07-24  0.8921  NaN\n2018-07-25  0.2477  NaN\n2018-07-26  0.2605  NaN\n2018-07-27  0.6114  NaN\n2018-07-28  0.3575  NaN\n2018-07-29  0.599   NaN\n2018-07-30  0.5595  NaN\n2018-07-31  0.7855  NaN\n2018-08-01  0.4335  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-05-23  NaN     0.0219\n2017-05-24  NaN     0.7113\n2017-05-25  NaN     0.8092\n2017-05-26  NaN     0.111\n2017-05-27  NaN     0.9309\n2017-05-28  NaN     0.1044\n2017-05-29  NaN     0.2288\n2017-05-30  NaN     0.565\n2017-06-01  NaN     0.8834\n\u22ee\n2018-01-23  0.7189  0.4672\n2018-01-24  0.0041  0.0237\n2018-01-25  0.8799  0.2246\n2018-01-26  0.4133  0.9805\n2018-01-27  0.5707  0.269\n2018-01-28  0.4537  0.0877\n2018-01-29  0.6105  0.3737\n2018-01-30  0.6637  0.2237\n2018-01-31  0.8582  0.6557\n2018-02-01  0.85    0.9302", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}