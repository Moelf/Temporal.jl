{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B        C         D\n2017-07-12  99.3223   99.1899  99.2904   98.9043\n2017-07-13  98.3407   99.0495  98.8593   98.6791\n2017-07-14  98.8979   99.4358  98.4905   98.4703\n2017-07-15  98.9057   99.675   98.1238   98.6929\n2017-07-16  100.0268  99.8359  98.2409   99.1369\n2017-07-17  99.3638   99.6126  98.3376   101.1642\n2017-07-18  99.5977   98.9654  97.5836   101.959\n2017-07-19  100.582   99.2689  97.4451   101.4866\n2017-07-20  100.9913  97.5621  97.4471   100.4989\n\u22ee\n2018-03-11  112.29    63.1817  127.7107  98.0612\n2018-03-12  113.1927  63.081   127.9128  97.5421\n2018-03-13  114.3981  63.2095  127.5983  98.1253\n2018-03-14  114.0799  62.3793  127.9077  98.9717\n2018-03-15  115.5354  62.5903  128.5921  101.1593\n2018-03-16  113.8202  60.7997  128.3174  103.3935\n2018-03-17  114.2952  59.958   126.154   103.9079\n2018-03-18  114.057   58.6617  127.578   101.4482\n2018-03-19  113.7404  59.3399  128.9224  101.4708\n2018-03-20  114.7158  60.0364  127.5791  102.6929\n\njulia\n X[1]\nIndex       A        B        C        D\n2017-07-12  99.3223  99.1899  99.2904  98.9043\n\njulia\n X[1, :]\nIndex       A        B        C        D\n2017-07-12  99.3223  99.1899  99.2904  98.9043\n\njulia\n X[:, 1]\nIndex       A\n2017-07-12  99.3223\n2017-07-13  98.3407\n2017-07-14  98.8979\n2017-07-15  98.9057\n2017-07-16  100.0268\n2017-07-17  99.3638\n2017-07-18  99.5977\n2017-07-19  100.582\n2017-07-20  100.9913\n\u22ee\n2018-03-11  112.29\n2018-03-12  113.1927\n2018-03-13  114.3981\n2018-03-14  114.0799\n2018-03-15  115.5354\n2018-03-16  113.8202\n2018-03-17  114.2952\n2018-03-18  114.057\n2018-03-19  113.7404\n2018-03-20  114.7158\n\njulia\n X[1, 1]\nIndex       A\n2017-07-12  99.3223\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  99.7685   100.0509  99.3988   101.5621\n2017-07-13  99.8112   99.4387   99.9212   102.0284\n2017-07-14  100.1163  100.7715  100.1808  103.8298\n2017-07-15  99.6736   99.2733   99.691    103.7424\n2017-07-16  98.831    98.5143   99.964    102.3673\n2017-07-17  99.749    98.6057   100.8606  100.1086\n2017-07-18  99.8733   100.1423  100.5014  99.7058\n2017-07-19  100.2552  99.8458   100.1588  101.9507\n2017-07-20  100.1382  99.5901   98.1357   101.535\n\u22ee\n2018-03-11  96.2887   100.0489  132.1981  119.5253\n2018-03-12  94.8899   101.0384  132.8834  119.179\n2018-03-13  95.2134   101.9899  132.5759  118.1662\n2018-03-14  94.2774   102.7379  131.6551  117.6703\n2018-03-15  96.5928   103.0903  130.5048  118.1756\n2018-03-16  97.3105   102.6701  130.3782  118.3853\n2018-03-17  97.7636   103.2919  129.8908  117.9017\n2018-03-18  98.7247   103.0518  131.0748  118.6428\n2018-03-19  97.4813   103.9216  130.6508  118.2261\n2018-03-20  96.7028   102.9487  129.3779  117.67\n\njulia\n X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-07-12  99.7685   100.0509  99.3988   101.5621\n2017-07-13  99.8112   99.4387   99.9212   102.0284\n2017-07-14  100.1163  100.7715  100.1808  103.8298\n2017-07-15  99.6736   99.2733   99.691    103.7424\n2017-07-16  98.831    98.5143   99.964    102.3673\n2017-07-17  99.749    98.6057   100.8606  100.1086\n2017-07-18  99.8733   100.1423  100.5014  99.7058\n2017-07-19  100.2552  99.8458   100.1588  101.9507\n2017-07-20  100.1382  99.5901   98.1357   101.535\n\u22ee\n2018-03-11  96.2887   100.0489  132.1981  119.5253\n2018-03-12  94.8899   101.0384  132.8834  119.179\n2018-03-13  95.2134   101.9899  132.5759  118.1662\n2018-03-14  94.2774   102.7379  131.6551  117.6703\n2018-03-15  96.5928   103.0903  130.5048  118.1756\n2018-03-16  97.3105   102.6701  130.3782  118.3853\n2018-03-17  97.7636   103.2919  129.8908  117.9017\n2018-03-18  98.7247   103.0518  131.0748  118.6428\n2018-03-19  97.4813   103.9216  130.6508  118.2261\n2018-03-20  96.7028   102.9487  129.3779  117.67\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-07-18  99.8733\n2017-07-20  100.1382\n2017-07-25  100.7629\n2017-07-26  101.6633\n2017-07-28  98.9085\n2017-07-31  96.0578\n2017-08-02  98.5291\n2017-08-03  99.5773\n2017-08-04  98.0715\n\u22ee\n2018-02-28  97.156\n2018-03-04  94.544\n2018-03-05  93.6721\n2018-03-06  94.3229\n2018-03-08  96.5706\n2018-03-11  96.2887\n2018-03-13  95.2134\n2018-03-14  94.2774\n2018-03-15  96.5928\n2018-03-18  98.7247\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-07-14  100.1163\n2017-07-16  98.831\n2017-07-18  99.8733\n2017-07-19  100.2552\n2017-07-21  100.9737\n2017-07-22  100.3938\n2017-07-23  101.3243\n2017-07-25  100.7629\n2017-07-26  101.6633\n\u22ee\n2018-03-05  93.6721\n2018-03-06  94.3229\n2018-03-07  95.5645\n2018-03-08  96.5706\n2018-03-10  95.6153\n2018-03-12  94.8899\n2018-03-13  95.2134\n2018-03-14  94.2774\n2018-03-18  98.7247\n2018-03-19  97.4813\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A        B         C         D\n2017-07-12  99.1177  99.7131   100.3449  97.7499\n2017-07-13  97.9879  100.5265  99.6601   96.5604\n2017-07-14  97.9937  100.3904  101.7275  96.3723\n2017-07-15  96.6727  98.9251   102.0934  95.6862\n2017-07-16  97.0628  98.4995   101.6129  94.9272\n2017-07-17  96.9046  99.3474   102.3934  94.0146\n2017-07-18  97.6717  98.2515   101.3468  93.2673\n2017-07-19  96.2583  97.8713   100.8819  94.7708\n2017-07-20  94.5895  98.551    100.0276  94.8469\n\u22ee\n2018-03-11  86.9821  97.6153   86.6883   80.2565\n2018-03-12  87.305   97.0206   84.76     80.7221\n2018-03-13  87.9572  97.6335   85.4449   81.7565\n2018-03-14  88.8935  97.9834   85.202    81.5934\n2018-03-15  89.1897  98.0749   84.6218   81.2227\n2018-03-16  90.7963  99.4896   84.0226   81.5386\n2018-03-17  90.1749  98.2566   83.521    81.4925\n2018-03-18  91.85    98.7266   83.2464   80.5375\n2018-03-19  91.6442  99.4717   84.9189   80.9269\n2018-03-20  91.1482  99.0309   84.5818   80.3913\n\njulia\n X[1:10, :]\nIndex       A        B         C         D\n2017-07-12  99.1177  99.7131   100.3449  97.7499\n2017-07-13  97.9879  100.5265  99.6601   96.5604\n2017-07-14  97.9937  100.3904  101.7275  96.3723\n2017-07-15  96.6727  98.9251   102.0934  95.6862\n2017-07-16  97.0628  98.4995   101.6129  94.9272\n2017-07-17  96.9046  99.3474   102.3934  94.0146\n2017-07-18  97.6717  98.2515   101.3468  93.2673\n2017-07-19  96.2583  97.8713   100.8819  94.7708\n2017-07-20  94.5895  98.551    100.0276  94.8469\n2017-07-21  93.3211  99.3477   98.8247   94.0001\n\njulia\n X[end-100:end, 2:3]\nIndex       B         C\n2017-12-10  99.9665   97.042\n2017-12-11  99.9546   96.9617\n2017-12-12  100.0012  96.1099\n2017-12-13  99.6226   95.3237\n2017-12-14  100.6827  95.8601\n2017-12-15  99.933    95.4119\n2017-12-16  98.8141   95.1433\n2017-12-17  98.9098   94.7546\n2017-12-18  99.3775   93.5232\n\u22ee\n2018-03-11  97.6153   86.6883\n2018-03-12  97.0206   84.76\n2018-03-13  97.6335   85.4449\n2018-03-14  97.9834   85.202\n2018-03-15  98.0749   84.6218\n2018-03-16  99.4896   84.0226\n2018-03-17  98.2566   83.521\n2018-03-18  98.7266   83.2464\n2018-03-19  99.4717   84.9189\n2018-03-20  99.0309   84.5818\n\njulia\n X[end, 2:end]\nIndex       B        C        D\n2018-03-20  99.0309  84.5818  80.3913\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  98.2173   100.4117  100.0722  99.2465\n2017-07-13  97.6679   101.0184  100.6443  98.3321\n2017-07-14  98.1843   99.8001   100.9056  97.645\n2017-07-15  97.7392   97.9303   99.6095   97.3349\n2017-07-16  98.6426   98.6344   99.6633   97.6097\n2017-07-17  99.0421   98.096    99.4013   97.9529\n2017-07-18  99.7363   99.5092   99.9717   97.2555\n2017-07-19  100.5263  98.9447   99.3014   98.4961\n2017-07-20  102.2027  97.7141   98.8561   99.9329\n\u22ee\n2018-03-11  98.9274   116.2673  91.4036   104.3177\n2018-03-12  97.7587   114.5201  90.3848   105.732\n2018-03-13  98.2568   113.3465  90.2993   105.7826\n2018-03-14  97.4053   112.9049  90.4447   105.834\n2018-03-15  96.6771   112.6326  88.2063   106.5929\n2018-03-16  96.5522   113.206   86.8169   104.1261\n2018-03-17  96.8115   114.1692  85.6065   103.7842\n2018-03-18  95.8985   115.3616  86.1694   104.0461\n2018-03-19  97.6225   117.2012  88.3738   103.328\n2018-03-20  96.8863   117.8509  91.0614   102.1116\n\njulia\n X[:, :A]\nIndex       A\n2017-07-12  98.2173\n2017-07-13  97.6679\n2017-07-14  98.1843\n2017-07-15  97.7392\n2017-07-16  98.6426\n2017-07-17  99.0421\n2017-07-18  99.7363\n2017-07-19  100.5263\n2017-07-20  102.2027\n\u22ee\n2018-03-11  98.9274\n2018-03-12  97.7587\n2018-03-13  98.2568\n2018-03-14  97.4053\n2018-03-15  96.6771\n2018-03-16  96.5522\n2018-03-17  96.8115\n2018-03-18  95.8985\n2018-03-19  97.6225\n2018-03-20  96.8863\n\njulia\n X[:, [:B, :D]]\nIndex       B         D\n2017-07-12  100.4117  99.2465\n2017-07-13  101.0184  98.3321\n2017-07-14  99.8001   97.645\n2017-07-15  97.9303   97.3349\n2017-07-16  98.6344   97.6097\n2017-07-17  98.096    97.9529\n2017-07-18  99.5092   97.2555\n2017-07-19  98.9447   98.4961\n2017-07-20  97.7141   99.9329\n\u22ee\n2018-03-11  116.2673  104.3177\n2018-03-12  114.5201  105.732\n2018-03-13  113.3465  105.7826\n2018-03-14  112.9049  105.834\n2018-03-15  112.6326  106.5929\n2018-03-16  113.206   104.1261\n2018-03-17  114.1692  103.7842\n2018-03-18  115.3616  104.0461\n2018-03-19  117.2012  103.328\n2018-03-20  117.8509  102.1116\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A        B         C         D\n2016-01-01  99.1705  100.8654  100.9209  99.5487\n2016-01-02  98.9517  100.4923  99.9178   99.9183\n2016-01-03  98.6368  101.5237  99.5947   99.7095\n2016-01-04  98.056   101.8333  100.1843  99.1341\n2016-01-05  96.5095  102.0172  100.1796  98.3967\n2016-01-06  94.055   102.6601  99.2504   97.7684\n2016-01-07  93.4086  103.7909  98.9425   98.5922\n2016-01-08  93.5116  103.8166  97.9179   97.9169\n2016-01-09  93.043   103.0521  98.0896   98.3225\n\u22ee\n2017-12-22  94.7057  98.0932   65.6357   127.8285\n2017-12-23  94.3558  99.1771   66.9736   128.7999\n2017-12-24  93.9171  98.1745   66.4742   129.1716\n2017-12-25  93.7891  98.7509   66.5475   128.0624\n2017-12-26  93.5891  99.7892   64.6093   126.8876\n2017-12-27  94.1438  98.0596   64.4109   125.1451\n2017-12-28  95.4469  96.7908   65.1134   127.6674\n2017-12-29  94.5138  96.517    65.9134   126.6766\n2017-12-30  96.3201  96.5048   65.9909   126.9602\n2017-12-31  97.9193  96.4081   65.7347   125.532\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A        B        C       D\n2017-07-01  97.5874  95.7649  76.985  123.2316\n\njulia\n X[\n2016\n]  # whole year\nIndex       A        B         C         D\n2016-01-01  99.1705  100.8654  100.9209  99.5487\n2016-01-02  98.9517  100.4923  99.9178   99.9183\n2016-01-03  98.6368  101.5237  99.5947   99.7095\n2016-01-04  98.056   101.8333  100.1843  99.1341\n2016-01-05  96.5095  102.0172  100.1796  98.3967\n2016-01-06  94.055   102.6601  99.2504   97.7684\n2016-01-07  93.4086  103.7909  98.9425   98.5922\n2016-01-08  93.5116  103.8166  97.9179   97.9169\n2016-01-09  93.043   103.0521  98.0896   98.3225\n\u22ee\n2016-12-22  73.1951  88.739    91.5783   117.0506\n2016-12-23  74.7912  88.6704   91.6553   117.4011\n2016-12-24  75.1985  87.9853   91.8648   116.2226\n2016-12-25  74.0441  88.8583   88.4507   114.646\n2016-12-26  74.4626  88.4019   86.6715   113.2258\n2016-12-27  74.5653  88.4642   86.7428   112.7621\n2016-12-28  74.7633  89.0957   87.8058   112.9914\n2016-12-29  76.5877  88.2646   87.6838   112.9654\n2016-12-30  76.2128  88.3903   88.6225   112.0898\n2016-12-31  77.6354  87.8494   88.1785   112.4971\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B        C         D\n2017-07-12  99.3223   99.1899  99.2904   98.9043\n2017-07-13  98.3407   99.0495  98.8593   98.6791\n2017-07-14  98.8979   99.4358  98.4905   98.4703\n2017-07-15  98.9057   99.675   98.1238   98.6929\n2017-07-16  100.0268  99.8359  98.2409   99.1369\n2017-07-17  99.3638   99.6126  98.3376   101.1642\n2017-07-18  99.5977   98.9654  97.5836   101.959\n2017-07-19  100.582   99.2689  97.4451   101.4866\n2017-07-20  100.9913  97.5621  97.4471   100.4989\n\u22ee\n2018-03-11  112.29    63.1817  127.7107  98.0612\n2018-03-12  113.1927  63.081   127.9128  97.5421\n2018-03-13  114.3981  63.2095  127.5983  98.1253\n2018-03-14  114.0799  62.3793  127.9077  98.9717\n2018-03-15  115.5354  62.5903  128.5921  101.1593\n2018-03-16  113.8202  60.7997  128.3174  103.3935\n2018-03-17  114.2952  59.958   126.154   103.9079\n2018-03-18  114.057   58.6617  127.578   101.4482\n2018-03-19  113.7404  59.3399  128.9224  101.4708\n2018-03-20  114.7158  60.0364  127.5791  102.6929\n\njulia  X[1]\nIndex       A        B        C        D\n2017-07-12  99.3223  99.1899  99.2904  98.9043\n\njulia  X[1, :]\nIndex       A        B        C        D\n2017-07-12  99.3223  99.1899  99.2904  98.9043\n\njulia  X[:, 1]\nIndex       A\n2017-07-12  99.3223\n2017-07-13  98.3407\n2017-07-14  98.8979\n2017-07-15  98.9057\n2017-07-16  100.0268\n2017-07-17  99.3638\n2017-07-18  99.5977\n2017-07-19  100.582\n2017-07-20  100.9913\n\u22ee\n2018-03-11  112.29\n2018-03-12  113.1927\n2018-03-13  114.3981\n2018-03-14  114.0799\n2018-03-15  115.5354\n2018-03-16  113.8202\n2018-03-17  114.2952\n2018-03-18  114.057\n2018-03-19  113.7404\n2018-03-20  114.7158\n\njulia  X[1, 1]\nIndex       A\n2017-07-12  99.3223", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  99.7685   100.0509  99.3988   101.5621\n2017-07-13  99.8112   99.4387   99.9212   102.0284\n2017-07-14  100.1163  100.7715  100.1808  103.8298\n2017-07-15  99.6736   99.2733   99.691    103.7424\n2017-07-16  98.831    98.5143   99.964    102.3673\n2017-07-17  99.749    98.6057   100.8606  100.1086\n2017-07-18  99.8733   100.1423  100.5014  99.7058\n2017-07-19  100.2552  99.8458   100.1588  101.9507\n2017-07-20  100.1382  99.5901   98.1357   101.535\n\u22ee\n2018-03-11  96.2887   100.0489  132.1981  119.5253\n2018-03-12  94.8899   101.0384  132.8834  119.179\n2018-03-13  95.2134   101.9899  132.5759  118.1662\n2018-03-14  94.2774   102.7379  131.6551  117.6703\n2018-03-15  96.5928   103.0903  130.5048  118.1756\n2018-03-16  97.3105   102.6701  130.3782  118.3853\n2018-03-17  97.7636   103.2919  129.8908  117.9017\n2018-03-18  98.7247   103.0518  131.0748  118.6428\n2018-03-19  97.4813   103.9216  130.6508  118.2261\n2018-03-20  96.7028   102.9487  129.3779  117.67\n\njulia  X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-07-12  99.7685   100.0509  99.3988   101.5621\n2017-07-13  99.8112   99.4387   99.9212   102.0284\n2017-07-14  100.1163  100.7715  100.1808  103.8298\n2017-07-15  99.6736   99.2733   99.691    103.7424\n2017-07-16  98.831    98.5143   99.964    102.3673\n2017-07-17  99.749    98.6057   100.8606  100.1086\n2017-07-18  99.8733   100.1423  100.5014  99.7058\n2017-07-19  100.2552  99.8458   100.1588  101.9507\n2017-07-20  100.1382  99.5901   98.1357   101.535\n\u22ee\n2018-03-11  96.2887   100.0489  132.1981  119.5253\n2018-03-12  94.8899   101.0384  132.8834  119.179\n2018-03-13  95.2134   101.9899  132.5759  118.1662\n2018-03-14  94.2774   102.7379  131.6551  117.6703\n2018-03-15  96.5928   103.0903  130.5048  118.1756\n2018-03-16  97.3105   102.6701  130.3782  118.3853\n2018-03-17  97.7636   103.2919  129.8908  117.9017\n2018-03-18  98.7247   103.0518  131.0748  118.6428\n2018-03-19  97.4813   103.9216  130.6508  118.2261\n2018-03-20  96.7028   102.9487  129.3779  117.67\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-07-18  99.8733\n2017-07-20  100.1382\n2017-07-25  100.7629\n2017-07-26  101.6633\n2017-07-28  98.9085\n2017-07-31  96.0578\n2017-08-02  98.5291\n2017-08-03  99.5773\n2017-08-04  98.0715\n\u22ee\n2018-02-28  97.156\n2018-03-04  94.544\n2018-03-05  93.6721\n2018-03-06  94.3229\n2018-03-08  96.5706\n2018-03-11  96.2887\n2018-03-13  95.2134\n2018-03-14  94.2774\n2018-03-15  96.5928\n2018-03-18  98.7247\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-07-14  100.1163\n2017-07-16  98.831\n2017-07-18  99.8733\n2017-07-19  100.2552\n2017-07-21  100.9737\n2017-07-22  100.3938\n2017-07-23  101.3243\n2017-07-25  100.7629\n2017-07-26  101.6633\n\u22ee\n2018-03-05  93.6721\n2018-03-06  94.3229\n2018-03-07  95.5645\n2018-03-08  96.5706\n2018-03-10  95.6153\n2018-03-12  94.8899\n2018-03-13  95.2134\n2018-03-14  94.2774\n2018-03-18  98.7247\n2018-03-19  97.4813", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A        B         C         D\n2017-07-12  99.1177  99.7131   100.3449  97.7499\n2017-07-13  97.9879  100.5265  99.6601   96.5604\n2017-07-14  97.9937  100.3904  101.7275  96.3723\n2017-07-15  96.6727  98.9251   102.0934  95.6862\n2017-07-16  97.0628  98.4995   101.6129  94.9272\n2017-07-17  96.9046  99.3474   102.3934  94.0146\n2017-07-18  97.6717  98.2515   101.3468  93.2673\n2017-07-19  96.2583  97.8713   100.8819  94.7708\n2017-07-20  94.5895  98.551    100.0276  94.8469\n\u22ee\n2018-03-11  86.9821  97.6153   86.6883   80.2565\n2018-03-12  87.305   97.0206   84.76     80.7221\n2018-03-13  87.9572  97.6335   85.4449   81.7565\n2018-03-14  88.8935  97.9834   85.202    81.5934\n2018-03-15  89.1897  98.0749   84.6218   81.2227\n2018-03-16  90.7963  99.4896   84.0226   81.5386\n2018-03-17  90.1749  98.2566   83.521    81.4925\n2018-03-18  91.85    98.7266   83.2464   80.5375\n2018-03-19  91.6442  99.4717   84.9189   80.9269\n2018-03-20  91.1482  99.0309   84.5818   80.3913\n\njulia  X[1:10, :]\nIndex       A        B         C         D\n2017-07-12  99.1177  99.7131   100.3449  97.7499\n2017-07-13  97.9879  100.5265  99.6601   96.5604\n2017-07-14  97.9937  100.3904  101.7275  96.3723\n2017-07-15  96.6727  98.9251   102.0934  95.6862\n2017-07-16  97.0628  98.4995   101.6129  94.9272\n2017-07-17  96.9046  99.3474   102.3934  94.0146\n2017-07-18  97.6717  98.2515   101.3468  93.2673\n2017-07-19  96.2583  97.8713   100.8819  94.7708\n2017-07-20  94.5895  98.551    100.0276  94.8469\n2017-07-21  93.3211  99.3477   98.8247   94.0001\n\njulia  X[end-100:end, 2:3]\nIndex       B         C\n2017-12-10  99.9665   97.042\n2017-12-11  99.9546   96.9617\n2017-12-12  100.0012  96.1099\n2017-12-13  99.6226   95.3237\n2017-12-14  100.6827  95.8601\n2017-12-15  99.933    95.4119\n2017-12-16  98.8141   95.1433\n2017-12-17  98.9098   94.7546\n2017-12-18  99.3775   93.5232\n\u22ee\n2018-03-11  97.6153   86.6883\n2018-03-12  97.0206   84.76\n2018-03-13  97.6335   85.4449\n2018-03-14  97.9834   85.202\n2018-03-15  98.0749   84.6218\n2018-03-16  99.4896   84.0226\n2018-03-17  98.2566   83.521\n2018-03-18  98.7266   83.2464\n2018-03-19  99.4717   84.9189\n2018-03-20  99.0309   84.5818\n\njulia  X[end, 2:end]\nIndex       B        C        D\n2018-03-20  99.0309  84.5818  80.3913", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-07-12  98.2173   100.4117  100.0722  99.2465\n2017-07-13  97.6679   101.0184  100.6443  98.3321\n2017-07-14  98.1843   99.8001   100.9056  97.645\n2017-07-15  97.7392   97.9303   99.6095   97.3349\n2017-07-16  98.6426   98.6344   99.6633   97.6097\n2017-07-17  99.0421   98.096    99.4013   97.9529\n2017-07-18  99.7363   99.5092   99.9717   97.2555\n2017-07-19  100.5263  98.9447   99.3014   98.4961\n2017-07-20  102.2027  97.7141   98.8561   99.9329\n\u22ee\n2018-03-11  98.9274   116.2673  91.4036   104.3177\n2018-03-12  97.7587   114.5201  90.3848   105.732\n2018-03-13  98.2568   113.3465  90.2993   105.7826\n2018-03-14  97.4053   112.9049  90.4447   105.834\n2018-03-15  96.6771   112.6326  88.2063   106.5929\n2018-03-16  96.5522   113.206   86.8169   104.1261\n2018-03-17  96.8115   114.1692  85.6065   103.7842\n2018-03-18  95.8985   115.3616  86.1694   104.0461\n2018-03-19  97.6225   117.2012  88.3738   103.328\n2018-03-20  96.8863   117.8509  91.0614   102.1116\n\njulia  X[:, :A]\nIndex       A\n2017-07-12  98.2173\n2017-07-13  97.6679\n2017-07-14  98.1843\n2017-07-15  97.7392\n2017-07-16  98.6426\n2017-07-17  99.0421\n2017-07-18  99.7363\n2017-07-19  100.5263\n2017-07-20  102.2027\n\u22ee\n2018-03-11  98.9274\n2018-03-12  97.7587\n2018-03-13  98.2568\n2018-03-14  97.4053\n2018-03-15  96.6771\n2018-03-16  96.5522\n2018-03-17  96.8115\n2018-03-18  95.8985\n2018-03-19  97.6225\n2018-03-20  96.8863\n\njulia  X[:, [:B, :D]]\nIndex       B         D\n2017-07-12  100.4117  99.2465\n2017-07-13  101.0184  98.3321\n2017-07-14  99.8001   97.645\n2017-07-15  97.9303   97.3349\n2017-07-16  98.6344   97.6097\n2017-07-17  98.096    97.9529\n2017-07-18  99.5092   97.2555\n2017-07-19  98.9447   98.4961\n2017-07-20  97.7141   99.9329\n\u22ee\n2018-03-11  116.2673  104.3177\n2018-03-12  114.5201  105.732\n2018-03-13  113.3465  105.7826\n2018-03-14  112.9049  105.834\n2018-03-15  112.6326  106.5929\n2018-03-16  113.206   104.1261\n2018-03-17  114.1692  103.7842\n2018-03-18  115.3616  104.0461\n2018-03-19  117.2012  103.328\n2018-03-20  117.8509  102.1116", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A        B         C         D\n2016-01-01  99.1705  100.8654  100.9209  99.5487\n2016-01-02  98.9517  100.4923  99.9178   99.9183\n2016-01-03  98.6368  101.5237  99.5947   99.7095\n2016-01-04  98.056   101.8333  100.1843  99.1341\n2016-01-05  96.5095  102.0172  100.1796  98.3967\n2016-01-06  94.055   102.6601  99.2504   97.7684\n2016-01-07  93.4086  103.7909  98.9425   98.5922\n2016-01-08  93.5116  103.8166  97.9179   97.9169\n2016-01-09  93.043   103.0521  98.0896   98.3225\n\u22ee\n2017-12-22  94.7057  98.0932   65.6357   127.8285\n2017-12-23  94.3558  99.1771   66.9736   128.7999\n2017-12-24  93.9171  98.1745   66.4742   129.1716\n2017-12-25  93.7891  98.7509   66.5475   128.0624\n2017-12-26  93.5891  99.7892   64.6093   126.8876\n2017-12-27  94.1438  98.0596   64.4109   125.1451\n2017-12-28  95.4469  96.7908   65.1134   127.6674\n2017-12-29  94.5138  96.517    65.9134   126.6766\n2017-12-30  96.3201  96.5048   65.9909   126.9602\n2017-12-31  97.9193  96.4081   65.7347   125.532\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A        B        C       D\n2017-07-01  97.5874  95.7649  76.985  123.2316\n\njulia  X[ 2016 ]  # whole year\nIndex       A        B         C         D\n2016-01-01  99.1705  100.8654  100.9209  99.5487\n2016-01-02  98.9517  100.4923  99.9178   99.9183\n2016-01-03  98.6368  101.5237  99.5947   99.7095\n2016-01-04  98.056   101.8333  100.1843  99.1341\n2016-01-05  96.5095  102.0172  100.1796  98.3967\n2016-01-06  94.055   102.6601  99.2504   97.7684\n2016-01-07  93.4086  103.7909  98.9425   98.5922\n2016-01-08  93.5116  103.8166  97.9179   97.9169\n2016-01-09  93.043   103.0521  98.0896   98.3225\n\u22ee\n2016-12-22  73.1951  88.739    91.5783   117.0506\n2016-12-23  74.7912  88.6704   91.6553   117.4011\n2016-12-24  75.1985  87.9853   91.8648   116.2226\n2016-12-25  74.0441  88.8583   88.4507   114.646\n2016-12-26  74.4626  88.4019   86.6715   113.2258\n2016-12-27  74.5653  88.4642   86.7428   112.7621\n2016-12-28  74.7633  89.0957   87.8058   112.9914\n2016-12-29  76.5877  88.2646   87.6838   112.9654\n2016-12-30  76.2128  88.3903   88.6225   112.0898\n2016-12-31  77.6354  87.8494   88.1785   112.4971\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.221\n2017-07-13  0.3085\n2017-07-14  0.4408\n2017-07-15  0.5558\n2017-07-16  0.5679\n2017-07-17  0.9136\n2017-07-18  0.5643\n2017-07-19  0.88\n2017-07-20  0.7785\n\u22ee\n2018-03-11  0.9917\n2018-03-12  0.8962\n2018-03-13  0.6138\n2018-03-14  0.7796\n2018-03-15  0.1419\n2018-03-16  0.8437\n2018-03-17  0.2343\n2018-03-18  0.586\n2018-03-19  0.1586\n2018-03-20  0.1248\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.9218\n2017-01-13  0.4809\n2017-01-14  0.7463\n2017-01-15  0.3528\n2017-01-16  0.4397\n2017-01-17  0.1928\n2017-01-18  0.9131\n2017-01-19  0.2516\n2017-01-20  0.0852\n\u22ee\n2017-09-11  0.6402\n2017-09-12  0.0159\n2017-09-13  0.2291\n2017-09-14  0.7846\n2017-09-15  0.2764\n2017-09-16  0.3143\n2017-09-17  0.5267\n2017-09-18  0.1164\n2017-09-19  0.4902\n2017-09-20  0.059\n\njulia\n [x y]\nIndex       A       A\n2017-01-12  NaN     0.9218\n2017-01-13  NaN     0.4809\n2017-01-14  NaN     0.7463\n2017-01-15  NaN     0.3528\n2017-01-16  NaN     0.4397\n2017-01-17  NaN     0.1928\n2017-01-18  NaN     0.9131\n2017-01-19  NaN     0.2516\n2017-01-20  NaN     0.0852\n\u22ee\n2018-03-11  0.9917  NaN\n2018-03-12  0.8962  NaN\n2018-03-13  0.6138  NaN\n2018-03-14  0.7796  NaN\n2018-03-15  0.1419  NaN\n2018-03-16  0.8437  NaN\n2018-03-17  0.2343  NaN\n2018-03-18  0.586   NaN\n2018-03-19  0.1586  NaN\n2018-03-20  0.1248  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.7671\n2017-07-13  0.4044\n2017-07-14  0.6515\n2017-07-15  0.9406\n2017-07-16  0.2019\n2017-07-17  0.9357\n2017-07-18  0.9121\n2017-07-19  0.784\n2017-07-20  0.5431\n\u22ee\n2018-03-11  0.793\n2018-03-12  0.1222\n2018-03-13  0.7244\n2018-03-14  0.1624\n2018-03-15  0.8766\n2018-03-16  0.5887\n2018-03-17  0.2326\n2018-03-18  0.4773\n2018-03-19  0.0855\n2018-03-20  0.7402\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.693\n2017-01-13  0.5497\n2017-01-14  0.1282\n2017-01-15  0.3671\n2017-01-16  0.4879\n2017-01-17  0.9753\n2017-01-18  0.0657\n2017-01-19  0.4414\n2017-01-20  0.809\n\u22ee\n2017-09-11  0.7931\n2017-09-12  0.56\n2017-09-13  0.8174\n2017-09-14  0.298\n2017-09-15  0.2008\n2017-09-16  0.8532\n2017-09-17  0.1924\n2017-09-18  0.3456\n2017-09-19  0.9453\n2017-09-20  0.9013\n\njulia\n ijoin(x, y)\nIndex       A       A\n2017-07-12  0.7671  0.0577\n2017-07-13  0.4044  0.2747\n2017-07-14  0.6515  0.2673\n2017-07-15  0.9406  0.2563\n2017-07-16  0.2019  0.9753\n2017-07-17  0.9357  0.4847\n2017-07-18  0.9121  0.9805\n2017-07-19  0.784   0.9155\n2017-07-20  0.5431  0.1105\n\u22ee\n2017-09-11  0.264   0.7931\n2017-09-12  0.9539  0.56\n2017-09-13  0.3017  0.8174\n2017-09-14  0.9197  0.298\n2017-09-15  0.7531  0.2008\n2017-09-16  0.2565  0.8532\n2017-09-17  0.8066  0.1924\n2017-09-18  0.7368  0.3456\n2017-09-19  0.7948  0.9453\n2017-09-20  0.3533  0.9013\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-07-12  0.6035\n2017-07-13  0.4372\n2017-07-14  0.4407\n2017-07-15  0.0405\n2017-07-16  0.9423\n2017-07-17  0.7718\n2017-07-18  0.8516\n2017-07-19  0.3898\n2017-07-20  0.9576\n\u22ee\n2018-03-11  0.075\n2018-03-12  0.9757\n2018-03-13  0.0047\n2018-03-14  0.2622\n2018-03-15  0.8096\n2018-03-16  0.261\n2018-03-17  0.9755\n2018-03-18  0.5182\n2018-03-19  0.4128\n2018-03-20  0.7118\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.9205\n2017-01-13  0.3511\n2017-01-14  0.73\n2017-01-15  0.3958\n2017-01-16  0.2029\n2017-01-17  0.0519\n2017-01-18  0.8671\n2017-01-19  0.2977\n2017-01-20  0.15\n\u22ee\n2017-09-11  0.2154\n2017-09-12  0.3407\n2017-09-13  0.1095\n2017-09-14  0.6158\n2017-09-15  0.5919\n2017-09-16  0.088\n2017-09-17  0.1212\n2017-09-18  0.1865\n2017-09-19  0.3404\n2017-09-20  0.022\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-07-12  0.6035  0.319\n2017-07-13  0.4372  0.8196\n2017-07-14  0.4407  0.9037\n2017-07-15  0.0405  0.2011\n2017-07-16  0.9423  0.5781\n2017-07-17  0.7718  0.3852\n2017-07-18  0.8516  0.4595\n2017-07-19  0.3898  0.8921\n2017-07-20  0.9576  0.299\n\u22ee\n2018-03-11  0.075   NaN\n2018-03-12  0.9757  NaN\n2018-03-13  0.0047  NaN\n2018-03-14  0.2622  NaN\n2018-03-15  0.8096  NaN\n2018-03-16  0.261   NaN\n2018-03-17  0.9755  NaN\n2018-03-18  0.5182  NaN\n2018-03-19  0.4128  NaN\n2018-03-20  0.7118  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-01-12  NaN     0.9205\n2017-01-13  NaN     0.3511\n2017-01-14  NaN     0.73\n2017-01-15  NaN     0.3958\n2017-01-16  NaN     0.2029\n2017-01-17  NaN     0.0519\n2017-01-18  NaN     0.8671\n2017-01-19  NaN     0.2977\n2017-01-20  NaN     0.15\n\u22ee\n2017-09-11  0.1902  0.8462\n2017-09-12  0.6219  0.8382\n2017-09-13  0.4086  0.298\n2017-09-14  0.3349  0.2448\n2017-09-15  0.1698  0.2616\n2017-09-16  0.219   0.2154\n2017-09-17  0.4069  0.3407\n2017-09-18  0.2992  0.1095\n2017-09-19  0.8517  0.6158\n2017-09-20  0.8545  0.5919", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.221\n2017-07-13  0.3085\n2017-07-14  0.4408\n2017-07-15  0.5558\n2017-07-16  0.5679\n2017-07-17  0.9136\n2017-07-18  0.5643\n2017-07-19  0.88\n2017-07-20  0.7785\n\u22ee\n2018-03-11  0.9917\n2018-03-12  0.8962\n2018-03-13  0.6138\n2018-03-14  0.7796\n2018-03-15  0.1419\n2018-03-16  0.8437\n2018-03-17  0.2343\n2018-03-18  0.586\n2018-03-19  0.1586\n2018-03-20  0.1248\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.9218\n2017-01-13  0.4809\n2017-01-14  0.7463\n2017-01-15  0.3528\n2017-01-16  0.4397\n2017-01-17  0.1928\n2017-01-18  0.9131\n2017-01-19  0.2516\n2017-01-20  0.0852\n\u22ee\n2017-09-11  0.6402\n2017-09-12  0.0159\n2017-09-13  0.2291\n2017-09-14  0.7846\n2017-09-15  0.2764\n2017-09-16  0.3143\n2017-09-17  0.5267\n2017-09-18  0.1164\n2017-09-19  0.4902\n2017-09-20  0.059\n\njulia  [x y]\nIndex       A       A\n2017-01-12  NaN     0.9218\n2017-01-13  NaN     0.4809\n2017-01-14  NaN     0.7463\n2017-01-15  NaN     0.3528\n2017-01-16  NaN     0.4397\n2017-01-17  NaN     0.1928\n2017-01-18  NaN     0.9131\n2017-01-19  NaN     0.2516\n2017-01-20  NaN     0.0852\n\u22ee\n2018-03-11  0.9917  NaN\n2018-03-12  0.8962  NaN\n2018-03-13  0.6138  NaN\n2018-03-14  0.7796  NaN\n2018-03-15  0.1419  NaN\n2018-03-16  0.8437  NaN\n2018-03-17  0.2343  NaN\n2018-03-18  0.586   NaN\n2018-03-19  0.1586  NaN\n2018-03-20  0.1248  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.7671\n2017-07-13  0.4044\n2017-07-14  0.6515\n2017-07-15  0.9406\n2017-07-16  0.2019\n2017-07-17  0.9357\n2017-07-18  0.9121\n2017-07-19  0.784\n2017-07-20  0.5431\n\u22ee\n2018-03-11  0.793\n2018-03-12  0.1222\n2018-03-13  0.7244\n2018-03-14  0.1624\n2018-03-15  0.8766\n2018-03-16  0.5887\n2018-03-17  0.2326\n2018-03-18  0.4773\n2018-03-19  0.0855\n2018-03-20  0.7402\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.693\n2017-01-13  0.5497\n2017-01-14  0.1282\n2017-01-15  0.3671\n2017-01-16  0.4879\n2017-01-17  0.9753\n2017-01-18  0.0657\n2017-01-19  0.4414\n2017-01-20  0.809\n\u22ee\n2017-09-11  0.7931\n2017-09-12  0.56\n2017-09-13  0.8174\n2017-09-14  0.298\n2017-09-15  0.2008\n2017-09-16  0.8532\n2017-09-17  0.1924\n2017-09-18  0.3456\n2017-09-19  0.9453\n2017-09-20  0.9013\n\njulia  ijoin(x, y)\nIndex       A       A\n2017-07-12  0.7671  0.0577\n2017-07-13  0.4044  0.2747\n2017-07-14  0.6515  0.2673\n2017-07-15  0.9406  0.2563\n2017-07-16  0.2019  0.9753\n2017-07-17  0.9357  0.4847\n2017-07-18  0.9121  0.9805\n2017-07-19  0.784   0.9155\n2017-07-20  0.5431  0.1105\n\u22ee\n2017-09-11  0.264   0.7931\n2017-09-12  0.9539  0.56\n2017-09-13  0.3017  0.8174\n2017-09-14  0.9197  0.298\n2017-09-15  0.7531  0.2008\n2017-09-16  0.2565  0.8532\n2017-09-17  0.8066  0.1924\n2017-09-18  0.7368  0.3456\n2017-09-19  0.7948  0.9453\n2017-09-20  0.3533  0.9013", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-07-12  0.6035\n2017-07-13  0.4372\n2017-07-14  0.4407\n2017-07-15  0.0405\n2017-07-16  0.9423\n2017-07-17  0.7718\n2017-07-18  0.8516\n2017-07-19  0.3898\n2017-07-20  0.9576\n\u22ee\n2018-03-11  0.075\n2018-03-12  0.9757\n2018-03-13  0.0047\n2018-03-14  0.2622\n2018-03-15  0.8096\n2018-03-16  0.261\n2018-03-17  0.9755\n2018-03-18  0.5182\n2018-03-19  0.4128\n2018-03-20  0.7118\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-01-12  0.9205\n2017-01-13  0.3511\n2017-01-14  0.73\n2017-01-15  0.3958\n2017-01-16  0.2029\n2017-01-17  0.0519\n2017-01-18  0.8671\n2017-01-19  0.2977\n2017-01-20  0.15\n\u22ee\n2017-09-11  0.2154\n2017-09-12  0.3407\n2017-09-13  0.1095\n2017-09-14  0.6158\n2017-09-15  0.5919\n2017-09-16  0.088\n2017-09-17  0.1212\n2017-09-18  0.1865\n2017-09-19  0.3404\n2017-09-20  0.022\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-07-12  0.6035  0.319\n2017-07-13  0.4372  0.8196\n2017-07-14  0.4407  0.9037\n2017-07-15  0.0405  0.2011\n2017-07-16  0.9423  0.5781\n2017-07-17  0.7718  0.3852\n2017-07-18  0.8516  0.4595\n2017-07-19  0.3898  0.8921\n2017-07-20  0.9576  0.299\n\u22ee\n2018-03-11  0.075   NaN\n2018-03-12  0.9757  NaN\n2018-03-13  0.0047  NaN\n2018-03-14  0.2622  NaN\n2018-03-15  0.8096  NaN\n2018-03-16  0.261   NaN\n2018-03-17  0.9755  NaN\n2018-03-18  0.5182  NaN\n2018-03-19  0.4128  NaN\n2018-03-20  0.7118  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-01-12  NaN     0.9205\n2017-01-13  NaN     0.3511\n2017-01-14  NaN     0.73\n2017-01-15  NaN     0.3958\n2017-01-16  NaN     0.2029\n2017-01-17  NaN     0.0519\n2017-01-18  NaN     0.8671\n2017-01-19  NaN     0.2977\n2017-01-20  NaN     0.15\n\u22ee\n2017-09-11  0.1902  0.8462\n2017-09-12  0.6219  0.8382\n2017-09-13  0.4086  0.298\n2017-09-14  0.3349  0.2448\n2017-09-15  0.1698  0.2616\n2017-09-16  0.219   0.2154\n2017-09-17  0.4069  0.3407\n2017-09-18  0.2992  0.1095\n2017-09-19  0.8517  0.6158\n2017-09-20  0.8545  0.5919", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}