{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-19  99.2958   100.8757  100.6179  100.8985\n2017-11-20  98.9786   100.4797  100.3827  101.287\n2017-11-21  98.1393   99.4784   101.1112  101.7501\n2017-11-22  97.4411   100.7777  100.6431  102.4291\n2017-11-23  98.0675   101.4401  99.9197   101.021\n2017-11-24  100.155   101.1637  100.8228  102.668\n2017-11-25  100.2423  101.6127  99.92     102.6594\n2017-11-26  98.6891   100.5908  98.853    103.3408\n2017-11-27  100.7421  100.193   98.3289   102.9349\n\u22ee\n2018-07-19  94.897    87.4128   91.1183   97.3729\n2018-07-20  93.9676   85.9971   92.3363   98.1325\n2018-07-21  95.4269   85.4228   92.6338   97.4313\n2018-07-22  93.935    85.6732   93.1595   97.5688\n2018-07-23  94.1849   85.0258   92.6329   99.0213\n2018-07-24  95.639    85.9362   91.5375   99.3691\n2018-07-25  95.443    85.2272   90.654    98.9038\n2018-07-26  94.9826   86.5297   91.1022   99.857\n2018-07-27  94.3867   86.1937   89.95     101.2407\n2018-07-28  93.0571   85.7049   89.968    100.5816\n\njulia\n X[1]\nIndex       A        B         C         D\n2017-11-19  99.2958  100.8757  100.6179  100.8985\n\njulia\n X[1, :]\nIndex       A        B         C         D\n2017-11-19  99.2958  100.8757  100.6179  100.8985\n\njulia\n X[:, 1]\nIndex       A\n2017-11-19  99.2958\n2017-11-20  98.9786\n2017-11-21  98.1393\n2017-11-22  97.4411\n2017-11-23  98.0675\n2017-11-24  100.155\n2017-11-25  100.2423\n2017-11-26  98.6891\n2017-11-27  100.7421\n\u22ee\n2018-07-19  94.897\n2018-07-20  93.9676\n2018-07-21  95.4269\n2018-07-22  93.935\n2018-07-23  94.1849\n2018-07-24  95.639\n2018-07-25  95.443\n2018-07-26  94.9826\n2018-07-27  94.3867\n2018-07-28  93.0571\n\njulia\n X[1, 1]\nIndex       A\n2017-11-19  99.2958\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-19  100.2094  100.6741  100.6919  99.5939\n2017-11-20  100.3542  101.9022  100.3963  98.5532\n2017-11-21  100.9042  102.4327  100.1859  99.0017\n2017-11-22  101.3292  101.8391  96.7843   100.069\n2017-11-23  102.1972  104.5018  98.0793   98.6116\n2017-11-24  101.9892  103.3152  98.2964   99.8296\n2017-11-25  101.1739  102.0474  97.505    99.6997\n2017-11-26  102.263   101.4005  96.9174   100.8686\n2017-11-27  104.0253  101.8253  97.97     99.991\n\u22ee\n2018-07-19  90.844    115.6516  79.3877   81.7461\n2018-07-20  90.7459   114.8801  79.1774   80.2975\n2018-07-21  90.3732   114.5844  81.6539   79.899\n2018-07-22  89.2464   114.7872  81.2944   80.7614\n2018-07-23  89.4594   115.7686  81.3803   79.0831\n2018-07-24  88.3212   115.7108  79.2967   77.4422\n2018-07-25  89.0878   114.7897  79.6601   78.3249\n2018-07-26  88.5274   114.284   79.1082   77.2415\n2018-07-27  87.9015   113.6226  79.224    78.4548\n2018-07-28  86.9899   113.0736  79.5338   78.4296\n\njulia\n X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-11-19  100.2094  100.6741  100.6919  99.5939\n2017-11-20  100.3542  101.9022  100.3963  98.5532\n2017-11-21  100.9042  102.4327  100.1859  99.0017\n2017-11-22  101.3292  101.8391  96.7843   100.069\n2017-11-23  102.1972  104.5018  98.0793   98.6116\n2017-11-24  101.9892  103.3152  98.2964   99.8296\n2017-11-25  101.1739  102.0474  97.505    99.6997\n2017-11-26  102.263   101.4005  96.9174   100.8686\n2017-11-27  104.0253  101.8253  97.97     99.991\n\u22ee\n2018-07-19  90.844    115.6516  79.3877   81.7461\n2018-07-20  90.7459   114.8801  79.1774   80.2975\n2018-07-21  90.3732   114.5844  81.6539   79.899\n2018-07-22  89.2464   114.7872  81.2944   80.7614\n2018-07-23  89.4594   115.7686  81.3803   79.0831\n2018-07-24  88.3212   115.7108  79.2967   77.4422\n2018-07-25  89.0878   114.7897  79.6601   78.3249\n2018-07-26  88.5274   114.284   79.1082   77.2415\n2018-07-27  87.9015   113.6226  79.224    78.4548\n2018-07-28  86.9899   113.0736  79.5338   78.4296\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-19  100.2094\n2017-11-20  100.3542\n2017-11-21  100.9042\n2017-11-24  101.9892\n2017-11-25  101.1739\n2017-12-02  101.1809\n2017-12-05  102.5026\n2017-12-07  101.6575\n2017-12-08  100.9888\n\u22ee\n2018-07-06  92.2906\n2018-07-07  90.8928\n2018-07-08  89.3198\n2018-07-12  90.199\n2018-07-13  89.3238\n2018-07-18  92.1384\n2018-07-19  90.844\n2018-07-20  90.7459\n2018-07-23  89.4594\n2018-07-28  86.9899\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-19  100.2094\n2017-11-20  100.3542\n2017-11-21  100.9042\n2017-11-22  101.3292\n2017-11-24  101.9892\n2017-11-25  101.1739\n2017-11-26  102.263\n2017-11-27  104.0253\n2017-11-29  103.452\n\u22ee\n2018-07-13  89.3238\n2018-07-14  90.36\n2018-07-15  91.2145\n2018-07-16  92.4099\n2018-07-17  91.8074\n2018-07-20  90.7459\n2018-07-22  89.2464\n2018-07-23  89.4594\n2018-07-25  89.0878\n2018-07-27  87.9015\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-19  101.9269  101.778   98.9673   100.0389\n2017-11-20  101.7222  100.9181  97.7148   99.6822\n2017-11-21  100.0475  100.4931  98.9467   98.4529\n2017-11-22  100.3516  99.6382   99.8501   99.7977\n2017-11-23  99.6612   99.4192   99.5238   98.6628\n2017-11-24  99.7499   99.9029   97.3078   98.1512\n2017-11-25  97.3202   99.6457   99.5036   98.1275\n2017-11-26  95.9624   100.4185  100.2904  98.432\n2017-11-27  95.5447   100.815   100.3089  98.5393\n\u22ee\n2018-07-19  125.2796  95.5907   104.2622  92.3902\n2018-07-20  124.8911  95.7194   104.2223  93.0939\n2018-07-21  125.3261  93.9157   102.7376  92.1519\n2018-07-22  125.9974  94.6005   103.9263  92.4663\n2018-07-23  124.8122  94.9774   103.5235  92.9516\n2018-07-24  123.1996  95.1884   103.3894  94.4655\n2018-07-25  123.7339  96.1588   103.8059  94.322\n2018-07-26  124.978   96.8931   104.2553  95.0489\n2018-07-27  125.3946  96.1271   104.3289  96.1678\n2018-07-28  125.5701  96.3774   104.2335  94.2905\n\njulia\n X[1:10, :]\nIndex       A         B         C         D\n2017-11-19  101.9269  101.778   98.9673   100.0389\n2017-11-20  101.7222  100.9181  97.7148   99.6822\n2017-11-21  100.0475  100.4931  98.9467   98.4529\n2017-11-22  100.3516  99.6382   99.8501   99.7977\n2017-11-23  99.6612   99.4192   99.5238   98.6628\n2017-11-24  99.7499   99.9029   97.3078   98.1512\n2017-11-25  97.3202   99.6457   99.5036   98.1275\n2017-11-26  95.9624   100.4185  100.2904  98.432\n2017-11-27  95.5447   100.815   100.3089  98.5393\n2017-11-28  96.9962   100.3548  101.0251  98.0552\n\njulia\n X[end-100:end, 2:3]\nIndex       B        C\n2018-04-19  90.3093  96.9603\n2018-04-20  89.3182  96.2505\n2018-04-21  90.6309  96.368\n2018-04-22  90.55    97.6796\n2018-04-23  88.9741  97.3787\n2018-04-24  88.0328  97.386\n2018-04-25  88.9533  96.6883\n2018-04-26  89.9523  97.4524\n2018-04-27  89.4428  96.9133\n\u22ee\n2018-07-19  95.5907  104.2622\n2018-07-20  95.7194  104.2223\n2018-07-21  93.9157  102.7376\n2018-07-22  94.6005  103.9263\n2018-07-23  94.9774  103.5235\n2018-07-24  95.1884  103.3894\n2018-07-25  96.1588  103.8059\n2018-07-26  96.8931  104.2553\n2018-07-27  96.1271  104.3289\n2018-07-28  96.3774  104.2335\n\njulia\n X[end, 2:end]\nIndex       B        C         D\n2018-07-28  96.3774  104.2335  94.2905\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-19  102.2033  98.5306   100.4214  97.3592\n2017-11-20  99.9578   97.3561   101.1242  96.8923\n2017-11-21  100.6463  98.9318   99.4149   97.398\n2017-11-22  99.304    98.353    100.1237  97.7331\n2017-11-23  100.7317  99.0667   99.4813   97.9815\n2017-11-24  100.5552  97.1868   96.9927   97.3088\n2017-11-25  101.6396  97.0784   96.6296   97.3791\n2017-11-26  101.9406  97.4074   96.5638   99.4406\n2017-11-27  102.5603  98.5987   96.7882   100.7281\n\u22ee\n2018-07-19  90.1652   116.0452  93.237    115.7229\n2018-07-20  90.2579   116.5474  93.6955   116.6877\n2018-07-21  91.3775   114.7913  92.6797   115.5055\n2018-07-22  90.0704   113.8429  92.5019   116.9205\n2018-07-23  90.595    113.3927  91.6587   117.9146\n2018-07-24  89.2      113.5664  93.5761   115.6153\n2018-07-25  91.0549   113.2588  92.6684   116.5322\n2018-07-26  91.7463   112.3542  92.1978   116.3216\n2018-07-27  90.5384   110.6058  93.2171   115.6411\n2018-07-28  91.8231   110.4757  91.6951   113.9696\n\njulia\n X[:, :A]\nIndex       A\n2017-11-19  102.2033\n2017-11-20  99.9578\n2017-11-21  100.6463\n2017-11-22  99.304\n2017-11-23  100.7317\n2017-11-24  100.5552\n2017-11-25  101.6396\n2017-11-26  101.9406\n2017-11-27  102.5603\n\u22ee\n2018-07-19  90.1652\n2018-07-20  90.2579\n2018-07-21  91.3775\n2018-07-22  90.0704\n2018-07-23  90.595\n2018-07-24  89.2\n2018-07-25  91.0549\n2018-07-26  91.7463\n2018-07-27  90.5384\n2018-07-28  91.8231\n\njulia\n X[:, [:B, :D]]\nIndex       B         D\n2017-11-19  98.5306   97.3592\n2017-11-20  97.3561   96.8923\n2017-11-21  98.9318   97.398\n2017-11-22  98.353    97.7331\n2017-11-23  99.0667   97.9815\n2017-11-24  97.1868   97.3088\n2017-11-25  97.0784   97.3791\n2017-11-26  97.4074   99.4406\n2017-11-27  98.5987   100.7281\n\u22ee\n2018-07-19  116.0452  115.7229\n2018-07-20  116.5474  116.6877\n2018-07-21  114.7913  115.5055\n2018-07-22  113.8429  116.9205\n2018-07-23  113.3927  117.9146\n2018-07-24  113.5664  115.6153\n2018-07-25  113.2588  116.5322\n2018-07-26  112.3542  116.3216\n2018-07-27  110.6058  115.6411\n2018-07-28  110.4757  113.9696\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C         D\n2016-01-01  101.343   99.5378   102.0802  99.2765\n2016-01-02  101.1183  99.0144   100.1566  99.0028\n2016-01-03  101.4186  100.0433  98.6285   98.8629\n2016-01-04  103.1871  98.5301   96.4922   98.3368\n2016-01-05  102.5251  99.2638   96.5219   97.38\n2016-01-06  100.9829  99.6313   98.0704   96.8018\n2016-01-07  102.1916  101.4188  100.512   96.0941\n2016-01-08  101.3155  100.399   99.2067   96.6065\n2016-01-09  101.0002  101.2584  100.1786  97.1841\n\u22ee\n2017-12-22  98.0168   111.6535  99.9439   64.0697\n2017-12-23  96.993    111.2706  100.1612  62.566\n2017-12-24  96.6708   110.2678  99.2645   63.9994\n2017-12-25  97.0057   107.769   98.8196   63.5193\n2017-12-26  98.0709   106.5559  99.1331   64.5022\n2017-12-27  98.389    106.0957  98.6856   61.6914\n2017-12-28  98.3605   105.6215  98.2      61.1799\n2017-12-29  98.1167   108.0949  99.5131   59.867\n2017-12-30  98.0681   109.3573  99.2266   60.0755\n2017-12-31  98.9005   109.772   97.4562   59.893\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A         B         C        D\n2017-07-01  100.6249  124.5497  93.8871  76.4091\n\njulia\n X[\n2016\n]  # whole year\nIndex       A         B         C         D\n2016-01-01  101.343   99.5378   102.0802  99.2765\n2016-01-02  101.1183  99.0144   100.1566  99.0028\n2016-01-03  101.4186  100.0433  98.6285   98.8629\n2016-01-04  103.1871  98.5301   96.4922   98.3368\n2016-01-05  102.5251  99.2638   96.5219   97.38\n2016-01-06  100.9829  99.6313   98.0704   96.8018\n2016-01-07  102.1916  101.4188  100.512   96.0941\n2016-01-08  101.3155  100.399   99.2067   96.6065\n2016-01-09  101.0002  101.2584  100.1786  97.1841\n\u22ee\n2016-12-22  93.9664   114.1274  87.6274   68.653\n2016-12-23  92.7945   113.1783  89.1208   69.2861\n2016-12-24  91.8052   114.1763  89.1018   69.1201\n2016-12-25  90.3013   113.9698  89.6838   69.3039\n2016-12-26  91.7277   114.1584  88.4012   69.4976\n2016-12-27  91.9259   115.2764  89.3071   68.0187\n2016-12-28  91.8415   116.1837  91.4058   67.3922\n2016-12-29  93.0244   116.2391  90.8213   67.6068\n2016-12-30  91.3062   117.6272  91.037    67.9689\n2016-12-31  92.2796   118.1146  89.7717   65.6082\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-19  99.2958   100.8757  100.6179  100.8985\n2017-11-20  98.9786   100.4797  100.3827  101.287\n2017-11-21  98.1393   99.4784   101.1112  101.7501\n2017-11-22  97.4411   100.7777  100.6431  102.4291\n2017-11-23  98.0675   101.4401  99.9197   101.021\n2017-11-24  100.155   101.1637  100.8228  102.668\n2017-11-25  100.2423  101.6127  99.92     102.6594\n2017-11-26  98.6891   100.5908  98.853    103.3408\n2017-11-27  100.7421  100.193   98.3289   102.9349\n\u22ee\n2018-07-19  94.897    87.4128   91.1183   97.3729\n2018-07-20  93.9676   85.9971   92.3363   98.1325\n2018-07-21  95.4269   85.4228   92.6338   97.4313\n2018-07-22  93.935    85.6732   93.1595   97.5688\n2018-07-23  94.1849   85.0258   92.6329   99.0213\n2018-07-24  95.639    85.9362   91.5375   99.3691\n2018-07-25  95.443    85.2272   90.654    98.9038\n2018-07-26  94.9826   86.5297   91.1022   99.857\n2018-07-27  94.3867   86.1937   89.95     101.2407\n2018-07-28  93.0571   85.7049   89.968    100.5816\n\njulia  X[1]\nIndex       A        B         C         D\n2017-11-19  99.2958  100.8757  100.6179  100.8985\n\njulia  X[1, :]\nIndex       A        B         C         D\n2017-11-19  99.2958  100.8757  100.6179  100.8985\n\njulia  X[:, 1]\nIndex       A\n2017-11-19  99.2958\n2017-11-20  98.9786\n2017-11-21  98.1393\n2017-11-22  97.4411\n2017-11-23  98.0675\n2017-11-24  100.155\n2017-11-25  100.2423\n2017-11-26  98.6891\n2017-11-27  100.7421\n\u22ee\n2018-07-19  94.897\n2018-07-20  93.9676\n2018-07-21  95.4269\n2018-07-22  93.935\n2018-07-23  94.1849\n2018-07-24  95.639\n2018-07-25  95.443\n2018-07-26  94.9826\n2018-07-27  94.3867\n2018-07-28  93.0571\n\njulia  X[1, 1]\nIndex       A\n2017-11-19  99.2958", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-19  100.2094  100.6741  100.6919  99.5939\n2017-11-20  100.3542  101.9022  100.3963  98.5532\n2017-11-21  100.9042  102.4327  100.1859  99.0017\n2017-11-22  101.3292  101.8391  96.7843   100.069\n2017-11-23  102.1972  104.5018  98.0793   98.6116\n2017-11-24  101.9892  103.3152  98.2964   99.8296\n2017-11-25  101.1739  102.0474  97.505    99.6997\n2017-11-26  102.263   101.4005  96.9174   100.8686\n2017-11-27  104.0253  101.8253  97.97     99.991\n\u22ee\n2018-07-19  90.844    115.6516  79.3877   81.7461\n2018-07-20  90.7459   114.8801  79.1774   80.2975\n2018-07-21  90.3732   114.5844  81.6539   79.899\n2018-07-22  89.2464   114.7872  81.2944   80.7614\n2018-07-23  89.4594   115.7686  81.3803   79.0831\n2018-07-24  88.3212   115.7108  79.2967   77.4422\n2018-07-25  89.0878   114.7897  79.6601   78.3249\n2018-07-26  88.5274   114.284   79.1082   77.2415\n2018-07-27  87.9015   113.6226  79.224    78.4548\n2018-07-28  86.9899   113.0736  79.5338   78.4296\n\njulia  X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-11-19  100.2094  100.6741  100.6919  99.5939\n2017-11-20  100.3542  101.9022  100.3963  98.5532\n2017-11-21  100.9042  102.4327  100.1859  99.0017\n2017-11-22  101.3292  101.8391  96.7843   100.069\n2017-11-23  102.1972  104.5018  98.0793   98.6116\n2017-11-24  101.9892  103.3152  98.2964   99.8296\n2017-11-25  101.1739  102.0474  97.505    99.6997\n2017-11-26  102.263   101.4005  96.9174   100.8686\n2017-11-27  104.0253  101.8253  97.97     99.991\n\u22ee\n2018-07-19  90.844    115.6516  79.3877   81.7461\n2018-07-20  90.7459   114.8801  79.1774   80.2975\n2018-07-21  90.3732   114.5844  81.6539   79.899\n2018-07-22  89.2464   114.7872  81.2944   80.7614\n2018-07-23  89.4594   115.7686  81.3803   79.0831\n2018-07-24  88.3212   115.7108  79.2967   77.4422\n2018-07-25  89.0878   114.7897  79.6601   78.3249\n2018-07-26  88.5274   114.284   79.1082   77.2415\n2018-07-27  87.9015   113.6226  79.224    78.4548\n2018-07-28  86.9899   113.0736  79.5338   78.4296\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-19  100.2094\n2017-11-20  100.3542\n2017-11-21  100.9042\n2017-11-24  101.9892\n2017-11-25  101.1739\n2017-12-02  101.1809\n2017-12-05  102.5026\n2017-12-07  101.6575\n2017-12-08  100.9888\n\u22ee\n2018-07-06  92.2906\n2018-07-07  90.8928\n2018-07-08  89.3198\n2018-07-12  90.199\n2018-07-13  89.3238\n2018-07-18  92.1384\n2018-07-19  90.844\n2018-07-20  90.7459\n2018-07-23  89.4594\n2018-07-28  86.9899\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-19  100.2094\n2017-11-20  100.3542\n2017-11-21  100.9042\n2017-11-22  101.3292\n2017-11-24  101.9892\n2017-11-25  101.1739\n2017-11-26  102.263\n2017-11-27  104.0253\n2017-11-29  103.452\n\u22ee\n2018-07-13  89.3238\n2018-07-14  90.36\n2018-07-15  91.2145\n2018-07-16  92.4099\n2018-07-17  91.8074\n2018-07-20  90.7459\n2018-07-22  89.2464\n2018-07-23  89.4594\n2018-07-25  89.0878\n2018-07-27  87.9015", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-19  101.9269  101.778   98.9673   100.0389\n2017-11-20  101.7222  100.9181  97.7148   99.6822\n2017-11-21  100.0475  100.4931  98.9467   98.4529\n2017-11-22  100.3516  99.6382   99.8501   99.7977\n2017-11-23  99.6612   99.4192   99.5238   98.6628\n2017-11-24  99.7499   99.9029   97.3078   98.1512\n2017-11-25  97.3202   99.6457   99.5036   98.1275\n2017-11-26  95.9624   100.4185  100.2904  98.432\n2017-11-27  95.5447   100.815   100.3089  98.5393\n\u22ee\n2018-07-19  125.2796  95.5907   104.2622  92.3902\n2018-07-20  124.8911  95.7194   104.2223  93.0939\n2018-07-21  125.3261  93.9157   102.7376  92.1519\n2018-07-22  125.9974  94.6005   103.9263  92.4663\n2018-07-23  124.8122  94.9774   103.5235  92.9516\n2018-07-24  123.1996  95.1884   103.3894  94.4655\n2018-07-25  123.7339  96.1588   103.8059  94.322\n2018-07-26  124.978   96.8931   104.2553  95.0489\n2018-07-27  125.3946  96.1271   104.3289  96.1678\n2018-07-28  125.5701  96.3774   104.2335  94.2905\n\njulia  X[1:10, :]\nIndex       A         B         C         D\n2017-11-19  101.9269  101.778   98.9673   100.0389\n2017-11-20  101.7222  100.9181  97.7148   99.6822\n2017-11-21  100.0475  100.4931  98.9467   98.4529\n2017-11-22  100.3516  99.6382   99.8501   99.7977\n2017-11-23  99.6612   99.4192   99.5238   98.6628\n2017-11-24  99.7499   99.9029   97.3078   98.1512\n2017-11-25  97.3202   99.6457   99.5036   98.1275\n2017-11-26  95.9624   100.4185  100.2904  98.432\n2017-11-27  95.5447   100.815   100.3089  98.5393\n2017-11-28  96.9962   100.3548  101.0251  98.0552\n\njulia  X[end-100:end, 2:3]\nIndex       B        C\n2018-04-19  90.3093  96.9603\n2018-04-20  89.3182  96.2505\n2018-04-21  90.6309  96.368\n2018-04-22  90.55    97.6796\n2018-04-23  88.9741  97.3787\n2018-04-24  88.0328  97.386\n2018-04-25  88.9533  96.6883\n2018-04-26  89.9523  97.4524\n2018-04-27  89.4428  96.9133\n\u22ee\n2018-07-19  95.5907  104.2622\n2018-07-20  95.7194  104.2223\n2018-07-21  93.9157  102.7376\n2018-07-22  94.6005  103.9263\n2018-07-23  94.9774  103.5235\n2018-07-24  95.1884  103.3894\n2018-07-25  96.1588  103.8059\n2018-07-26  96.8931  104.2553\n2018-07-27  96.1271  104.3289\n2018-07-28  96.3774  104.2335\n\njulia  X[end, 2:end]\nIndex       B        C         D\n2018-07-28  96.3774  104.2335  94.2905", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-19  102.2033  98.5306   100.4214  97.3592\n2017-11-20  99.9578   97.3561   101.1242  96.8923\n2017-11-21  100.6463  98.9318   99.4149   97.398\n2017-11-22  99.304    98.353    100.1237  97.7331\n2017-11-23  100.7317  99.0667   99.4813   97.9815\n2017-11-24  100.5552  97.1868   96.9927   97.3088\n2017-11-25  101.6396  97.0784   96.6296   97.3791\n2017-11-26  101.9406  97.4074   96.5638   99.4406\n2017-11-27  102.5603  98.5987   96.7882   100.7281\n\u22ee\n2018-07-19  90.1652   116.0452  93.237    115.7229\n2018-07-20  90.2579   116.5474  93.6955   116.6877\n2018-07-21  91.3775   114.7913  92.6797   115.5055\n2018-07-22  90.0704   113.8429  92.5019   116.9205\n2018-07-23  90.595    113.3927  91.6587   117.9146\n2018-07-24  89.2      113.5664  93.5761   115.6153\n2018-07-25  91.0549   113.2588  92.6684   116.5322\n2018-07-26  91.7463   112.3542  92.1978   116.3216\n2018-07-27  90.5384   110.6058  93.2171   115.6411\n2018-07-28  91.8231   110.4757  91.6951   113.9696\n\njulia  X[:, :A]\nIndex       A\n2017-11-19  102.2033\n2017-11-20  99.9578\n2017-11-21  100.6463\n2017-11-22  99.304\n2017-11-23  100.7317\n2017-11-24  100.5552\n2017-11-25  101.6396\n2017-11-26  101.9406\n2017-11-27  102.5603\n\u22ee\n2018-07-19  90.1652\n2018-07-20  90.2579\n2018-07-21  91.3775\n2018-07-22  90.0704\n2018-07-23  90.595\n2018-07-24  89.2\n2018-07-25  91.0549\n2018-07-26  91.7463\n2018-07-27  90.5384\n2018-07-28  91.8231\n\njulia  X[:, [:B, :D]]\nIndex       B         D\n2017-11-19  98.5306   97.3592\n2017-11-20  97.3561   96.8923\n2017-11-21  98.9318   97.398\n2017-11-22  98.353    97.7331\n2017-11-23  99.0667   97.9815\n2017-11-24  97.1868   97.3088\n2017-11-25  97.0784   97.3791\n2017-11-26  97.4074   99.4406\n2017-11-27  98.5987   100.7281\n\u22ee\n2018-07-19  116.0452  115.7229\n2018-07-20  116.5474  116.6877\n2018-07-21  114.7913  115.5055\n2018-07-22  113.8429  116.9205\n2018-07-23  113.3927  117.9146\n2018-07-24  113.5664  115.6153\n2018-07-25  113.2588  116.5322\n2018-07-26  112.3542  116.3216\n2018-07-27  110.6058  115.6411\n2018-07-28  110.4757  113.9696", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A         B         C         D\n2016-01-01  101.343   99.5378   102.0802  99.2765\n2016-01-02  101.1183  99.0144   100.1566  99.0028\n2016-01-03  101.4186  100.0433  98.6285   98.8629\n2016-01-04  103.1871  98.5301   96.4922   98.3368\n2016-01-05  102.5251  99.2638   96.5219   97.38\n2016-01-06  100.9829  99.6313   98.0704   96.8018\n2016-01-07  102.1916  101.4188  100.512   96.0941\n2016-01-08  101.3155  100.399   99.2067   96.6065\n2016-01-09  101.0002  101.2584  100.1786  97.1841\n\u22ee\n2017-12-22  98.0168   111.6535  99.9439   64.0697\n2017-12-23  96.993    111.2706  100.1612  62.566\n2017-12-24  96.6708   110.2678  99.2645   63.9994\n2017-12-25  97.0057   107.769   98.8196   63.5193\n2017-12-26  98.0709   106.5559  99.1331   64.5022\n2017-12-27  98.389    106.0957  98.6856   61.6914\n2017-12-28  98.3605   105.6215  98.2      61.1799\n2017-12-29  98.1167   108.0949  99.5131   59.867\n2017-12-30  98.0681   109.3573  99.2266   60.0755\n2017-12-31  98.9005   109.772   97.4562   59.893\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A         B         C        D\n2017-07-01  100.6249  124.5497  93.8871  76.4091\n\njulia  X[ 2016 ]  # whole year\nIndex       A         B         C         D\n2016-01-01  101.343   99.5378   102.0802  99.2765\n2016-01-02  101.1183  99.0144   100.1566  99.0028\n2016-01-03  101.4186  100.0433  98.6285   98.8629\n2016-01-04  103.1871  98.5301   96.4922   98.3368\n2016-01-05  102.5251  99.2638   96.5219   97.38\n2016-01-06  100.9829  99.6313   98.0704   96.8018\n2016-01-07  102.1916  101.4188  100.512   96.0941\n2016-01-08  101.3155  100.399   99.2067   96.6065\n2016-01-09  101.0002  101.2584  100.1786  97.1841\n\u22ee\n2016-12-22  93.9664   114.1274  87.6274   68.653\n2016-12-23  92.7945   113.1783  89.1208   69.2861\n2016-12-24  91.8052   114.1763  89.1018   69.1201\n2016-12-25  90.3013   113.9698  89.6838   69.3039\n2016-12-26  91.7277   114.1584  88.4012   69.4976\n2016-12-27  91.9259   115.2764  89.3071   68.0187\n2016-12-28  91.8415   116.1837  91.4058   67.3922\n2016-12-29  93.0244   116.2391  90.8213   67.6068\n2016-12-30  91.3062   117.6272  91.037    67.9689\n2016-12-31  92.2796   118.1146  89.7717   65.6082\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-19  0.8852\n2017-11-20  0.6375\n2017-11-21  0.0626\n2017-11-22  0.885\n2017-11-23  0.8474\n2017-11-24  0.851\n2017-11-25  0.5603\n2017-11-26  0.0433\n2017-11-27  0.9734\n\u22ee\n2018-07-19  0.3877\n2018-07-20  0.0925\n2018-07-21  0.4341\n2018-07-22  0.3933\n2018-07-23  0.4804\n2018-07-24  0.0487\n2018-07-25  0.9889\n2018-07-26  0.3129\n2018-07-27  0.6764\n2018-07-28  0.1464\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-19  0.9108\n2017-05-20  0.4631\n2017-05-21  0.7945\n2017-05-22  0.2135\n2017-05-23  0.1094\n2017-05-24  0.1994\n2017-05-25  0.6434\n2017-05-26  0.9595\n2017-05-27  0.2265\n\u22ee\n2018-01-19  0.5211\n2018-01-20  0.7318\n2018-01-21  0.0099\n2018-01-22  0.6886\n2018-01-23  0.3103\n2018-01-24  0.0411\n2018-01-25  0.3417\n2018-01-26  0.7456\n2018-01-27  0.3457\n2018-01-28  0.8045\n\njulia\n [x y]\nIndex       A       A\n2017-05-19  NaN     0.9108\n2017-05-20  NaN     0.4631\n2017-05-21  NaN     0.7945\n2017-05-22  NaN     0.2135\n2017-05-23  NaN     0.1094\n2017-05-24  NaN     0.1994\n2017-05-25  NaN     0.6434\n2017-05-26  NaN     0.9595\n2017-05-27  NaN     0.2265\n\u22ee\n2018-07-19  0.3877  NaN\n2018-07-20  0.0925  NaN\n2018-07-21  0.4341  NaN\n2018-07-22  0.3933  NaN\n2018-07-23  0.4804  NaN\n2018-07-24  0.0487  NaN\n2018-07-25  0.9889  NaN\n2018-07-26  0.3129  NaN\n2018-07-27  0.6764  NaN\n2018-07-28  0.1464  NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-19  0.2723\n2017-11-20  0.7634\n2017-11-21  0.9148\n2017-11-22  0.4556\n2017-11-23  0.7493\n2017-11-24  0.9155\n2017-11-25  0.3614\n2017-11-26  0.8786\n2017-11-27  0.5434\n\u22ee\n2018-07-19  0.261\n2018-07-20  0.6064\n2018-07-21  0.2709\n2018-07-22  0.1383\n2018-07-23  0.4954\n2018-07-24  0.4802\n2018-07-25  0.2628\n2018-07-26  0.645\n2018-07-27  0.9074\n2018-07-28  0.0846\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-19  0.3882\n2017-05-20  0.1802\n2017-05-21  0.1917\n2017-05-22  0.6025\n2017-05-23  0.009\n2017-05-24  0.222\n2017-05-25  0.4398\n2017-05-26  0.5263\n2017-05-27  0.3157\n\u22ee\n2018-01-19  0.7045\n2018-01-20  0.7086\n2018-01-21  0.8695\n2018-01-22  0.3544\n2018-01-23  0.7421\n2018-01-24  0.9393\n2018-01-25  0.2782\n2018-01-26  0.1464\n2018-01-27  0.4416\n2018-01-28  0.9909\n\njulia\n ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-19  0.4146\n2017-11-20  0.2966\n2017-11-21  0.6591\n2017-11-22  0.6972\n2017-11-23  0.2658\n2017-11-24  0.5668\n2017-11-25  0.8683\n2017-11-26  0.5787\n2017-11-27  0.8121\n\u22ee\n2018-07-19  0.7626\n2018-07-20  0.6962\n2018-07-21  0.4495\n2018-07-22  0.859\n2018-07-23  0.7666\n2018-07-24  0.6419\n2018-07-25  0.5069\n2018-07-26  0.6368\n2018-07-27  0.9491\n2018-07-28  0.3133\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-19  0.3017\n2017-05-20  0.4297\n2017-05-21  0.6395\n2017-05-22  0.7336\n2017-05-23  0.8876\n2017-05-24  0.7003\n2017-05-25  0.0069\n2017-05-26  0.8091\n2017-05-27  0.3123\n\u22ee\n2018-01-19  0.5644\n2018-01-20  0.7809\n2018-01-21  0.8127\n2018-01-22  0.3244\n2018-01-23  0.5433\n2018-01-24  0.7953\n2018-01-25  0.9703\n2018-01-26  0.0965\n2018-01-27  0.1462\n2018-01-28  0.4233\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-11-19  0.4146  0.4691\n2017-11-20  0.2966  0.4513\n2017-11-21  0.6591  0.5081\n2017-11-22  0.6972  0.213\n2017-11-23  0.2658  0.2777\n2017-11-24  0.5668  0.66\n2017-11-25  0.8683  0.5546\n2017-11-26  0.5787  0.207\n2017-11-27  0.8121  0.6558\n\u22ee\n2018-07-19  0.7626  NaN\n2018-07-20  0.6962  NaN\n2018-07-21  0.4495  NaN\n2018-07-22  0.859   NaN\n2018-07-23  0.7666  NaN\n2018-07-24  0.6419  NaN\n2018-07-25  0.5069  NaN\n2018-07-26  0.6368  NaN\n2018-07-27  0.9491  NaN\n2018-07-28  0.3133  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-05-19  NaN     0.3017\n2017-05-20  NaN     0.4297\n2017-05-21  NaN     0.6395\n2017-05-22  NaN     0.7336\n2017-05-23  NaN     0.8876\n2017-05-24  NaN     0.7003\n2017-05-25  NaN     0.0069\n2017-05-26  NaN     0.8091\n2017-05-27  NaN     0.3123\n\u22ee\n2018-01-19  0.0302  0.3863\n2018-01-20  0.1174  0.0325\n2018-01-21  0.9072  0.6387\n2018-01-22  0.0751  0.5644\n2018-01-23  0.4727  0.7809\n2018-01-24  0.447   0.8127\n2018-01-25  0.8781  0.3244\n2018-01-26  0.8495  0.5433\n2018-01-27  0.6086  0.7953\n2018-01-28  0.6497  0.9703", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-19  0.8852\n2017-11-20  0.6375\n2017-11-21  0.0626\n2017-11-22  0.885\n2017-11-23  0.8474\n2017-11-24  0.851\n2017-11-25  0.5603\n2017-11-26  0.0433\n2017-11-27  0.9734\n\u22ee\n2018-07-19  0.3877\n2018-07-20  0.0925\n2018-07-21  0.4341\n2018-07-22  0.3933\n2018-07-23  0.4804\n2018-07-24  0.0487\n2018-07-25  0.9889\n2018-07-26  0.3129\n2018-07-27  0.6764\n2018-07-28  0.1464\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-19  0.9108\n2017-05-20  0.4631\n2017-05-21  0.7945\n2017-05-22  0.2135\n2017-05-23  0.1094\n2017-05-24  0.1994\n2017-05-25  0.6434\n2017-05-26  0.9595\n2017-05-27  0.2265\n\u22ee\n2018-01-19  0.5211\n2018-01-20  0.7318\n2018-01-21  0.0099\n2018-01-22  0.6886\n2018-01-23  0.3103\n2018-01-24  0.0411\n2018-01-25  0.3417\n2018-01-26  0.7456\n2018-01-27  0.3457\n2018-01-28  0.8045\n\njulia  [x y]\nIndex       A       A\n2017-05-19  NaN     0.9108\n2017-05-20  NaN     0.4631\n2017-05-21  NaN     0.7945\n2017-05-22  NaN     0.2135\n2017-05-23  NaN     0.1094\n2017-05-24  NaN     0.1994\n2017-05-25  NaN     0.6434\n2017-05-26  NaN     0.9595\n2017-05-27  NaN     0.2265\n\u22ee\n2018-07-19  0.3877  NaN\n2018-07-20  0.0925  NaN\n2018-07-21  0.4341  NaN\n2018-07-22  0.3933  NaN\n2018-07-23  0.4804  NaN\n2018-07-24  0.0487  NaN\n2018-07-25  0.9889  NaN\n2018-07-26  0.3129  NaN\n2018-07-27  0.6764  NaN\n2018-07-28  0.1464  NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-19  0.2723\n2017-11-20  0.7634\n2017-11-21  0.9148\n2017-11-22  0.4556\n2017-11-23  0.7493\n2017-11-24  0.9155\n2017-11-25  0.3614\n2017-11-26  0.8786\n2017-11-27  0.5434\n\u22ee\n2018-07-19  0.261\n2018-07-20  0.6064\n2018-07-21  0.2709\n2018-07-22  0.1383\n2018-07-23  0.4954\n2018-07-24  0.4802\n2018-07-25  0.2628\n2018-07-26  0.645\n2018-07-27  0.9074\n2018-07-28  0.0846\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-19  0.3882\n2017-05-20  0.1802\n2017-05-21  0.1917\n2017-05-22  0.6025\n2017-05-23  0.009\n2017-05-24  0.222\n2017-05-25  0.4398\n2017-05-26  0.5263\n2017-05-27  0.3157\n\u22ee\n2018-01-19  0.7045\n2018-01-20  0.7086\n2018-01-21  0.8695\n2018-01-22  0.3544\n2018-01-23  0.7421\n2018-01-24  0.9393\n2018-01-25  0.2782\n2018-01-26  0.1464\n2018-01-27  0.4416\n2018-01-28  0.9909\n\njulia  ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-11-19  0.4146\n2017-11-20  0.2966\n2017-11-21  0.6591\n2017-11-22  0.6972\n2017-11-23  0.2658\n2017-11-24  0.5668\n2017-11-25  0.8683\n2017-11-26  0.5787\n2017-11-27  0.8121\n\u22ee\n2018-07-19  0.7626\n2018-07-20  0.6962\n2018-07-21  0.4495\n2018-07-22  0.859\n2018-07-23  0.7666\n2018-07-24  0.6419\n2018-07-25  0.5069\n2018-07-26  0.6368\n2018-07-27  0.9491\n2018-07-28  0.3133\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-19  0.3017\n2017-05-20  0.4297\n2017-05-21  0.6395\n2017-05-22  0.7336\n2017-05-23  0.8876\n2017-05-24  0.7003\n2017-05-25  0.0069\n2017-05-26  0.8091\n2017-05-27  0.3123\n\u22ee\n2018-01-19  0.5644\n2018-01-20  0.7809\n2018-01-21  0.8127\n2018-01-22  0.3244\n2018-01-23  0.5433\n2018-01-24  0.7953\n2018-01-25  0.9703\n2018-01-26  0.0965\n2018-01-27  0.1462\n2018-01-28  0.4233\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-11-19  0.4146  0.4691\n2017-11-20  0.2966  0.4513\n2017-11-21  0.6591  0.5081\n2017-11-22  0.6972  0.213\n2017-11-23  0.2658  0.2777\n2017-11-24  0.5668  0.66\n2017-11-25  0.8683  0.5546\n2017-11-26  0.5787  0.207\n2017-11-27  0.8121  0.6558\n\u22ee\n2018-07-19  0.7626  NaN\n2018-07-20  0.6962  NaN\n2018-07-21  0.4495  NaN\n2018-07-22  0.859   NaN\n2018-07-23  0.7666  NaN\n2018-07-24  0.6419  NaN\n2018-07-25  0.5069  NaN\n2018-07-26  0.6368  NaN\n2018-07-27  0.9491  NaN\n2018-07-28  0.3133  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-05-19  NaN     0.3017\n2017-05-20  NaN     0.4297\n2017-05-21  NaN     0.6395\n2017-05-22  NaN     0.7336\n2017-05-23  NaN     0.8876\n2017-05-24  NaN     0.7003\n2017-05-25  NaN     0.0069\n2017-05-26  NaN     0.8091\n2017-05-27  NaN     0.3123\n\u22ee\n2018-01-19  0.0302  0.3863\n2018-01-20  0.1174  0.0325\n2018-01-21  0.9072  0.6387\n2018-01-22  0.0751  0.5644\n2018-01-23  0.4727  0.7809\n2018-01-24  0.447   0.8127\n2018-01-25  0.8781  0.3244\n2018-01-26  0.8495  0.5433\n2018-01-27  0.6086  0.7953\n2018-01-28  0.6497  0.9703", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}