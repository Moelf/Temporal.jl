{
    "docs": [
        {
            "location": "/", 
            "text": "Temporal.jl Documentation\n\n\n\n\nTopics\n\n\n\n\nConstruction\n\n\nBasic\n\n\nArithmetic\n\n\nLogical\n\n\nOverview\n\n\nNumerical Indexing\n\n\nInteger\n\n\nBoolean\n\n\nArrays \n Ranges\n\n\n\n\n\n\nSymbol Indexing\n\n\nString Indexing\n\n\nJoins\n\n\nOuter Joins\n\n\nInner Joins\n\n\nLeft/Right Joins\n\n\n\n\n\n\nTemporal Aggregation\n\n\nTime Period Sampling Methods\n\n\nCollapsing \n Summarizing\n\n\n\n\n\n\nData Readers\n\n\nGoogle\n\n\nYahoo\n\n\nQuandl\n\n\nFlat Files\n\n\n\n\n\n\nPackage Options\n\n\nRange Delimiter\n\n\nName Sanitization", 
            "title": "Home"
        }, 
        {
            "location": "/#temporaljl-documentation", 
            "text": "", 
            "title": "Temporal.jl Documentation"
        }, 
        {
            "location": "/#topics", 
            "text": "Construction  Basic  Arithmetic  Logical  Overview  Numerical Indexing  Integer  Boolean  Arrays   Ranges    Symbol Indexing  String Indexing  Joins  Outer Joins  Inner Joins  Left/Right Joins    Temporal Aggregation  Time Period Sampling Methods  Collapsing   Summarizing    Data Readers  Google  Yahoo  Quandl  Flat Files    Package Options  Range Delimiter  Name Sanitization", 
            "title": "Topics"
        }, 
        {
            "location": "/ts/", 
            "text": "Construction\n\n\n\n\nTemporal.TS\n\n\n\n\n#\n\n\nTemporal.TS\n \n \nType\n.\n\n\nTime series type aimed at efficiency and simplicity.\n\n\nMotivated by the \nxts\n package in R and the \npandas\n package in Python.\n\n\nsource", 
            "title": "TS"
        }, 
        {
            "location": "/ts/#construction", 
            "text": "Temporal.TS   #  Temporal.TS     Type .  Time series type aimed at efficiency and simplicity.  Motivated by the  xts  package in R and the  pandas  package in Python.  source", 
            "title": "Construction"
        }, 
        {
            "location": "/operations/", 
            "text": "Basic\n\n\n\n\nArithmetic\n\n\n\n\nLogical", 
            "title": "Operations"
        }, 
        {
            "location": "/operations/#basic", 
            "text": "", 
            "title": "Basic"
        }, 
        {
            "location": "/operations/#arithmetic", 
            "text": "", 
            "title": "Arithmetic"
        }, 
        {
            "location": "/operations/#logical", 
            "text": "", 
            "title": "Logical"
        }, 
        {
            "location": "/indexing/", 
            "text": "Overview\n\n\nOne of the chief aims of the \nTemporal.jl\n package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a \nTS\n object.\n\n\nOne goal has been to keep as much of the relevant indexing operations from the base \nArray\n type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.\n\n\nIn other words, if you want to use standard \nArray\n indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year \n2017\n in the \nprice\n column.\"\n\n\n\n\nNumerical Indexing\n\n\n\n\nInteger\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.5025  98.1444   100.0813  100.5488\n2017-11-24  99.5626   97.8201   101.3202  100.6184\n2017-11-25  100.3631  98.8543   102.3015  101.0111\n2017-11-26  101.0444  96.5676   100.9095  99.6742\n2017-11-27  101.2033  96.5826   99.646    98.2467\n2017-11-28  101.2183  96.7121   100.0514  97.1734\n2017-11-29  100.8715  95.29     101.9287  98.2354\n2017-11-30  100.0218  95.7359   102.4159  98.4353\n2017-12-01  101.0845  95.869    103.0753  99.4709\n\u22ee\n2018-07-23  99.4152   112.6242  117.7071  107.8224\n2018-07-24  100.7051  110.7196  119.7916  108.9584\n2018-07-25  100.2295  111.9607  118.9272  109.9714\n2018-07-26  99.2734   110.9238  117.7054  109.6627\n2018-07-27  100.8795  111.0509  117.2452  106.9392\n2018-07-28  101.3503  111.155   115.7005  109.1338\n2018-07-29  101.7215  110.3909  117.1189  108.7836\n2018-07-30  101.6865  108.038   116.7308  107.5284\n2018-07-31  102.824   108.5268  115.6603  107.417\n2018-08-01  102.4521  109.1688  114.661   106.8212\n\njulia\n X[1]\nIndex       A         B        C         D\n2017-11-23  100.5025  98.1444  100.0813  100.5488\n\njulia\n X[1, :]\nIndex       A         B        C         D\n2017-11-23  100.5025  98.1444  100.0813  100.5488\n\njulia\n X[:, 1]\nIndex       A\n2017-11-23  100.5025\n2017-11-24  99.5626\n2017-11-25  100.3631\n2017-11-26  101.0444\n2017-11-27  101.2033\n2017-11-28  101.2183\n2017-11-29  100.8715\n2017-11-30  100.0218\n2017-12-01  101.0845\n\u22ee\n2018-07-23  99.4152\n2018-07-24  100.7051\n2018-07-25  100.2295\n2018-07-26  99.2734\n2018-07-27  100.8795\n2018-07-28  101.3503\n2018-07-29  101.7215\n2018-07-30  101.6865\n2018-07-31  102.824\n2018-08-01  102.4521\n\njulia\n X[1, 1]\nIndex       A\n2017-11-23  100.5025\n\n\n\n\n\n\nBoolean\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  98.2908   101.4015  100.2657  98.6539\n2017-11-24  97.192    102.6839  98.8601   98.0107\n2017-11-25  98.5756   103.6071  97.886    96.354\n2017-11-26  99.4698   105.0633  97.9188   95.222\n2017-11-27  99.6025   105.0022  98.0533   94.4256\n2017-11-28  101.005   104.5439  99.3087   94.1897\n2017-11-29  100.6031  104.202   100.2462  93.9151\n2017-11-30  101.1944  102.6476  98.6645   92.6721\n2017-12-01  103.1142  102.3285  97.7559   92.7208\n\u22ee\n2018-07-23  126.8483  99.7708   117.7582  62.2611\n2018-07-24  127.5591  99.2646   119.2022  63.4011\n2018-07-25  126.9741  100.1345  117.8092  62.9439\n2018-07-26  128.1237  100.8821  116.6233  62.5156\n2018-07-27  128.0817  99.6531   116.8455  63.969\n2018-07-28  127.4828  99.913    115.7129  64.5969\n2018-07-29  127.8454  98.2791   115.2374  65.8865\n2018-07-30  129.5362  96.9963   115.0278  65.0533\n2018-07-31  130.0346  98.5462   115.3747  62.8757\n2018-08-01  131.5471  99.4886   115.8448  61.6395\n\njulia\n X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-11-23  98.2908   101.4015  100.2657  98.6539\n2017-11-24  97.192    102.6839  98.8601   98.0107\n2017-11-25  98.5756   103.6071  97.886    96.354\n2017-11-26  99.4698   105.0633  97.9188   95.222\n2017-11-27  99.6025   105.0022  98.0533   94.4256\n2017-11-28  101.005   104.5439  99.3087   94.1897\n2017-11-29  100.6031  104.202   100.2462  93.9151\n2017-11-30  101.1944  102.6476  98.6645   92.6721\n2017-12-01  103.1142  102.3285  97.7559   92.7208\n\u22ee\n2018-07-23  126.8483  99.7708   117.7582  62.2611\n2018-07-24  127.5591  99.2646   119.2022  63.4011\n2018-07-25  126.9741  100.1345  117.8092  62.9439\n2018-07-26  128.1237  100.8821  116.6233  62.5156\n2018-07-27  128.0817  99.6531   116.8455  63.969\n2018-07-28  127.4828  99.913    115.7129  64.5969\n2018-07-29  127.8454  98.2791   115.2374  65.8865\n2018-07-30  129.5362  96.9963   115.0278  65.0533\n2018-07-31  130.0346  98.5462   115.3747  62.8757\n2018-08-01  131.5471  99.4886   115.8448  61.6395\n\njulia\n X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-23  98.2908\n2017-11-24  97.192\n2017-11-25  98.5756\n2017-11-26  99.4698\n2017-11-29  100.6031\n2017-11-30  101.1944\n2017-12-03  101.3687\n2017-12-04  101.3035\n2017-12-05  101.8128\n\u22ee\n2018-07-13  125.374\n2018-07-14  124.221\n2018-07-15  123.7628\n2018-07-16  125.5453\n2018-07-18  127.2584\n2018-07-19  126.2169\n2018-07-20  126.7912\n2018-07-25  126.9741\n2018-07-27  128.0817\n2018-07-31  130.0346\n\njulia\n X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-23  98.2908\n2017-11-27  99.6025\n2017-11-30  101.1944\n2017-12-01  103.1142\n2017-12-03  101.3687\n2017-12-04  101.3035\n2017-12-05  101.8128\n2017-12-06  102.1411\n2017-12-08  102.4193\n\u22ee\n2018-07-10  124.9674\n2018-07-12  125.4416\n2018-07-15  123.7628\n2018-07-16  125.5453\n2018-07-17  125.9751\n2018-07-18  127.2584\n2018-07-20  126.7912\n2018-07-25  126.9741\n2018-07-26  128.1237\n2018-07-31  130.0346\n\n\n\n\n\n\nArrays \n Ranges\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.9161  102.2678  101.6956  99.8422\n2017-11-24  101.2665  103.1448  100.7953  101.01\n2017-11-25  102.132   102.0469  100.9661  101.4437\n2017-11-26  101.8793  101.9904  100.042   101.1299\n2017-11-27  102.7251  102.2618  100.4205  100.4032\n2017-11-28  103.8323  102.9251  99.9098   100.4185\n2017-11-29  103.7311  104.1945  99.7754   100.8108\n2017-11-30  104.0839  104.4726  98.0539   100.3592\n2017-12-01  103.4123  103.4582  98.1783   100.3745\n\u22ee\n2018-07-23  97.4472   101.4105  114.0485  83.4898\n2018-07-24  99.5752   101.0455  114.0641  82.834\n2018-07-25  98.2521   102.1865  114.4514  84.2942\n2018-07-26  97.0365   102.2326  113.6056  83.8491\n2018-07-27  97.1736   102.6042  116.1833  84.7046\n2018-07-28  98.3865   101.6799  116.0937  83.7347\n2018-07-29  97.6181   100.8099  116.0232  83.5885\n2018-07-30  97.211    98.7295   115.1608  84.5063\n2018-07-31  96.7576   97.808    115.4555  84.1841\n2018-08-01  97.043    96.7073   114.9246  84.834\n\njulia\n X[1:10, :]\nIndex       A         B         C         D\n2017-11-23  100.9161  102.2678  101.6956  99.8422\n2017-11-24  101.2665  103.1448  100.7953  101.01\n2017-11-25  102.132   102.0469  100.9661  101.4437\n2017-11-26  101.8793  101.9904  100.042   101.1299\n2017-11-27  102.7251  102.2618  100.4205  100.4032\n2017-11-28  103.8323  102.9251  99.9098   100.4185\n2017-11-29  103.7311  104.1945  99.7754   100.8108\n2017-11-30  104.0839  104.4726  98.0539   100.3592\n2017-12-01  103.4123  103.4582  98.1783   100.3745\n2017-12-02  104.2094  102.9056  97.0253   100.3094\n\njulia\n X[end-100:end, 2:3]\nIndex       B         C\n2018-04-23  106.2937  99.4767\n2018-04-24  107.0945  99.0866\n2018-04-25  108.6038  97.1472\n2018-04-26  107.0333  98.8029\n2018-04-27  107.247   98.1776\n2018-04-28  108.6921  100.7632\n2018-04-29  110.848   99.9769\n2018-04-30  110.1161  100.9558\n2018-05-01  109.5805  100.3585\n\u22ee\n2018-07-23  101.4105  114.0485\n2018-07-24  101.0455  114.0641\n2018-07-25  102.1865  114.4514\n2018-07-26  102.2326  113.6056\n2018-07-27  102.6042  116.1833\n2018-07-28  101.6799  116.0937\n2018-07-29  100.8099  116.0232\n2018-07-30  98.7295   115.1608\n2018-07-31  97.808    115.4555\n2018-08-01  96.7073   114.9246\n\njulia\n X[end, 2:end]\nIndex       B        C         D\n2018-08-01  96.7073  114.9246  84.834\n\n\n\n\n\n\nSymbol Indexing\n\n\nYou can also index specific columns you want using the \nfields\n member of the \nTS\n object, so that columns can be fetched by name rather than by numerical index.\n\n\n\njulia\n X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.7497  100.503   99.0445   99.3639\n2017-11-24  100.6328  100.7002  100.3108  100.4882\n2017-11-25  102.2071  100.4989  101.7136  99.8514\n2017-11-26  102.937   100.9981  101.8833  98.5373\n2017-11-27  102.2448  101.4436  101.966   97.9145\n2017-11-28  102.7773  100.827   104.106   97.4583\n2017-11-29  102.7284  99.6103   102.6668  97.0765\n2017-11-30  101.9769  98.1512   102.4674  96.7353\n2017-12-01  101.203   98.7047   102.1218  96.8687\n\u22ee\n2018-07-23  101.6878  54.8377   110.2852  98.0035\n2018-07-24  102.6526  55.4408   111.1932  99.8339\n2018-07-25  102.6333  55.842    113.0082  99.6129\n2018-07-26  102.8353  55.3008   112.3899  99.5354\n2018-07-27  103.0425  54.9956   112.6537  100.188\n2018-07-28  105.4889  54.4527   112.7704  101.0789\n2018-07-29  104.1759  52.8894   112.1453  100.2356\n2018-07-30  103.4553  51.0441   113.1208  99.8792\n2018-07-31  103.5264  51.2989   112.9403  99.8575\n2018-08-01  102.4781  52.3803   112.898   99.6091\n\njulia\n X[:, :A]\nIndex       A\n2017-11-23  100.7497\n2017-11-24  100.6328\n2017-11-25  102.2071\n2017-11-26  102.937\n2017-11-27  102.2448\n2017-11-28  102.7773\n2017-11-29  102.7284\n2017-11-30  101.9769\n2017-12-01  101.203\n\u22ee\n2018-07-23  101.6878\n2018-07-24  102.6526\n2018-07-25  102.6333\n2018-07-26  102.8353\n2018-07-27  103.0425\n2018-07-28  105.4889\n2018-07-29  104.1759\n2018-07-30  103.4553\n2018-07-31  103.5264\n2018-08-01  102.4781\n\njulia\n X[:, [:B, :D]]\nIndex       B         D\n2017-11-23  100.503   99.3639\n2017-11-24  100.7002  100.4882\n2017-11-25  100.4989  99.8514\n2017-11-26  100.9981  98.5373\n2017-11-27  101.4436  97.9145\n2017-11-28  100.827   97.4583\n2017-11-29  99.6103   97.0765\n2017-11-30  98.1512   96.7353\n2017-12-01  98.7047   96.8687\n\u22ee\n2018-07-23  54.8377   98.0035\n2018-07-24  55.4408   99.8339\n2018-07-25  55.842    99.6129\n2018-07-26  55.3008   99.5354\n2018-07-27  54.9956   100.188\n2018-07-28  54.4527   101.0789\n2018-07-29  52.8894   100.2356\n2018-07-30  51.0441   99.8792\n2018-07-31  51.2989   99.8575\n2018-08-01  52.3803   99.6091\n\n\n\n\n\n\nString Indexing\n\n\nOne of the more powerful features of Temporal's indexing functionality is that you can index rows of a \nTS\n object using \nString\ns formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the \nxts\n package in R this functionality will feel very familiar.)\n\n\n\njulia\n t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia\n X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A        B         C         D\n2016-01-01  98.5591  100.6748  99.4478   99.8511\n2016-01-02  98.7514  101.2701  101.4324  97.9025\n2016-01-03  97.0985  103.0823  101.2734  98.3842\n2016-01-04  98.0823  101.8497  100.6986  98.5587\n2016-01-05  96.9073  102.6321  100.4898  98.5528\n2016-01-06  98.4132  102.9859  100.9451  98.0059\n2016-01-07  98.6179  104.4268  100.7     96.4086\n2016-01-08  99.0612  104.1073  99.1041   94.6036\n2016-01-09  98.3294  105.8588  100.273   93.4884\n\u22ee\n2017-12-22  87.5449  128.9224  118.7502  68.125\n2017-12-23  88.2823  128.1788  116.786   67.1193\n2017-12-24  87.9664  127.6979  115.678   66.8395\n2017-12-25  87.7583  127.9241  117.0939  66.7834\n2017-12-26  86.5115  129.2952  117.2402  66.8318\n2017-12-27  88.8914  129.441   116.7008  68.3442\n2017-12-28  89.2871  130.0919  117.2986  69.8317\n2017-12-29  89.4424  131.37    117.3355  69.1414\n2017-12-30  88.4807  130.2245  118.162   68.7388\n2017-12-31  86.8707  129.5718  119.1236  67.4858\n\njulia\n X[\n2017-07-01\n]  # single day\nIndex       A       B         C         D\n2017-07-01  92.554  128.5862  111.0742  85.6918\n\njulia\n X[\n2016\n]  # whole year\nIndex       A         B         C         D\n2016-01-01  98.5591   100.6748  99.4478   99.8511\n2016-01-02  98.7514   101.2701  101.4324  97.9025\n2016-01-03  97.0985   103.0823  101.2734  98.3842\n2016-01-04  98.0823   101.8497  100.6986  98.5587\n2016-01-05  96.9073   102.6321  100.4898  98.5528\n2016-01-06  98.4132   102.9859  100.9451  98.0059\n2016-01-07  98.6179   104.4268  100.7     96.4086\n2016-01-08  99.0612   104.1073  99.1041   94.6036\n2016-01-09  98.3294   105.8588  100.273   93.4884\n\u22ee\n2016-12-22  98.3679   110.3813  105.6451  96.4015\n2016-12-23  97.2345   111.5264  105.62    96.1775\n2016-12-24  98.7972   110.5063  105.4905  97.2427\n2016-12-25  98.2028   112.2271  105.798   96.6313\n2016-12-26  98.2664   113.781   105.4167  95.6273\n2016-12-27  100.0734  115.0498  106.0803  95.7977\n2016-12-28  100.5919  115.1624  105.5772  95.5724\n2016-12-29  100.7683  115.7295  105.2561  94.198\n2016-12-30  100.7233  115.8865  105.5872  92.9408\n2016-12-31  98.9763   116.2018  103.6751  92.4659\n\njulia\n X[\n2016-09-15/\n]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia\n X[\n/2017-07-01\n]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia\n X[\n2016-09-15/2017-07-01\n]  # mix \n match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#overview", 
            "text": "One of the chief aims of the  Temporal.jl  package is to simplify the process of extracting a desired subset from a time series dataset. To that end, there are quite a few different methods by which one can index specific rows/columns of a  TS  object.  One goal has been to keep as much of the relevant indexing operations from the base  Array  type as possible to maintain consistency. However, there are certain indexing idioms that are specifically more familiar and meaningful to tabular time series data, particularly when prototyping in the REPL.  In other words, if you want to use standard  Array  indexing syntax, it should work as you would expect, but you should also be able to essentially say, \"give me all the observations from the year  2017  in the  price  column.\"", 
            "title": "Overview"
        }, 
        {
            "location": "/indexing/#numerical-indexing", 
            "text": "", 
            "title": "Numerical Indexing"
        }, 
        {
            "location": "/indexing/#integer", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.5025  98.1444   100.0813  100.5488\n2017-11-24  99.5626   97.8201   101.3202  100.6184\n2017-11-25  100.3631  98.8543   102.3015  101.0111\n2017-11-26  101.0444  96.5676   100.9095  99.6742\n2017-11-27  101.2033  96.5826   99.646    98.2467\n2017-11-28  101.2183  96.7121   100.0514  97.1734\n2017-11-29  100.8715  95.29     101.9287  98.2354\n2017-11-30  100.0218  95.7359   102.4159  98.4353\n2017-12-01  101.0845  95.869    103.0753  99.4709\n\u22ee\n2018-07-23  99.4152   112.6242  117.7071  107.8224\n2018-07-24  100.7051  110.7196  119.7916  108.9584\n2018-07-25  100.2295  111.9607  118.9272  109.9714\n2018-07-26  99.2734   110.9238  117.7054  109.6627\n2018-07-27  100.8795  111.0509  117.2452  106.9392\n2018-07-28  101.3503  111.155   115.7005  109.1338\n2018-07-29  101.7215  110.3909  117.1189  108.7836\n2018-07-30  101.6865  108.038   116.7308  107.5284\n2018-07-31  102.824   108.5268  115.6603  107.417\n2018-08-01  102.4521  109.1688  114.661   106.8212\n\njulia  X[1]\nIndex       A         B        C         D\n2017-11-23  100.5025  98.1444  100.0813  100.5488\n\njulia  X[1, :]\nIndex       A         B        C         D\n2017-11-23  100.5025  98.1444  100.0813  100.5488\n\njulia  X[:, 1]\nIndex       A\n2017-11-23  100.5025\n2017-11-24  99.5626\n2017-11-25  100.3631\n2017-11-26  101.0444\n2017-11-27  101.2033\n2017-11-28  101.2183\n2017-11-29  100.8715\n2017-11-30  100.0218\n2017-12-01  101.0845\n\u22ee\n2018-07-23  99.4152\n2018-07-24  100.7051\n2018-07-25  100.2295\n2018-07-26  99.2734\n2018-07-27  100.8795\n2018-07-28  101.3503\n2018-07-29  101.7215\n2018-07-30  101.6865\n2018-07-31  102.824\n2018-08-01  102.4521\n\njulia  X[1, 1]\nIndex       A\n2017-11-23  100.5025", 
            "title": "Integer"
        }, 
        {
            "location": "/indexing/#boolean", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  98.2908   101.4015  100.2657  98.6539\n2017-11-24  97.192    102.6839  98.8601   98.0107\n2017-11-25  98.5756   103.6071  97.886    96.354\n2017-11-26  99.4698   105.0633  97.9188   95.222\n2017-11-27  99.6025   105.0022  98.0533   94.4256\n2017-11-28  101.005   104.5439  99.3087   94.1897\n2017-11-29  100.6031  104.202   100.2462  93.9151\n2017-11-30  101.1944  102.6476  98.6645   92.6721\n2017-12-01  103.1142  102.3285  97.7559   92.7208\n\u22ee\n2018-07-23  126.8483  99.7708   117.7582  62.2611\n2018-07-24  127.5591  99.2646   119.2022  63.4011\n2018-07-25  126.9741  100.1345  117.8092  62.9439\n2018-07-26  128.1237  100.8821  116.6233  62.5156\n2018-07-27  128.0817  99.6531   116.8455  63.969\n2018-07-28  127.4828  99.913    115.7129  64.5969\n2018-07-29  127.8454  98.2791   115.2374  65.8865\n2018-07-30  129.5362  96.9963   115.0278  65.0533\n2018-07-31  130.0346  98.5462   115.3747  62.8757\n2018-08-01  131.5471  99.4886   115.8448  61.6395\n\njulia  X[trues(size(X,1)), :]\nIndex       A         B         C         D\n2017-11-23  98.2908   101.4015  100.2657  98.6539\n2017-11-24  97.192    102.6839  98.8601   98.0107\n2017-11-25  98.5756   103.6071  97.886    96.354\n2017-11-26  99.4698   105.0633  97.9188   95.222\n2017-11-27  99.6025   105.0022  98.0533   94.4256\n2017-11-28  101.005   104.5439  99.3087   94.1897\n2017-11-29  100.6031  104.202   100.2462  93.9151\n2017-11-30  101.1944  102.6476  98.6645   92.6721\n2017-12-01  103.1142  102.3285  97.7559   92.7208\n\u22ee\n2018-07-23  126.8483  99.7708   117.7582  62.2611\n2018-07-24  127.5591  99.2646   119.2022  63.4011\n2018-07-25  126.9741  100.1345  117.8092  62.9439\n2018-07-26  128.1237  100.8821  116.6233  62.5156\n2018-07-27  128.0817  99.6531   116.8455  63.969\n2018-07-28  127.4828  99.913    115.7129  64.5969\n2018-07-29  127.8454  98.2791   115.2374  65.8865\n2018-07-30  129.5362  96.9963   115.0278  65.0533\n2018-07-31  130.0346  98.5462   115.3747  62.8757\n2018-08-01  131.5471  99.4886   115.8448  61.6395\n\njulia  X[rand(Bool, size(X,1)), 1]\nIndex       A\n2017-11-23  98.2908\n2017-11-24  97.192\n2017-11-25  98.5756\n2017-11-26  99.4698\n2017-11-29  100.6031\n2017-11-30  101.1944\n2017-12-03  101.3687\n2017-12-04  101.3035\n2017-12-05  101.8128\n\u22ee\n2018-07-13  125.374\n2018-07-14  124.221\n2018-07-15  123.7628\n2018-07-16  125.5453\n2018-07-18  127.2584\n2018-07-19  126.2169\n2018-07-20  126.7912\n2018-07-25  126.9741\n2018-07-27  128.0817\n2018-07-31  130.0346\n\njulia  X[rand(Bool, size(X,1)), [true, false, false, false]]\nIndex       A\n2017-11-23  98.2908\n2017-11-27  99.6025\n2017-11-30  101.1944\n2017-12-01  103.1142\n2017-12-03  101.3687\n2017-12-04  101.3035\n2017-12-05  101.8128\n2017-12-06  102.1411\n2017-12-08  102.4193\n\u22ee\n2018-07-10  124.9674\n2018-07-12  125.4416\n2018-07-15  123.7628\n2018-07-16  125.5453\n2018-07-17  125.9751\n2018-07-18  127.2584\n2018-07-20  126.7912\n2018-07-25  126.9741\n2018-07-26  128.1237\n2018-07-31  130.0346", 
            "title": "Boolean"
        }, 
        {
            "location": "/indexing/#arrays-ranges", 
            "text": "julia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.9161  102.2678  101.6956  99.8422\n2017-11-24  101.2665  103.1448  100.7953  101.01\n2017-11-25  102.132   102.0469  100.9661  101.4437\n2017-11-26  101.8793  101.9904  100.042   101.1299\n2017-11-27  102.7251  102.2618  100.4205  100.4032\n2017-11-28  103.8323  102.9251  99.9098   100.4185\n2017-11-29  103.7311  104.1945  99.7754   100.8108\n2017-11-30  104.0839  104.4726  98.0539   100.3592\n2017-12-01  103.4123  103.4582  98.1783   100.3745\n\u22ee\n2018-07-23  97.4472   101.4105  114.0485  83.4898\n2018-07-24  99.5752   101.0455  114.0641  82.834\n2018-07-25  98.2521   102.1865  114.4514  84.2942\n2018-07-26  97.0365   102.2326  113.6056  83.8491\n2018-07-27  97.1736   102.6042  116.1833  84.7046\n2018-07-28  98.3865   101.6799  116.0937  83.7347\n2018-07-29  97.6181   100.8099  116.0232  83.5885\n2018-07-30  97.211    98.7295   115.1608  84.5063\n2018-07-31  96.7576   97.808    115.4555  84.1841\n2018-08-01  97.043    96.7073   114.9246  84.834\n\njulia  X[1:10, :]\nIndex       A         B         C         D\n2017-11-23  100.9161  102.2678  101.6956  99.8422\n2017-11-24  101.2665  103.1448  100.7953  101.01\n2017-11-25  102.132   102.0469  100.9661  101.4437\n2017-11-26  101.8793  101.9904  100.042   101.1299\n2017-11-27  102.7251  102.2618  100.4205  100.4032\n2017-11-28  103.8323  102.9251  99.9098   100.4185\n2017-11-29  103.7311  104.1945  99.7754   100.8108\n2017-11-30  104.0839  104.4726  98.0539   100.3592\n2017-12-01  103.4123  103.4582  98.1783   100.3745\n2017-12-02  104.2094  102.9056  97.0253   100.3094\n\njulia  X[end-100:end, 2:3]\nIndex       B         C\n2018-04-23  106.2937  99.4767\n2018-04-24  107.0945  99.0866\n2018-04-25  108.6038  97.1472\n2018-04-26  107.0333  98.8029\n2018-04-27  107.247   98.1776\n2018-04-28  108.6921  100.7632\n2018-04-29  110.848   99.9769\n2018-04-30  110.1161  100.9558\n2018-05-01  109.5805  100.3585\n\u22ee\n2018-07-23  101.4105  114.0485\n2018-07-24  101.0455  114.0641\n2018-07-25  102.1865  114.4514\n2018-07-26  102.2326  113.6056\n2018-07-27  102.6042  116.1833\n2018-07-28  101.6799  116.0937\n2018-07-29  100.8099  116.0232\n2018-07-30  98.7295   115.1608\n2018-07-31  97.808    115.4555\n2018-08-01  96.7073   114.9246\n\njulia  X[end, 2:end]\nIndex       B        C         D\n2018-08-01  96.7073  114.9246  84.834", 
            "title": "Arrays &amp; Ranges"
        }, 
        {
            "location": "/indexing/#symbol-indexing", 
            "text": "You can also index specific columns you want using the  fields  member of the  TS  object, so that columns can be fetched by name rather than by numerical index.  \njulia  X = TS(cumsum(randn(252, 4))) + 100.0\nIndex       A         B         C         D\n2017-11-23  100.7497  100.503   99.0445   99.3639\n2017-11-24  100.6328  100.7002  100.3108  100.4882\n2017-11-25  102.2071  100.4989  101.7136  99.8514\n2017-11-26  102.937   100.9981  101.8833  98.5373\n2017-11-27  102.2448  101.4436  101.966   97.9145\n2017-11-28  102.7773  100.827   104.106   97.4583\n2017-11-29  102.7284  99.6103   102.6668  97.0765\n2017-11-30  101.9769  98.1512   102.4674  96.7353\n2017-12-01  101.203   98.7047   102.1218  96.8687\n\u22ee\n2018-07-23  101.6878  54.8377   110.2852  98.0035\n2018-07-24  102.6526  55.4408   111.1932  99.8339\n2018-07-25  102.6333  55.842    113.0082  99.6129\n2018-07-26  102.8353  55.3008   112.3899  99.5354\n2018-07-27  103.0425  54.9956   112.6537  100.188\n2018-07-28  105.4889  54.4527   112.7704  101.0789\n2018-07-29  104.1759  52.8894   112.1453  100.2356\n2018-07-30  103.4553  51.0441   113.1208  99.8792\n2018-07-31  103.5264  51.2989   112.9403  99.8575\n2018-08-01  102.4781  52.3803   112.898   99.6091\n\njulia  X[:, :A]\nIndex       A\n2017-11-23  100.7497\n2017-11-24  100.6328\n2017-11-25  102.2071\n2017-11-26  102.937\n2017-11-27  102.2448\n2017-11-28  102.7773\n2017-11-29  102.7284\n2017-11-30  101.9769\n2017-12-01  101.203\n\u22ee\n2018-07-23  101.6878\n2018-07-24  102.6526\n2018-07-25  102.6333\n2018-07-26  102.8353\n2018-07-27  103.0425\n2018-07-28  105.4889\n2018-07-29  104.1759\n2018-07-30  103.4553\n2018-07-31  103.5264\n2018-08-01  102.4781\n\njulia  X[:, [:B, :D]]\nIndex       B         D\n2017-11-23  100.503   99.3639\n2017-11-24  100.7002  100.4882\n2017-11-25  100.4989  99.8514\n2017-11-26  100.9981  98.5373\n2017-11-27  101.4436  97.9145\n2017-11-28  100.827   97.4583\n2017-11-29  99.6103   97.0765\n2017-11-30  98.1512   96.7353\n2017-12-01  98.7047   96.8687\n\u22ee\n2018-07-23  54.8377   98.0035\n2018-07-24  55.4408   99.8339\n2018-07-25  55.842    99.6129\n2018-07-26  55.3008   99.5354\n2018-07-27  54.9956   100.188\n2018-07-28  54.4527   101.0789\n2018-07-29  52.8894   100.2356\n2018-07-30  51.0441   99.8792\n2018-07-31  51.2989   99.8575\n2018-08-01  52.3803   99.6091", 
            "title": "Symbol Indexing"
        }, 
        {
            "location": "/indexing/#string-indexing", 
            "text": "One of the more powerful features of Temporal's indexing functionality is that you can index rows of a  TS  object using  String s formatted in such a way as to express specific periods of time in a natural idiomatic way. (If you have used the  xts  package in R this functionality will feel very familiar.)  \njulia  t = Date(2016,1,1):Day(1):Date(2017,12,31)\n2016-01-01:1 day:2017-12-31\n\njulia  X = TS(cumsum(randn(length(t), 4)), t) + 100.0\nIndex       A        B         C         D\n2016-01-01  98.5591  100.6748  99.4478   99.8511\n2016-01-02  98.7514  101.2701  101.4324  97.9025\n2016-01-03  97.0985  103.0823  101.2734  98.3842\n2016-01-04  98.0823  101.8497  100.6986  98.5587\n2016-01-05  96.9073  102.6321  100.4898  98.5528\n2016-01-06  98.4132  102.9859  100.9451  98.0059\n2016-01-07  98.6179  104.4268  100.7     96.4086\n2016-01-08  99.0612  104.1073  99.1041   94.6036\n2016-01-09  98.3294  105.8588  100.273   93.4884\n\u22ee\n2017-12-22  87.5449  128.9224  118.7502  68.125\n2017-12-23  88.2823  128.1788  116.786   67.1193\n2017-12-24  87.9664  127.6979  115.678   66.8395\n2017-12-25  87.7583  127.9241  117.0939  66.7834\n2017-12-26  86.5115  129.2952  117.2402  66.8318\n2017-12-27  88.8914  129.441   116.7008  68.3442\n2017-12-28  89.2871  130.0919  117.2986  69.8317\n2017-12-29  89.4424  131.37    117.3355  69.1414\n2017-12-30  88.4807  130.2245  118.162   68.7388\n2017-12-31  86.8707  129.5718  119.1236  67.4858\n\njulia  X[ 2017-07-01 ]  # single day\nIndex       A       B         C         D\n2017-07-01  92.554  128.5862  111.0742  85.6918\n\njulia  X[ 2016 ]  # whole year\nIndex       A         B         C         D\n2016-01-01  98.5591   100.6748  99.4478   99.8511\n2016-01-02  98.7514   101.2701  101.4324  97.9025\n2016-01-03  97.0985   103.0823  101.2734  98.3842\n2016-01-04  98.0823   101.8497  100.6986  98.5587\n2016-01-05  96.9073   102.6321  100.4898  98.5528\n2016-01-06  98.4132   102.9859  100.9451  98.0059\n2016-01-07  98.6179   104.4268  100.7     96.4086\n2016-01-08  99.0612   104.1073  99.1041   94.6036\n2016-01-09  98.3294   105.8588  100.273   93.4884\n\u22ee\n2016-12-22  98.3679   110.3813  105.6451  96.4015\n2016-12-23  97.2345   111.5264  105.62    96.1775\n2016-12-24  98.7972   110.5063  105.4905  97.2427\n2016-12-25  98.2028   112.2271  105.798   96.6313\n2016-12-26  98.2664   113.781   105.4167  95.6273\n2016-12-27  100.0734  115.0498  106.0803  95.7977\n2016-12-28  100.5919  115.1624  105.5772  95.5724\n2016-12-29  100.7683  115.7295  105.2561  94.198\n2016-12-30  100.7233  115.8865  105.5872  92.9408\n2016-12-31  98.9763   116.2018  103.6751  92.4659\n\njulia  X[ 2016-09-15/ ]  # everything after a specific day\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/\n\njulia  X[ /2017-07-01 ]  # everything up through a specific month\nERROR: AssertionError: Invalid indexing string: Unable to parse /2017-07-01\n\njulia  X[ 2016-09-15/2017-07-01 ]  # mix   match\nERROR: AssertionError: Invalid indexing string: Unable to parse 2016-09-15/2017-07-01", 
            "title": "String Indexing"
        }, 
        {
            "location": "/combining/", 
            "text": "Temporal.TS\n\n\n\n\n\n\nJoins\n\n\n\n\nOuter Joins\n\n\nOne can perform a full outer join on the time \nindex\nes of two \nTS\n objects $x$ and $y$ in the following ways:\n\n\n\n\nmerge(x, y)\n\n\nojoin(x, y)\n\n\n[x y]\n\n\nhcat(x, y)\n\n\n\n\nWhere there are dates in the \nindex\n of one that do not exist in the other, values will be filled with \nNaN\n objects. As the \nmissing\n functionality matures in Julia's base syntax, it will eventually replace \nNaN\n in this context, since unfortunately \nNaN\n is only applicable for \nFloat64\n element types.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-23  0.6089\n2017-11-24  0.8341\n2017-11-25  0.5864\n2017-11-26  0.7947\n2017-11-27  0.4169\n2017-11-28  0.4038\n2017-11-29  0.1029\n2017-11-30  0.8515\n2017-12-01  0.8693\n\u22ee\n2018-07-23  0.9039\n2018-07-24  0.4019\n2018-07-25  0.5073\n2018-07-26  0.156\n2018-07-27  0.4829\n2018-07-28  0.8246\n2018-07-29  0.5105\n2018-07-30  0.4943\n2018-07-31  0.5298\n2018-08-01  0.448\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.9272\n2017-05-24  0.0153\n2017-05-25  0.9662\n2017-05-26  0.7772\n2017-05-27  0.7602\n2017-05-28  0.1868\n2017-05-29  0.1953\n2017-05-30  0.5927\n2017-06-01  0.1898\n\u22ee\n2018-01-23  0.8497\n2018-01-24  0.6912\n2018-01-25  0.4903\n2018-01-26  0.2966\n2018-01-27  0.8942\n2018-01-28  0.5298\n2018-01-29  0.4426\n2018-01-30  0.8868\n2018-01-31  0.8618\n2018-02-01  0.763\n\njulia\n [x y]\nIndex       A       A\n2017-05-23  NaN     0.9272\n2017-05-24  NaN     0.0153\n2017-05-25  NaN     0.9662\n2017-05-26  NaN     0.7772\n2017-05-27  NaN     0.7602\n2017-05-28  NaN     0.1868\n2017-05-29  NaN     0.1953\n2017-05-30  NaN     0.5927\n2017-06-01  NaN     0.1898\n\u22ee\n2018-07-23  0.9039  NaN\n2018-07-24  0.4019  NaN\n2018-07-25  0.5073  NaN\n2018-07-26  0.156   NaN\n2018-07-27  0.4829  NaN\n2018-07-28  0.8246  NaN\n2018-07-29  0.5105  NaN\n2018-07-30  0.4943  NaN\n2018-07-31  0.5298  NaN\n2018-08-01  0.448   NaN\n\n\n\n\n\n\nInner Joins\n\n\nYou can do inner joins on \nTS\n objects using the \nijoin\n function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time \nindex\n of the LHS and the RHS intersect.\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-23  0.2679\n2017-11-24  0.7424\n2017-11-25  0.7446\n2017-11-26  0.3681\n2017-11-27  0.6844\n2017-11-28  0.6443\n2017-11-29  0.3479\n2017-11-30  0.1688\n2017-12-01  0.9908\n\u22ee\n2018-07-23  0.2488\n2018-07-24  0.8764\n2018-07-25  0.7111\n2018-07-26  0.9478\n2018-07-27  0.7875\n2018-07-28  0.1049\n2018-07-29  0.892\n2018-07-30  0.8987\n2018-07-31  0.663\n2018-08-01  0.0251\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.3729\n2017-05-24  0.8739\n2017-05-25  0.9881\n2017-05-26  0.4681\n2017-05-27  0.3318\n2017-05-28  0.0081\n2017-05-29  0.3743\n2017-05-30  0.7471\n2017-06-01  0.3359\n\u22ee\n2018-01-23  0.404\n2018-01-24  0.065\n2018-01-25  0.7365\n2018-01-26  0.7452\n2018-01-27  0.6573\n2018-01-28  0.5094\n2018-01-29  0.8935\n2018-01-30  0.7011\n2018-01-31  0.5782\n2018-02-01  0.3129\n\njulia\n ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))\n\n\n\n\n\n\nLeft/Right Joins\n\n\nLeft and right joins are performed similarly to inner joins and the typical SQL join queries using the objects' \nindex\n fields as the joining key.\n\n\n\n\nLeft Join\n: keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time \nindex\n\n\nRight Join\n: keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time \nindex\n\n\n\n\n\njulia\n x = TS(rand(252))\nIndex       A\n2017-11-23  0.3448\n2017-11-24  0.6875\n2017-11-25  0.6443\n2017-11-26  0.0073\n2017-11-27  0.7005\n2017-11-28  0.0126\n2017-11-29  0.7137\n2017-11-30  0.8981\n2017-12-01  0.7404\n\u22ee\n2018-07-23  0.0327\n2018-07-24  0.0942\n2018-07-25  0.1692\n2018-07-26  0.6074\n2018-07-27  0.5717\n2018-07-28  0.8922\n2018-07-29  0.3482\n2018-07-30  0.0267\n2018-07-31  0.8178\n2018-08-01  0.4317\n\njulia\n y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.2485\n2017-05-24  0.6335\n2017-05-25  0.8235\n2017-05-26  0.6925\n2017-05-27  0.3553\n2017-05-28  0.9902\n2017-05-29  0.5057\n2017-05-30  0.4836\n2017-06-01  0.2484\n\u22ee\n2018-01-23  0.7971\n2018-01-24  0.3161\n2018-01-25  0.0771\n2018-01-26  0.1833\n2018-01-27  0.7146\n2018-01-28  0.7098\n2018-01-29  0.0608\n2018-01-30  0.9633\n2018-01-31  0.1848\n2018-02-01  0.4821\n\njulia\n ljoin(x, y)\nIndex       A       A\n2017-11-23  0.3448  0.7834\n2017-11-24  0.6875  0.3477\n2017-11-25  0.6443  0.751\n2017-11-26  0.0073  0.1489\n2017-11-27  0.7005  0.0365\n2017-11-28  0.0126  0.4012\n2017-11-29  0.7137  0.402\n2017-11-30  0.8981  0.1994\n2017-12-01  0.7404  0.5838\n\u22ee\n2018-07-23  0.0327  NaN\n2018-07-24  0.0942  NaN\n2018-07-25  0.1692  NaN\n2018-07-26  0.6074  NaN\n2018-07-27  0.5717  NaN\n2018-07-28  0.8922  NaN\n2018-07-29  0.3482  NaN\n2018-07-30  0.0267  NaN\n2018-07-31  0.8178  NaN\n2018-08-01  0.4317  NaN\n\njulia\n rjoin(x, y)\nIndex       A       A\n2017-05-23  NaN     0.2485\n2017-05-24  NaN     0.6335\n2017-05-25  NaN     0.8235\n2017-05-26  NaN     0.6925\n2017-05-27  NaN     0.3553\n2017-05-28  NaN     0.9902\n2017-05-29  NaN     0.5057\n2017-05-30  NaN     0.4836\n2017-06-01  NaN     0.2484\n\u22ee\n2018-01-23  0.6163  0.4634\n2018-01-24  0.3795  0.6058\n2018-01-25  0.2524  0.4774\n2018-01-26  0.6123  0.7971\n2018-01-27  0.3283  0.3161\n2018-01-28  0.8517  0.0771\n2018-01-29  0.3562  0.1833\n2018-01-30  0.1535  0.7146\n2018-01-31  0.3399  0.7098\n2018-02-01  0.2192  0.0608", 
            "title": "Combining"
        }, 
        {
            "location": "/combining/#joins", 
            "text": "", 
            "title": "Joins"
        }, 
        {
            "location": "/combining/#outer-joins", 
            "text": "One can perform a full outer join on the time  index es of two  TS  objects $x$ and $y$ in the following ways:   merge(x, y)  ojoin(x, y)  [x y]  hcat(x, y)   Where there are dates in the  index  of one that do not exist in the other, values will be filled with  NaN  objects. As the  missing  functionality matures in Julia's base syntax, it will eventually replace  NaN  in this context, since unfortunately  NaN  is only applicable for  Float64  element types.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-23  0.6089\n2017-11-24  0.8341\n2017-11-25  0.5864\n2017-11-26  0.7947\n2017-11-27  0.4169\n2017-11-28  0.4038\n2017-11-29  0.1029\n2017-11-30  0.8515\n2017-12-01  0.8693\n\u22ee\n2018-07-23  0.9039\n2018-07-24  0.4019\n2018-07-25  0.5073\n2018-07-26  0.156\n2018-07-27  0.4829\n2018-07-28  0.8246\n2018-07-29  0.5105\n2018-07-30  0.4943\n2018-07-31  0.5298\n2018-08-01  0.448\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.9272\n2017-05-24  0.0153\n2017-05-25  0.9662\n2017-05-26  0.7772\n2017-05-27  0.7602\n2017-05-28  0.1868\n2017-05-29  0.1953\n2017-05-30  0.5927\n2017-06-01  0.1898\n\u22ee\n2018-01-23  0.8497\n2018-01-24  0.6912\n2018-01-25  0.4903\n2018-01-26  0.2966\n2018-01-27  0.8942\n2018-01-28  0.5298\n2018-01-29  0.4426\n2018-01-30  0.8868\n2018-01-31  0.8618\n2018-02-01  0.763\n\njulia  [x y]\nIndex       A       A\n2017-05-23  NaN     0.9272\n2017-05-24  NaN     0.0153\n2017-05-25  NaN     0.9662\n2017-05-26  NaN     0.7772\n2017-05-27  NaN     0.7602\n2017-05-28  NaN     0.1868\n2017-05-29  NaN     0.1953\n2017-05-30  NaN     0.5927\n2017-06-01  NaN     0.1898\n\u22ee\n2018-07-23  0.9039  NaN\n2018-07-24  0.4019  NaN\n2018-07-25  0.5073  NaN\n2018-07-26  0.156   NaN\n2018-07-27  0.4829  NaN\n2018-07-28  0.8246  NaN\n2018-07-29  0.5105  NaN\n2018-07-30  0.4943  NaN\n2018-07-31  0.5298  NaN\n2018-08-01  0.448   NaN", 
            "title": "Outer Joins"
        }, 
        {
            "location": "/combining/#inner-joins", 
            "text": "You can do inner joins on  TS  objects using the  ijoin  function, which will remove any observations corresponding to time steps where at least one of the joined objects is missing a row. This will basically keep only the rows where the time  index  of the LHS and the RHS intersect.  \njulia  x = TS(rand(252))\nIndex       A\n2017-11-23  0.2679\n2017-11-24  0.7424\n2017-11-25  0.7446\n2017-11-26  0.3681\n2017-11-27  0.6844\n2017-11-28  0.6443\n2017-11-29  0.3479\n2017-11-30  0.1688\n2017-12-01  0.9908\n\u22ee\n2018-07-23  0.2488\n2018-07-24  0.8764\n2018-07-25  0.7111\n2018-07-26  0.9478\n2018-07-27  0.7875\n2018-07-28  0.1049\n2018-07-29  0.892\n2018-07-30  0.8987\n2018-07-31  0.663\n2018-08-01  0.0251\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.3729\n2017-05-24  0.8739\n2017-05-25  0.9881\n2017-05-26  0.4681\n2017-05-27  0.3318\n2017-05-28  0.0081\n2017-05-29  0.3743\n2017-05-30  0.7471\n2017-06-01  0.3359\n\u22ee\n2018-01-23  0.404\n2018-01-24  0.065\n2018-01-25  0.7365\n2018-01-26  0.7452\n2018-01-27  0.6573\n2018-01-28  0.5094\n2018-01-29  0.8935\n2018-01-30  0.7011\n2018-01-31  0.5782\n2018-02-01  0.3129\n\njulia  ijoin(x, y)\nERROR: ArgumentError: number of rows of each array must match (got (70, 71))", 
            "title": "Inner Joins"
        }, 
        {
            "location": "/combining/#leftright-joins", 
            "text": "Left and right joins are performed similarly to inner joins and the typical SQL join queries using the objects'  index  fields as the joining key.   Left Join : keep all observations of the LHS of the join, fill the RHS with NaN's where missing the corresponding time  index  Right Join : keep all observations of the RHS of the join, fill the LHS with NaN's where missing the corresponding time  index   \njulia  x = TS(rand(252))\nIndex       A\n2017-11-23  0.3448\n2017-11-24  0.6875\n2017-11-25  0.6443\n2017-11-26  0.0073\n2017-11-27  0.7005\n2017-11-28  0.0126\n2017-11-29  0.7137\n2017-11-30  0.8981\n2017-12-01  0.7404\n\u22ee\n2018-07-23  0.0327\n2018-07-24  0.0942\n2018-07-25  0.1692\n2018-07-26  0.6074\n2018-07-27  0.5717\n2018-07-28  0.8922\n2018-07-29  0.3482\n2018-07-30  0.0267\n2018-07-31  0.8178\n2018-08-01  0.4317\n\njulia  y = TS(rand(252), x.index .- Month(6))\nIndex       A\n2017-05-23  0.2485\n2017-05-24  0.6335\n2017-05-25  0.8235\n2017-05-26  0.6925\n2017-05-27  0.3553\n2017-05-28  0.9902\n2017-05-29  0.5057\n2017-05-30  0.4836\n2017-06-01  0.2484\n\u22ee\n2018-01-23  0.7971\n2018-01-24  0.3161\n2018-01-25  0.0771\n2018-01-26  0.1833\n2018-01-27  0.7146\n2018-01-28  0.7098\n2018-01-29  0.0608\n2018-01-30  0.9633\n2018-01-31  0.1848\n2018-02-01  0.4821\n\njulia  ljoin(x, y)\nIndex       A       A\n2017-11-23  0.3448  0.7834\n2017-11-24  0.6875  0.3477\n2017-11-25  0.6443  0.751\n2017-11-26  0.0073  0.1489\n2017-11-27  0.7005  0.0365\n2017-11-28  0.0126  0.4012\n2017-11-29  0.7137  0.402\n2017-11-30  0.8981  0.1994\n2017-12-01  0.7404  0.5838\n\u22ee\n2018-07-23  0.0327  NaN\n2018-07-24  0.0942  NaN\n2018-07-25  0.1692  NaN\n2018-07-26  0.6074  NaN\n2018-07-27  0.5717  NaN\n2018-07-28  0.8922  NaN\n2018-07-29  0.3482  NaN\n2018-07-30  0.0267  NaN\n2018-07-31  0.8178  NaN\n2018-08-01  0.4317  NaN\n\njulia  rjoin(x, y)\nIndex       A       A\n2017-05-23  NaN     0.2485\n2017-05-24  NaN     0.6335\n2017-05-25  NaN     0.8235\n2017-05-26  NaN     0.6925\n2017-05-27  NaN     0.3553\n2017-05-28  NaN     0.9902\n2017-05-29  NaN     0.5057\n2017-05-30  NaN     0.4836\n2017-06-01  NaN     0.2484\n\u22ee\n2018-01-23  0.6163  0.4634\n2018-01-24  0.3795  0.6058\n2018-01-25  0.2524  0.4774\n2018-01-26  0.6123  0.7971\n2018-01-27  0.3283  0.3161\n2018-01-28  0.8517  0.0771\n2018-01-29  0.3562  0.1833\n2018-01-30  0.1535  0.7146\n2018-01-31  0.3399  0.7098\n2018-02-01  0.2192  0.0608", 
            "title": "Left/Right Joins"
        }, 
        {
            "location": "/aggregation/", 
            "text": "Temporal Aggregation\n\n\n\n\nTime Period Sampling Methods\n\n\nSummarize by day of the week:\n\n\n\n\nmondays\n\n\ntuesdays\n\n\nwednesdays\n\n\nthursdays\n\n\nfridays\n\n\nsaturdays\n\n\nsundays\n\n\n\n\nSummarize by beginnings and endings of weeks, months, quarters, or years:\n\n\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\nbow\n\n\neow\n\n\nbom\n\n\neom\n\n\nboq\n\n\neoq\n\n\nboy\n\n\neoy\n\n\n\n\n\n\nCollapsing \n Summarizing\n\n\n\n\ncollapse\n\n\napply", 
            "title": "Aggregation"
        }, 
        {
            "location": "/aggregation/#temporal-aggregation", 
            "text": "", 
            "title": "Temporal Aggregation"
        }, 
        {
            "location": "/aggregation/#time-period-sampling-methods", 
            "text": "Summarize by day of the week:   mondays  tuesdays  wednesdays  thursdays  fridays  saturdays  sundays   Summarize by beginnings and endings of weeks, months, quarters, or years:   bow  eow  bom  eom  boq  eoq  boy  eoy  bow  eow  bom  eom  boq  eoq  boy  eoy", 
            "title": "Time Period Sampling Methods"
        }, 
        {
            "location": "/aggregation/#collapsing-summarizing", 
            "text": "collapse  apply", 
            "title": "Collapsing &amp; Summarizing"
        }
    ]
}